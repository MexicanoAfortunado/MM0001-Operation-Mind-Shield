{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "cae5422b-8c8e-44b5-90db-6e330ddbb421",
   "metadata": {},
   "source": [
    "# Binary Classification: Predicting Risk for Alzheimer's Disease"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "10a594c6-9587-4e71-befb-ffdf26026039",
   "metadata": {},
   "source": [
    "### Version 0.61"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a3b9f61c-2fc7-4546-b634-625c8f2fce17",
   "metadata": {},
   "source": [
    "## Author and Info"
   ]
  },
  {
   "cell_type": "raw",
   "id": "6cae416d-6223-4428-b2e7-d10ea44d8ea1",
   "metadata": {},
   "source": [
    "Michal Karpinski\n",
    "mpk1@cornell.edu\n",
    "tinyurl.com/mkbrand\n",
    "\n",
    "Notebook contents are based on and require data from: \n",
    "    github.com/SuperDataScience-Community-Missions/MM0001-Operation-Mind-Shield\n",
    "Some of the code and techniques are adapted from online courses in Machine Learning\n",
    "  by Super Data Science:\n",
    "    community.superdatascience.com/courses?topics=62620\n",
    "\n",
    "Dependencies: alzheimers_disease_data.csv"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3d283edb-d673-4855-9561-7a6ff33514db",
   "metadata": {},
   "source": [
    "## Data Source"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "e91b30a1-685e-487d-9a73-30ac58a1d1ba",
   "metadata": {},
   "outputs": [],
   "source": [
    "#@misc{rabie_el_kharoua_2024,\n",
    "#title={Alzheimer's Disease Dataset},\n",
    "#url={https://www.kaggle.com/dsv/8668279},\n",
    "#DOI={10.34740/KAGGLE/DSV/8668279},\n",
    "#publisher={Kaggle},\n",
    "#author={Rabie El Kharoua},\n",
    "#year={2024}\n",
    "#}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "837fdd10-bbc6-4a37-81d8-fe1e105bff00",
   "metadata": {},
   "source": [
    "## Readme"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cc8298e0-b72a-4179-95d6-e82a6cb134cc",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-success\">\n",
    "<b>Please review all markdown cells and longer comments</b> within code cells.  This will explain what is being done and why. ;)\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c9b218f-bef1-4a9d-acc6-afd3ac9fbb20",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-success\">\n",
    "<b>Please review Outline of Notebook.</b\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cda98c31-ab33-465f-abba-a1346e664285",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-success\">\n",
    "<b>FYI/Note:</b>\n",
    "<p>Before you \"Run All Cells,\" review subsections <i>Try Randomized Grid Search</i> under <i>Hyperparameter Tuning</i> to view the saved output.  There are three such sections.</p>\n",
    "<p>If you \"Run All Cells,\" (a) the output from the randomized grid search cells will be cleared out and (b) the search/fit code will not run (it has been commented out, see subsections <i>Try Randomized Grid Search</i> under <i>Hyperparameter Tuning</i> for more info).  Manual grid search cells <i>will</i> run, but generally take < 2 minutes each to execute.</p>\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c7e152f5-7e9d-43a0-880e-2375a693e1d5",
   "metadata": {},
   "source": [
    "## Outline of Notebook"
   ]
  },
  {
   "cell_type": "raw",
   "id": "1810d6c2-eee7-47b4-8a1e-4327f41336b2",
   "metadata": {},
   "source": [
    "Date Exploration\n",
    "    determine if any data are missing, scale features, prepare for analysis\n",
    "\n",
    "Try Various Models\n",
    "    attempt Logistic Regression, Decision Trees, Extra Trees, Random Forest, LightGBM\n",
    "    poorly fitting models are moved to Other Classifiers section\n",
    "    Tuned models reflect hyperparameters determined later on\n",
    "\n",
    "Plot a Pair of Features\n",
    "    Define Functions to make scatter plots for Decision Trees, Extra Trees, Random Forest, LightGBM\n",
    "    any two features can be plotted, three examples are given\n",
    "    Output for each: four plots, depicting differences between models:\n",
    "        Logistic Regression, Extra Trees, LightGBM, Random Forest\n",
    "\n",
    "Other Classifiers\n",
    "    tried other fitting models:\n",
    "    Naive Bayes, KNN, SVC (linear), Kernel SVC (rbf), \n",
    "\n",
    "Table: Accuracies for All Models\n",
    "    Summary of all models attempted\n",
    "\n",
    "Hyperparameter Tuning\n",
    "    create function\n",
    "\n",
    "    Extra Trees\n",
    "        Manual tuning\n",
    "        Random search tuning\n",
    "        Display best hyperparameters\n",
    "    LightGBM\n",
    "        Manual tuning\n",
    "        Random search tuning\n",
    "        Display best hyperparameters\n",
    "    Random Forest\n",
    "        Manual tuning\n",
    "        Random search tuning\n",
    "        Display best hyperparameters\n",
    "\n",
    "    --> Random search tuning did not yield significant improvement\n",
    "    --> All three models produce good scores after tuning\n",
    "            Selected Random Forest as best algorithm going forward\n",
    "    --> n_estimators > 100 did not significantly improve results\n",
    "            --> Using n_estimators = 100 going forward\n",
    "\n",
    "Visualization and Exploring Top Contributing Features\n",
    "    Table of Importances of Features\n",
    "    Plot: Top 10 Features\n",
    "    Plot: Features with Importances ≥ 0.01\n",
    "    Plot: Correlation Matrix\n",
    "\n",
    "Hyperparameter Tuning Random Forest Classifier with Subsets of Data\n",
    "    Features with Importances ≥ 0.01\n",
    "    Top 10 Features\n",
    "    Top 5 Features\n",
    "    --> hyperparameters are not significantly different\n",
    "            keeping values as determined earlier\n",
    "\n",
    "Accuracy Table after 10-Fold Validation for Best Models\n",
    "    Table contains:\n",
    "        Accuracies for Training set after 10-fold validation\n",
    "        Accuracies for Test w/out cross-validation\n",
    "            Ran 10 predictions against Test set w/out random seet\n",
    "                for each model with tuned hyperparameters\n",
    "\n",
    "Attempt at Feature Selection & Extraction\n",
    "    various combinations of features / reduction of features:\n",
    "        Combine Boolean features into one\n",
    "        Combine top two Boolean features\n",
    "        Combine Cholesterol features into one\n",
    "        Combine Booleans and Cholesterol\n",
    "        Combine top two Booleans and Cholesterol\n",
    "        Top 7 Features plus Combine top two Booleans and Cholesterol\n",
    "        Top 5 Features plus Combine top two Booleans and Cholesterol\n",
    "\n",
    "Table/Plot of Final Results for Feature Extraction with RF and Best Models\n",
    "\n",
    "Conclusion (info block)\n",
    "\n",
    "Dimentionality Reduction Attempts\n",
    "    Isomap Embedding, Principal Component Analysis, Locally Linear Embedding,\n",
    "        Modified Locally Linear Embedding, Linear Discriminant Analysis (LDA),\n",
    "        Quadratic Discriminant Analyis (QDA)\n",
    "    Note: There are only n = 2 classes (binary) in the data set; for several\n",
    "        algorithms this means that a single dimension is constructed (must be n-1).\n",
    "        This limits their usefulness, resulting in poor fitting\n",
    "    Table: Dimensionality Reduction Summary"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "de1de9a5-b74b-4391-bb33-af39f04d5624",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true
   },
   "source": [
    "## Data Exploration and Pre-processing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "7c6b11ba-229a-4035-b4df-65c3e6098fd3",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import warnings\n",
    "warnings.simplefilter(\"ignore\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "c524139c-c611-4020-8448-ccb608516832",
   "metadata": {},
   "outputs": [],
   "source": [
    "def var_name(variable):\n",
    "    #return [name for name, value in locals().items() if value is variable][0]\n",
    "    return [name for name, value in globals().items() if value is variable][0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "e62308f1-9fae-4ea4-9657-da5883dcdb99",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv('alzheimers_disease_data.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "8c55a284-63bd-47ae-8726-5f558e6d1794",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PatientID</th>\n",
       "      <th>Age</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Ethnicity</th>\n",
       "      <th>EducationLevel</th>\n",
       "      <th>BMI</th>\n",
       "      <th>Smoking</th>\n",
       "      <th>AlcoholConsumption</th>\n",
       "      <th>PhysicalActivity</th>\n",
       "      <th>DietQuality</th>\n",
       "      <th>SleepQuality</th>\n",
       "      <th>FamilyHistoryAlzheimers</th>\n",
       "      <th>CardiovascularDisease</th>\n",
       "      <th>Diabetes</th>\n",
       "      <th>Depression</th>\n",
       "      <th>HeadInjury</th>\n",
       "      <th>Hypertension</th>\n",
       "      <th>SystolicBP</th>\n",
       "      <th>DiastolicBP</th>\n",
       "      <th>CholesterolTotal</th>\n",
       "      <th>CholesterolLDL</th>\n",
       "      <th>CholesterolHDL</th>\n",
       "      <th>CholesterolTriglycerides</th>\n",
       "      <th>MMSE</th>\n",
       "      <th>FunctionalAssessment</th>\n",
       "      <th>MemoryComplaints</th>\n",
       "      <th>BehavioralProblems</th>\n",
       "      <th>ADL</th>\n",
       "      <th>Confusion</th>\n",
       "      <th>Disorientation</th>\n",
       "      <th>PersonalityChanges</th>\n",
       "      <th>DifficultyCompletingTasks</th>\n",
       "      <th>Forgetfulness</th>\n",
       "      <th>Diagnosis</th>\n",
       "      <th>DoctorInCharge</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>4751</td>\n",
       "      <td>73</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>22.927749</td>\n",
       "      <td>0</td>\n",
       "      <td>13.297218</td>\n",
       "      <td>6.327112</td>\n",
       "      <td>1.347214</td>\n",
       "      <td>9.025679</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>142</td>\n",
       "      <td>72</td>\n",
       "      <td>242.366840</td>\n",
       "      <td>56.150897</td>\n",
       "      <td>33.682563</td>\n",
       "      <td>162.189143</td>\n",
       "      <td>21.463532</td>\n",
       "      <td>6.518877</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.725883</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>XXXConfid</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4752</td>\n",
       "      <td>89</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>26.827681</td>\n",
       "      <td>0</td>\n",
       "      <td>4.542524</td>\n",
       "      <td>7.619885</td>\n",
       "      <td>0.518767</td>\n",
       "      <td>7.151293</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>115</td>\n",
       "      <td>64</td>\n",
       "      <td>231.162595</td>\n",
       "      <td>193.407996</td>\n",
       "      <td>79.028477</td>\n",
       "      <td>294.630909</td>\n",
       "      <td>20.613267</td>\n",
       "      <td>7.118696</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2.592424</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>XXXConfid</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4753</td>\n",
       "      <td>73</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>17.795882</td>\n",
       "      <td>0</td>\n",
       "      <td>19.555085</td>\n",
       "      <td>7.844988</td>\n",
       "      <td>1.826335</td>\n",
       "      <td>9.673574</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>99</td>\n",
       "      <td>116</td>\n",
       "      <td>284.181858</td>\n",
       "      <td>153.322762</td>\n",
       "      <td>69.772292</td>\n",
       "      <td>83.638324</td>\n",
       "      <td>7.356249</td>\n",
       "      <td>5.895077</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7.119548</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>XXXConfid</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4754</td>\n",
       "      <td>74</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>33.800817</td>\n",
       "      <td>1</td>\n",
       "      <td>12.209266</td>\n",
       "      <td>8.428001</td>\n",
       "      <td>7.435604</td>\n",
       "      <td>8.392554</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>118</td>\n",
       "      <td>115</td>\n",
       "      <td>159.582240</td>\n",
       "      <td>65.366637</td>\n",
       "      <td>68.457491</td>\n",
       "      <td>277.577358</td>\n",
       "      <td>13.991127</td>\n",
       "      <td>8.965106</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>6.481226</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>XXXConfid</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4755</td>\n",
       "      <td>89</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>20.716974</td>\n",
       "      <td>0</td>\n",
       "      <td>18.454356</td>\n",
       "      <td>6.310461</td>\n",
       "      <td>0.795498</td>\n",
       "      <td>5.597238</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>94</td>\n",
       "      <td>117</td>\n",
       "      <td>237.602184</td>\n",
       "      <td>92.869700</td>\n",
       "      <td>56.874305</td>\n",
       "      <td>291.198780</td>\n",
       "      <td>13.517609</td>\n",
       "      <td>6.045039</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.014691</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>XXXConfid</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PatientID  Age  Gender  Ethnicity  EducationLevel        BMI  Smoking  \\\n",
       "0       4751   73       0          0               2  22.927749        0   \n",
       "1       4752   89       0          0               0  26.827681        0   \n",
       "2       4753   73       0          3               1  17.795882        0   \n",
       "3       4754   74       1          0               1  33.800817        1   \n",
       "4       4755   89       0          0               0  20.716974        0   \n",
       "\n",
       "   AlcoholConsumption  PhysicalActivity  DietQuality  SleepQuality  \\\n",
       "0           13.297218          6.327112     1.347214      9.025679   \n",
       "1            4.542524          7.619885     0.518767      7.151293   \n",
       "2           19.555085          7.844988     1.826335      9.673574   \n",
       "3           12.209266          8.428001     7.435604      8.392554   \n",
       "4           18.454356          6.310461     0.795498      5.597238   \n",
       "\n",
       "   FamilyHistoryAlzheimers  CardiovascularDisease  Diabetes  Depression  \\\n",
       "0                        0                      0         1           1   \n",
       "1                        0                      0         0           0   \n",
       "2                        1                      0         0           0   \n",
       "3                        0                      0         0           0   \n",
       "4                        0                      0         0           0   \n",
       "\n",
       "   HeadInjury  Hypertension  SystolicBP  DiastolicBP  CholesterolTotal  \\\n",
       "0           0             0         142           72        242.366840   \n",
       "1           0             0         115           64        231.162595   \n",
       "2           0             0          99          116        284.181858   \n",
       "3           0             0         118          115        159.582240   \n",
       "4           0             0          94          117        237.602184   \n",
       "\n",
       "   CholesterolLDL  CholesterolHDL  CholesterolTriglycerides       MMSE  \\\n",
       "0       56.150897       33.682563                162.189143  21.463532   \n",
       "1      193.407996       79.028477                294.630909  20.613267   \n",
       "2      153.322762       69.772292                 83.638324   7.356249   \n",
       "3       65.366637       68.457491                277.577358  13.991127   \n",
       "4       92.869700       56.874305                291.198780  13.517609   \n",
       "\n",
       "   FunctionalAssessment  MemoryComplaints  BehavioralProblems       ADL  \\\n",
       "0              6.518877                 0                   0  1.725883   \n",
       "1              7.118696                 0                   0  2.592424   \n",
       "2              5.895077                 0                   0  7.119548   \n",
       "3              8.965106                 0                   1  6.481226   \n",
       "4              6.045039                 0                   0  0.014691   \n",
       "\n",
       "   Confusion  Disorientation  PersonalityChanges  DifficultyCompletingTasks  \\\n",
       "0          0               0                   0                          1   \n",
       "1          0               0                   0                          0   \n",
       "2          0               1                   0                          1   \n",
       "3          0               0                   0                          0   \n",
       "4          0               0                   1                          1   \n",
       "\n",
       "   Forgetfulness  Diagnosis DoctorInCharge  \n",
       "0              0          0      XXXConfid  \n",
       "1              1          0      XXXConfid  \n",
       "2              0          0      XXXConfid  \n",
       "3              0          0      XXXConfid  \n",
       "4              0          0      XXXConfid  "
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Set option to display all columns (by default, middle columns will be omitted from output)\n",
    "pd.set_option('display.max_columns', None)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "577ce05f-9336-4085-a17e-395c9bda950c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Drop irrelevant features\n",
    "df.drop(['PatientID', 'DoctorInCharge'], axis = 1, inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "e18f5db4-20c0-4783-bcab-d95847924ba9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Age</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Ethnicity</th>\n",
       "      <th>EducationLevel</th>\n",
       "      <th>BMI</th>\n",
       "      <th>Smoking</th>\n",
       "      <th>AlcoholConsumption</th>\n",
       "      <th>PhysicalActivity</th>\n",
       "      <th>DietQuality</th>\n",
       "      <th>SleepQuality</th>\n",
       "      <th>FamilyHistoryAlzheimers</th>\n",
       "      <th>CardiovascularDisease</th>\n",
       "      <th>Diabetes</th>\n",
       "      <th>Depression</th>\n",
       "      <th>HeadInjury</th>\n",
       "      <th>Hypertension</th>\n",
       "      <th>SystolicBP</th>\n",
       "      <th>DiastolicBP</th>\n",
       "      <th>CholesterolTotal</th>\n",
       "      <th>CholesterolLDL</th>\n",
       "      <th>CholesterolHDL</th>\n",
       "      <th>CholesterolTriglycerides</th>\n",
       "      <th>MMSE</th>\n",
       "      <th>FunctionalAssessment</th>\n",
       "      <th>MemoryComplaints</th>\n",
       "      <th>BehavioralProblems</th>\n",
       "      <th>ADL</th>\n",
       "      <th>Confusion</th>\n",
       "      <th>Disorientation</th>\n",
       "      <th>PersonalityChanges</th>\n",
       "      <th>DifficultyCompletingTasks</th>\n",
       "      <th>Forgetfulness</th>\n",
       "      <th>Diagnosis</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>73</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>22.927749</td>\n",
       "      <td>0</td>\n",
       "      <td>13.297218</td>\n",
       "      <td>6.327112</td>\n",
       "      <td>1.347214</td>\n",
       "      <td>9.025679</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>142</td>\n",
       "      <td>72</td>\n",
       "      <td>242.366840</td>\n",
       "      <td>56.150897</td>\n",
       "      <td>33.682563</td>\n",
       "      <td>162.189143</td>\n",
       "      <td>21.463532</td>\n",
       "      <td>6.518877</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.725883</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>89</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>26.827681</td>\n",
       "      <td>0</td>\n",
       "      <td>4.542524</td>\n",
       "      <td>7.619885</td>\n",
       "      <td>0.518767</td>\n",
       "      <td>7.151293</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>115</td>\n",
       "      <td>64</td>\n",
       "      <td>231.162595</td>\n",
       "      <td>193.407996</td>\n",
       "      <td>79.028477</td>\n",
       "      <td>294.630909</td>\n",
       "      <td>20.613267</td>\n",
       "      <td>7.118696</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2.592424</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>73</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>17.795882</td>\n",
       "      <td>0</td>\n",
       "      <td>19.555085</td>\n",
       "      <td>7.844988</td>\n",
       "      <td>1.826335</td>\n",
       "      <td>9.673574</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>99</td>\n",
       "      <td>116</td>\n",
       "      <td>284.181858</td>\n",
       "      <td>153.322762</td>\n",
       "      <td>69.772292</td>\n",
       "      <td>83.638324</td>\n",
       "      <td>7.356249</td>\n",
       "      <td>5.895077</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7.119548</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>74</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>33.800817</td>\n",
       "      <td>1</td>\n",
       "      <td>12.209266</td>\n",
       "      <td>8.428001</td>\n",
       "      <td>7.435604</td>\n",
       "      <td>8.392554</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>118</td>\n",
       "      <td>115</td>\n",
       "      <td>159.582240</td>\n",
       "      <td>65.366637</td>\n",
       "      <td>68.457491</td>\n",
       "      <td>277.577358</td>\n",
       "      <td>13.991127</td>\n",
       "      <td>8.965106</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>6.481226</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>89</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>20.716974</td>\n",
       "      <td>0</td>\n",
       "      <td>18.454356</td>\n",
       "      <td>6.310461</td>\n",
       "      <td>0.795498</td>\n",
       "      <td>5.597238</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>94</td>\n",
       "      <td>117</td>\n",
       "      <td>237.602184</td>\n",
       "      <td>92.869700</td>\n",
       "      <td>56.874305</td>\n",
       "      <td>291.198780</td>\n",
       "      <td>13.517609</td>\n",
       "      <td>6.045039</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.014691</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Age  Gender  Ethnicity  EducationLevel        BMI  Smoking  \\\n",
       "0   73       0          0               2  22.927749        0   \n",
       "1   89       0          0               0  26.827681        0   \n",
       "2   73       0          3               1  17.795882        0   \n",
       "3   74       1          0               1  33.800817        1   \n",
       "4   89       0          0               0  20.716974        0   \n",
       "\n",
       "   AlcoholConsumption  PhysicalActivity  DietQuality  SleepQuality  \\\n",
       "0           13.297218          6.327112     1.347214      9.025679   \n",
       "1            4.542524          7.619885     0.518767      7.151293   \n",
       "2           19.555085          7.844988     1.826335      9.673574   \n",
       "3           12.209266          8.428001     7.435604      8.392554   \n",
       "4           18.454356          6.310461     0.795498      5.597238   \n",
       "\n",
       "   FamilyHistoryAlzheimers  CardiovascularDisease  Diabetes  Depression  \\\n",
       "0                        0                      0         1           1   \n",
       "1                        0                      0         0           0   \n",
       "2                        1                      0         0           0   \n",
       "3                        0                      0         0           0   \n",
       "4                        0                      0         0           0   \n",
       "\n",
       "   HeadInjury  Hypertension  SystolicBP  DiastolicBP  CholesterolTotal  \\\n",
       "0           0             0         142           72        242.366840   \n",
       "1           0             0         115           64        231.162595   \n",
       "2           0             0          99          116        284.181858   \n",
       "3           0             0         118          115        159.582240   \n",
       "4           0             0          94          117        237.602184   \n",
       "\n",
       "   CholesterolLDL  CholesterolHDL  CholesterolTriglycerides       MMSE  \\\n",
       "0       56.150897       33.682563                162.189143  21.463532   \n",
       "1      193.407996       79.028477                294.630909  20.613267   \n",
       "2      153.322762       69.772292                 83.638324   7.356249   \n",
       "3       65.366637       68.457491                277.577358  13.991127   \n",
       "4       92.869700       56.874305                291.198780  13.517609   \n",
       "\n",
       "   FunctionalAssessment  MemoryComplaints  BehavioralProblems       ADL  \\\n",
       "0              6.518877                 0                   0  1.725883   \n",
       "1              7.118696                 0                   0  2.592424   \n",
       "2              5.895077                 0                   0  7.119548   \n",
       "3              8.965106                 0                   1  6.481226   \n",
       "4              6.045039                 0                   0  0.014691   \n",
       "\n",
       "   Confusion  Disorientation  PersonalityChanges  DifficultyCompletingTasks  \\\n",
       "0          0               0                   0                          1   \n",
       "1          0               0                   0                          0   \n",
       "2          0               1                   0                          1   \n",
       "3          0               0                   0                          0   \n",
       "4          0               0                   1                          1   \n",
       "\n",
       "   Forgetfulness  Diagnosis  \n",
       "0              0          0  \n",
       "1              1          0  \n",
       "2              0          0  \n",
       "3              0          0  \n",
       "4              0          0  "
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "ad914d82-7bd6-46df-8827-f8a2be2f8534",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 2149 entries, 0 to 2148\n",
      "Data columns (total 33 columns):\n",
      " #   Column                     Non-Null Count  Dtype  \n",
      "---  ------                     --------------  -----  \n",
      " 0   Age                        2149 non-null   int64  \n",
      " 1   Gender                     2149 non-null   int64  \n",
      " 2   Ethnicity                  2149 non-null   int64  \n",
      " 3   EducationLevel             2149 non-null   int64  \n",
      " 4   BMI                        2149 non-null   float64\n",
      " 5   Smoking                    2149 non-null   int64  \n",
      " 6   AlcoholConsumption         2149 non-null   float64\n",
      " 7   PhysicalActivity           2149 non-null   float64\n",
      " 8   DietQuality                2149 non-null   float64\n",
      " 9   SleepQuality               2149 non-null   float64\n",
      " 10  FamilyHistoryAlzheimers    2149 non-null   int64  \n",
      " 11  CardiovascularDisease      2149 non-null   int64  \n",
      " 12  Diabetes                   2149 non-null   int64  \n",
      " 13  Depression                 2149 non-null   int64  \n",
      " 14  HeadInjury                 2149 non-null   int64  \n",
      " 15  Hypertension               2149 non-null   int64  \n",
      " 16  SystolicBP                 2149 non-null   int64  \n",
      " 17  DiastolicBP                2149 non-null   int64  \n",
      " 18  CholesterolTotal           2149 non-null   float64\n",
      " 19  CholesterolLDL             2149 non-null   float64\n",
      " 20  CholesterolHDL             2149 non-null   float64\n",
      " 21  CholesterolTriglycerides   2149 non-null   float64\n",
      " 22  MMSE                       2149 non-null   float64\n",
      " 23  FunctionalAssessment       2149 non-null   float64\n",
      " 24  MemoryComplaints           2149 non-null   int64  \n",
      " 25  BehavioralProblems         2149 non-null   int64  \n",
      " 26  ADL                        2149 non-null   float64\n",
      " 27  Confusion                  2149 non-null   int64  \n",
      " 28  Disorientation             2149 non-null   int64  \n",
      " 29  PersonalityChanges         2149 non-null   int64  \n",
      " 30  DifficultyCompletingTasks  2149 non-null   int64  \n",
      " 31  Forgetfulness              2149 non-null   int64  \n",
      " 32  Diagnosis                  2149 non-null   int64  \n",
      "dtypes: float64(12), int64(21)\n",
      "memory usage: 554.2 KB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "7aa8c966-1f34-404e-92b3-f3d61317ffc8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2144</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2145</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2146</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2147</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2148</th>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2149 rows × 0 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: []\n",
       "Index: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]\n",
       "\n",
       "[2149 rows x 0 columns]"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.loc[:, df.isna().any()]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "081394fe-3603-464e-9108-0d65e679bc42",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2144</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2145</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2146</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2147</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2148</th>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2149 rows × 0 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: []\n",
       "Index: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]\n",
       "\n",
       "[2149 rows x 0 columns]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.loc[:, df.isnull().any()]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "428ad4a9-bc0b-41aa-bec2-c46c567ddc7e",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true
   },
   "source": [
    "#### There are no missing, NaN, or Null values"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3791e253-8732-47ac-a118-1338b759dade",
   "metadata": {},
   "source": [
    "#### Identify Boolean vs. non-Boolean (categorical and continuous)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "8d26ab02-5a80-41b5-b9f1-8590c30cfad8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Age</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Ethnicity</th>\n",
       "      <th>EducationLevel</th>\n",
       "      <th>BMI</th>\n",
       "      <th>Smoking</th>\n",
       "      <th>AlcoholConsumption</th>\n",
       "      <th>PhysicalActivity</th>\n",
       "      <th>DietQuality</th>\n",
       "      <th>SleepQuality</th>\n",
       "      <th>FamilyHistoryAlzheimers</th>\n",
       "      <th>CardiovascularDisease</th>\n",
       "      <th>Diabetes</th>\n",
       "      <th>Depression</th>\n",
       "      <th>HeadInjury</th>\n",
       "      <th>Hypertension</th>\n",
       "      <th>SystolicBP</th>\n",
       "      <th>DiastolicBP</th>\n",
       "      <th>CholesterolTotal</th>\n",
       "      <th>CholesterolLDL</th>\n",
       "      <th>CholesterolHDL</th>\n",
       "      <th>CholesterolTriglycerides</th>\n",
       "      <th>MMSE</th>\n",
       "      <th>FunctionalAssessment</th>\n",
       "      <th>MemoryComplaints</th>\n",
       "      <th>BehavioralProblems</th>\n",
       "      <th>ADL</th>\n",
       "      <th>Confusion</th>\n",
       "      <th>Disorientation</th>\n",
       "      <th>PersonalityChanges</th>\n",
       "      <th>DifficultyCompletingTasks</th>\n",
       "      <th>Forgetfulness</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>73</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>22.927749</td>\n",
       "      <td>0</td>\n",
       "      <td>13.297218</td>\n",
       "      <td>6.327112</td>\n",
       "      <td>1.347214</td>\n",
       "      <td>9.025679</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>142</td>\n",
       "      <td>72</td>\n",
       "      <td>242.366840</td>\n",
       "      <td>56.150897</td>\n",
       "      <td>33.682563</td>\n",
       "      <td>162.189143</td>\n",
       "      <td>21.463532</td>\n",
       "      <td>6.518877</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.725883</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>89</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>26.827681</td>\n",
       "      <td>0</td>\n",
       "      <td>4.542524</td>\n",
       "      <td>7.619885</td>\n",
       "      <td>0.518767</td>\n",
       "      <td>7.151293</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>115</td>\n",
       "      <td>64</td>\n",
       "      <td>231.162595</td>\n",
       "      <td>193.407996</td>\n",
       "      <td>79.028477</td>\n",
       "      <td>294.630909</td>\n",
       "      <td>20.613267</td>\n",
       "      <td>7.118696</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2.592424</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>73</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>17.795882</td>\n",
       "      <td>0</td>\n",
       "      <td>19.555085</td>\n",
       "      <td>7.844988</td>\n",
       "      <td>1.826335</td>\n",
       "      <td>9.673574</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>99</td>\n",
       "      <td>116</td>\n",
       "      <td>284.181858</td>\n",
       "      <td>153.322762</td>\n",
       "      <td>69.772292</td>\n",
       "      <td>83.638324</td>\n",
       "      <td>7.356249</td>\n",
       "      <td>5.895077</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7.119548</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>74</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>33.800817</td>\n",
       "      <td>1</td>\n",
       "      <td>12.209266</td>\n",
       "      <td>8.428001</td>\n",
       "      <td>7.435604</td>\n",
       "      <td>8.392554</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>118</td>\n",
       "      <td>115</td>\n",
       "      <td>159.582240</td>\n",
       "      <td>65.366637</td>\n",
       "      <td>68.457491</td>\n",
       "      <td>277.577358</td>\n",
       "      <td>13.991127</td>\n",
       "      <td>8.965106</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>6.481226</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>89</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>20.716974</td>\n",
       "      <td>0</td>\n",
       "      <td>18.454356</td>\n",
       "      <td>6.310461</td>\n",
       "      <td>0.795498</td>\n",
       "      <td>5.597238</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>94</td>\n",
       "      <td>117</td>\n",
       "      <td>237.602184</td>\n",
       "      <td>92.869700</td>\n",
       "      <td>56.874305</td>\n",
       "      <td>291.198780</td>\n",
       "      <td>13.517609</td>\n",
       "      <td>6.045039</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.014691</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2144</th>\n",
       "      <td>61</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>39.121757</td>\n",
       "      <td>0</td>\n",
       "      <td>1.561126</td>\n",
       "      <td>4.049964</td>\n",
       "      <td>6.555306</td>\n",
       "      <td>7.535540</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>122</td>\n",
       "      <td>101</td>\n",
       "      <td>280.476824</td>\n",
       "      <td>94.870490</td>\n",
       "      <td>60.943092</td>\n",
       "      <td>234.520123</td>\n",
       "      <td>1.201190</td>\n",
       "      <td>0.238667</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4.492838</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2145</th>\n",
       "      <td>75</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>17.857903</td>\n",
       "      <td>0</td>\n",
       "      <td>18.767261</td>\n",
       "      <td>1.360667</td>\n",
       "      <td>2.904662</td>\n",
       "      <td>8.555256</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>152</td>\n",
       "      <td>106</td>\n",
       "      <td>186.384436</td>\n",
       "      <td>95.410700</td>\n",
       "      <td>93.649735</td>\n",
       "      <td>367.986877</td>\n",
       "      <td>6.458060</td>\n",
       "      <td>8.687480</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>9.204952</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2146</th>\n",
       "      <td>77</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>15.476479</td>\n",
       "      <td>0</td>\n",
       "      <td>4.594670</td>\n",
       "      <td>9.886002</td>\n",
       "      <td>8.120025</td>\n",
       "      <td>5.769464</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>115</td>\n",
       "      <td>118</td>\n",
       "      <td>237.024558</td>\n",
       "      <td>156.267294</td>\n",
       "      <td>99.678209</td>\n",
       "      <td>294.802338</td>\n",
       "      <td>17.011003</td>\n",
       "      <td>1.972137</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>5.036334</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2147</th>\n",
       "      <td>78</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>15.299911</td>\n",
       "      <td>0</td>\n",
       "      <td>8.674505</td>\n",
       "      <td>6.354282</td>\n",
       "      <td>1.263427</td>\n",
       "      <td>8.322874</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>103</td>\n",
       "      <td>96</td>\n",
       "      <td>242.197192</td>\n",
       "      <td>52.482961</td>\n",
       "      <td>81.281111</td>\n",
       "      <td>145.253746</td>\n",
       "      <td>4.030491</td>\n",
       "      <td>5.173891</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3.785399</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2148</th>\n",
       "      <td>72</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>33.289738</td>\n",
       "      <td>0</td>\n",
       "      <td>7.890703</td>\n",
       "      <td>6.570993</td>\n",
       "      <td>7.941404</td>\n",
       "      <td>9.878711</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>166</td>\n",
       "      <td>78</td>\n",
       "      <td>283.396797</td>\n",
       "      <td>92.200064</td>\n",
       "      <td>81.920043</td>\n",
       "      <td>217.396873</td>\n",
       "      <td>11.114777</td>\n",
       "      <td>6.307543</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>8.327563</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2149 rows × 32 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Age  Gender  Ethnicity  EducationLevel        BMI  Smoking  \\\n",
       "0      73       0          0               2  22.927749        0   \n",
       "1      89       0          0               0  26.827681        0   \n",
       "2      73       0          3               1  17.795882        0   \n",
       "3      74       1          0               1  33.800817        1   \n",
       "4      89       0          0               0  20.716974        0   \n",
       "...   ...     ...        ...             ...        ...      ...   \n",
       "2144   61       0          0               1  39.121757        0   \n",
       "2145   75       0          0               2  17.857903        0   \n",
       "2146   77       0          0               1  15.476479        0   \n",
       "2147   78       1          3               1  15.299911        0   \n",
       "2148   72       0          0               2  33.289738        0   \n",
       "\n",
       "      AlcoholConsumption  PhysicalActivity  DietQuality  SleepQuality  \\\n",
       "0              13.297218          6.327112     1.347214      9.025679   \n",
       "1               4.542524          7.619885     0.518767      7.151293   \n",
       "2              19.555085          7.844988     1.826335      9.673574   \n",
       "3              12.209266          8.428001     7.435604      8.392554   \n",
       "4              18.454356          6.310461     0.795498      5.597238   \n",
       "...                  ...               ...          ...           ...   \n",
       "2144            1.561126          4.049964     6.555306      7.535540   \n",
       "2145           18.767261          1.360667     2.904662      8.555256   \n",
       "2146            4.594670          9.886002     8.120025      5.769464   \n",
       "2147            8.674505          6.354282     1.263427      8.322874   \n",
       "2148            7.890703          6.570993     7.941404      9.878711   \n",
       "\n",
       "      FamilyHistoryAlzheimers  CardiovascularDisease  Diabetes  Depression  \\\n",
       "0                           0                      0         1           1   \n",
       "1                           0                      0         0           0   \n",
       "2                           1                      0         0           0   \n",
       "3                           0                      0         0           0   \n",
       "4                           0                      0         0           0   \n",
       "...                       ...                    ...       ...         ...   \n",
       "2144                        0                      0         0           0   \n",
       "2145                        0                      0         0           0   \n",
       "2146                        0                      0         0           0   \n",
       "2147                        0                      1         0           0   \n",
       "2148                        0                      0         0           0   \n",
       "\n",
       "      HeadInjury  Hypertension  SystolicBP  DiastolicBP  CholesterolTotal  \\\n",
       "0              0             0         142           72        242.366840   \n",
       "1              0             0         115           64        231.162595   \n",
       "2              0             0          99          116        284.181858   \n",
       "3              0             0         118          115        159.582240   \n",
       "4              0             0          94          117        237.602184   \n",
       "...          ...           ...         ...          ...               ...   \n",
       "2144           0             0         122          101        280.476824   \n",
       "2145           0             0         152          106        186.384436   \n",
       "2146           0             0         115          118        237.024558   \n",
       "2147           0             0         103           96        242.197192   \n",
       "2148           0             0         166           78        283.396797   \n",
       "\n",
       "      CholesterolLDL  CholesterolHDL  CholesterolTriglycerides       MMSE  \\\n",
       "0          56.150897       33.682563                162.189143  21.463532   \n",
       "1         193.407996       79.028477                294.630909  20.613267   \n",
       "2         153.322762       69.772292                 83.638324   7.356249   \n",
       "3          65.366637       68.457491                277.577358  13.991127   \n",
       "4          92.869700       56.874305                291.198780  13.517609   \n",
       "...              ...             ...                       ...        ...   \n",
       "2144       94.870490       60.943092                234.520123   1.201190   \n",
       "2145       95.410700       93.649735                367.986877   6.458060   \n",
       "2146      156.267294       99.678209                294.802338  17.011003   \n",
       "2147       52.482961       81.281111                145.253746   4.030491   \n",
       "2148       92.200064       81.920043                217.396873  11.114777   \n",
       "\n",
       "      FunctionalAssessment  MemoryComplaints  BehavioralProblems       ADL  \\\n",
       "0                 6.518877                 0                   0  1.725883   \n",
       "1                 7.118696                 0                   0  2.592424   \n",
       "2                 5.895077                 0                   0  7.119548   \n",
       "3                 8.965106                 0                   1  6.481226   \n",
       "4                 6.045039                 0                   0  0.014691   \n",
       "...                    ...               ...                 ...       ...   \n",
       "2144              0.238667                 0                   0  4.492838   \n",
       "2145              8.687480                 0                   1  9.204952   \n",
       "2146              1.972137                 0                   0  5.036334   \n",
       "2147              5.173891                 0                   0  3.785399   \n",
       "2148              6.307543                 0                   1  8.327563   \n",
       "\n",
       "      Confusion  Disorientation  PersonalityChanges  \\\n",
       "0             0               0                   0   \n",
       "1             0               0                   0   \n",
       "2             0               1                   0   \n",
       "3             0               0                   0   \n",
       "4             0               0                   1   \n",
       "...         ...             ...                 ...   \n",
       "2144          1               0                   0   \n",
       "2145          0               0                   0   \n",
       "2146          0               0                   0   \n",
       "2147          0               0                   0   \n",
       "2148          0               1                   0   \n",
       "\n",
       "      DifficultyCompletingTasks  Forgetfulness  \n",
       "0                             1              0  \n",
       "1                             0              1  \n",
       "2                             1              0  \n",
       "3                             0              0  \n",
       "4                             1              0  \n",
       "...                         ...            ...  \n",
       "2144                          0              0  \n",
       "2145                          0              0  \n",
       "2146                          0              0  \n",
       "2147                          0              1  \n",
       "2148                          0              1  \n",
       "\n",
       "[2149 rows x 32 columns]"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# make Features frame\n",
    "feat = df.iloc[:, :-1]\n",
    "feat"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "1de1ca4c-51cd-437e-b29c-a6e6e0ff6dae",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Identify Boolean feature names\n",
    "col_bool = feat.loc[:, ((feat == 0) | (feat == 1)).all()].columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "37287ce8-0581-42ac-9520-9be75c7b5778",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Identify non-Boolean features names\n",
    "col_nbool = (feat.drop(feat.loc[:, ((feat == 0) | (feat == 1)).all()].columns, axis = 1)).columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "d7d7ba2e-7b53-4772-8102-e1bd54b862e3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# check if we still have all the columns\n",
    "len(feat.columns) == len(col_nbool) + len(col_bool)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6dc3f983-6af5-4874-8432-5a5a3bb23227",
   "metadata": {},
   "source": [
    "#### create Dataframes containing Boolean and non-Boolean features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "c594738b-5dc9-4231-b62f-74a92f9b6901",
   "metadata": {},
   "outputs": [],
   "source": [
    "nbool_df = feat.loc[:, col_nbool]\n",
    "bool_df = feat.loc[:, col_bool]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "55cdf714-6bda-43f5-80d6-146028e7e0fd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# check if we still have all the columns\n",
    "len(feat.columns) == len(nbool_df.columns) + len(bool_df.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "dde6a7f7-c12a-480a-8d7b-19e9ac3a672a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Age</th>\n",
       "      <th>BMI</th>\n",
       "      <th>AlcoholConsumption</th>\n",
       "      <th>PhysicalActivity</th>\n",
       "      <th>DietQuality</th>\n",
       "      <th>SleepQuality</th>\n",
       "      <th>SystolicBP</th>\n",
       "      <th>DiastolicBP</th>\n",
       "      <th>CholesterolTotal</th>\n",
       "      <th>CholesterolLDL</th>\n",
       "      <th>CholesterolHDL</th>\n",
       "      <th>CholesterolTriglycerides</th>\n",
       "      <th>MMSE</th>\n",
       "      <th>FunctionalAssessment</th>\n",
       "      <th>ADL</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>60.000000</td>\n",
       "      <td>15.008851</td>\n",
       "      <td>0.002003</td>\n",
       "      <td>0.003616</td>\n",
       "      <td>0.009385</td>\n",
       "      <td>4.002629</td>\n",
       "      <td>90.000000</td>\n",
       "      <td>60.000000</td>\n",
       "      <td>150.093316</td>\n",
       "      <td>50.230707</td>\n",
       "      <td>20.003434</td>\n",
       "      <td>50.407194</td>\n",
       "      <td>0.005312</td>\n",
       "      <td>0.000460</td>\n",
       "      <td>0.001288</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>74.908795</td>\n",
       "      <td>27.655697</td>\n",
       "      <td>10.039442</td>\n",
       "      <td>4.920202</td>\n",
       "      <td>4.993138</td>\n",
       "      <td>7.051081</td>\n",
       "      <td>134.264774</td>\n",
       "      <td>89.847836</td>\n",
       "      <td>225.197519</td>\n",
       "      <td>124.335944</td>\n",
       "      <td>59.463533</td>\n",
       "      <td>228.281496</td>\n",
       "      <td>14.755132</td>\n",
       "      <td>5.080055</td>\n",
       "      <td>4.982958</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>90.000000</td>\n",
       "      <td>39.992767</td>\n",
       "      <td>19.989293</td>\n",
       "      <td>9.987429</td>\n",
       "      <td>9.998346</td>\n",
       "      <td>9.999840</td>\n",
       "      <td>179.000000</td>\n",
       "      <td>119.000000</td>\n",
       "      <td>299.993352</td>\n",
       "      <td>199.965665</td>\n",
       "      <td>99.980324</td>\n",
       "      <td>399.941862</td>\n",
       "      <td>29.991381</td>\n",
       "      <td>9.996467</td>\n",
       "      <td>9.999747</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>8.990221</td>\n",
       "      <td>7.217438</td>\n",
       "      <td>5.757910</td>\n",
       "      <td>2.857191</td>\n",
       "      <td>2.909055</td>\n",
       "      <td>1.763573</td>\n",
       "      <td>25.949352</td>\n",
       "      <td>17.592496</td>\n",
       "      <td>42.542233</td>\n",
       "      <td>43.366584</td>\n",
       "      <td>23.139174</td>\n",
       "      <td>101.986721</td>\n",
       "      <td>8.613151</td>\n",
       "      <td>2.892743</td>\n",
       "      <td>2.949775</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            Age        BMI  AlcoholConsumption  PhysicalActivity  DietQuality  \\\n",
       "min   60.000000  15.008851            0.002003          0.003616     0.009385   \n",
       "mean  74.908795  27.655697           10.039442          4.920202     4.993138   \n",
       "max   90.000000  39.992767           19.989293          9.987429     9.998346   \n",
       "std    8.990221   7.217438            5.757910          2.857191     2.909055   \n",
       "\n",
       "      SleepQuality  SystolicBP  DiastolicBP  CholesterolTotal  CholesterolLDL  \\\n",
       "min       4.002629   90.000000    60.000000        150.093316       50.230707   \n",
       "mean      7.051081  134.264774    89.847836        225.197519      124.335944   \n",
       "max       9.999840  179.000000   119.000000        299.993352      199.965665   \n",
       "std       1.763573   25.949352    17.592496         42.542233       43.366584   \n",
       "\n",
       "      CholesterolHDL  CholesterolTriglycerides       MMSE  \\\n",
       "min        20.003434                 50.407194   0.005312   \n",
       "mean       59.463533                228.281496  14.755132   \n",
       "max        99.980324                399.941862  29.991381   \n",
       "std        23.139174                101.986721   8.613151   \n",
       "\n",
       "      FunctionalAssessment       ADL  \n",
       "min               0.000460  0.001288  \n",
       "mean              5.080055  4.982958  \n",
       "max               9.996467  9.999747  \n",
       "std               2.892743  2.949775  "
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# stats on all columns with continuous values (non-boolean, non-categorical)\n",
    "nbool_df.drop(['Ethnicity', 'EducationLevel'], axis = 1).agg(['min', 'mean', 'max', 'std'])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "853e2c9c-a19e-437f-b8d1-625242b25a49",
   "metadata": {},
   "source": [
    "#### Scale only the non-Boolean features (Booleans already have usable values)\n",
    "(Recall, in the data pre-processing lectures, we omitted the features that already have 1/0 values.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "5e164b2c-2999-4fdd-ac85-30cf053e8972",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Feature Scaling\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "sc = StandardScaler()\n",
    "sc_nbool_df = sc.fit_transform(nbool_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "9dde0b63-eebb-4d69-adef-9b9db40ff422",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Gender</th>\n",
       "      <th>Smoking</th>\n",
       "      <th>FamilyHistoryAlzheimers</th>\n",
       "      <th>CardiovascularDisease</th>\n",
       "      <th>Diabetes</th>\n",
       "      <th>Depression</th>\n",
       "      <th>HeadInjury</th>\n",
       "      <th>Hypertension</th>\n",
       "      <th>MemoryComplaints</th>\n",
       "      <th>BehavioralProblems</th>\n",
       "      <th>Confusion</th>\n",
       "      <th>Disorientation</th>\n",
       "      <th>PersonalityChanges</th>\n",
       "      <th>DifficultyCompletingTasks</th>\n",
       "      <th>Forgetfulness</th>\n",
       "      <th>Age</th>\n",
       "      <th>Ethnicity</th>\n",
       "      <th>EducationLevel</th>\n",
       "      <th>BMI</th>\n",
       "      <th>AlcoholConsumption</th>\n",
       "      <th>PhysicalActivity</th>\n",
       "      <th>DietQuality</th>\n",
       "      <th>SleepQuality</th>\n",
       "      <th>SystolicBP</th>\n",
       "      <th>DiastolicBP</th>\n",
       "      <th>CholesterolTotal</th>\n",
       "      <th>CholesterolLDL</th>\n",
       "      <th>CholesterolHDL</th>\n",
       "      <th>CholesterolTriglycerides</th>\n",
       "      <th>MMSE</th>\n",
       "      <th>FunctionalAssessment</th>\n",
       "      <th>ADL</th>\n",
       "      <th>Diagnosis</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.212368</td>\n",
       "      <td>-0.700408</td>\n",
       "      <td>0.788833</td>\n",
       "      <td>-0.655225</td>\n",
       "      <td>0.565923</td>\n",
       "      <td>0.492525</td>\n",
       "      <td>-1.253593</td>\n",
       "      <td>1.119918</td>\n",
       "      <td>0.298159</td>\n",
       "      <td>-1.014750</td>\n",
       "      <td>0.403677</td>\n",
       "      <td>-1.572661</td>\n",
       "      <td>-1.114429</td>\n",
       "      <td>-0.648199</td>\n",
       "      <td>0.779037</td>\n",
       "      <td>0.497506</td>\n",
       "      <td>-1.104434</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1.567757</td>\n",
       "      <td>-0.700408</td>\n",
       "      <td>-1.422782</td>\n",
       "      <td>-0.114751</td>\n",
       "      <td>-0.954895</td>\n",
       "      <td>0.945093</td>\n",
       "      <td>-1.538442</td>\n",
       "      <td>0.056836</td>\n",
       "      <td>-0.742572</td>\n",
       "      <td>-1.469595</td>\n",
       "      <td>0.140248</td>\n",
       "      <td>1.593119</td>\n",
       "      <td>0.845730</td>\n",
       "      <td>0.650721</td>\n",
       "      <td>0.680297</td>\n",
       "      <td>0.704907</td>\n",
       "      <td>-0.810601</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.212368</td>\n",
       "      <td>2.311955</td>\n",
       "      <td>-0.316974</td>\n",
       "      <td>-1.366428</td>\n",
       "      <td>1.653006</td>\n",
       "      <td>1.023896</td>\n",
       "      <td>-1.088855</td>\n",
       "      <td>1.487380</td>\n",
       "      <td>-1.359301</td>\n",
       "      <td>1.486898</td>\n",
       "      <td>1.386812</td>\n",
       "      <td>0.668569</td>\n",
       "      <td>0.445615</td>\n",
       "      <td>-1.418585</td>\n",
       "      <td>-0.859222</td>\n",
       "      <td>0.281813</td>\n",
       "      <td>0.724491</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.101111</td>\n",
       "      <td>-0.700408</td>\n",
       "      <td>-0.316974</td>\n",
       "      <td>0.851625</td>\n",
       "      <td>0.376930</td>\n",
       "      <td>1.227995</td>\n",
       "      <td>0.839804</td>\n",
       "      <td>0.760833</td>\n",
       "      <td>-0.626935</td>\n",
       "      <td>1.430043</td>\n",
       "      <td>-1.542715</td>\n",
       "      <td>-1.360103</td>\n",
       "      <td>0.388780</td>\n",
       "      <td>0.483468</td>\n",
       "      <td>-0.088723</td>\n",
       "      <td>1.343346</td>\n",
       "      <td>0.508044</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1.567757</td>\n",
       "      <td>-0.700408</td>\n",
       "      <td>-1.422782</td>\n",
       "      <td>-0.961607</td>\n",
       "      <td>1.461793</td>\n",
       "      <td>0.486696</td>\n",
       "      <td>-1.443293</td>\n",
       "      <td>-0.824566</td>\n",
       "      <td>-1.552029</td>\n",
       "      <td>1.543754</td>\n",
       "      <td>0.291653</td>\n",
       "      <td>-0.725756</td>\n",
       "      <td>-0.111924</td>\n",
       "      <td>0.617060</td>\n",
       "      <td>-0.143712</td>\n",
       "      <td>0.333665</td>\n",
       "      <td>-1.684679</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Gender  Smoking  FamilyHistoryAlzheimers  CardiovascularDisease  Diabetes  \\\n",
       "0       0        0                        0                      0         1   \n",
       "1       0        0                        0                      0         0   \n",
       "2       0        0                        1                      0         0   \n",
       "3       1        1                        0                      0         0   \n",
       "4       0        0                        0                      0         0   \n",
       "\n",
       "   Depression  HeadInjury  Hypertension  MemoryComplaints  BehavioralProblems  \\\n",
       "0           1           0             0                 0                   0   \n",
       "1           0           0             0                 0                   0   \n",
       "2           0           0             0                 0                   0   \n",
       "3           0           0             0                 0                   1   \n",
       "4           0           0             0                 0                   0   \n",
       "\n",
       "   Confusion  Disorientation  PersonalityChanges  DifficultyCompletingTasks  \\\n",
       "0          0               0                   0                          1   \n",
       "1          0               0                   0                          0   \n",
       "2          0               1                   0                          1   \n",
       "3          0               0                   0                          0   \n",
       "4          0               0                   1                          1   \n",
       "\n",
       "   Forgetfulness       Age  Ethnicity  EducationLevel       BMI  \\\n",
       "0              0 -0.212368  -0.700408        0.788833 -0.655225   \n",
       "1              1  1.567757  -0.700408       -1.422782 -0.114751   \n",
       "2              0 -0.212368   2.311955       -0.316974 -1.366428   \n",
       "3              0 -0.101111  -0.700408       -0.316974  0.851625   \n",
       "4              0  1.567757  -0.700408       -1.422782 -0.961607   \n",
       "\n",
       "   AlcoholConsumption  PhysicalActivity  DietQuality  SleepQuality  \\\n",
       "0            0.565923          0.492525    -1.253593      1.119918   \n",
       "1           -0.954895          0.945093    -1.538442      0.056836   \n",
       "2            1.653006          1.023896    -1.088855      1.487380   \n",
       "3            0.376930          1.227995     0.839804      0.760833   \n",
       "4            1.461793          0.486696    -1.443293     -0.824566   \n",
       "\n",
       "   SystolicBP  DiastolicBP  CholesterolTotal  CholesterolLDL  CholesterolHDL  \\\n",
       "0    0.298159    -1.014750          0.403677       -1.572661       -1.114429   \n",
       "1   -0.742572    -1.469595          0.140248        1.593119        0.845730   \n",
       "2   -1.359301     1.486898          1.386812        0.668569        0.445615   \n",
       "3   -0.626935     1.430043         -1.542715       -1.360103        0.388780   \n",
       "4   -1.552029     1.543754          0.291653       -0.725756       -0.111924   \n",
       "\n",
       "   CholesterolTriglycerides      MMSE  FunctionalAssessment       ADL  \\\n",
       "0                 -0.648199  0.779037              0.497506 -1.104434   \n",
       "1                  0.650721  0.680297              0.704907 -0.810601   \n",
       "2                 -1.418585 -0.859222              0.281813  0.724491   \n",
       "3                  0.483468 -0.088723              1.343346  0.508044   \n",
       "4                  0.617060 -0.143712              0.333665 -1.684679   \n",
       "\n",
       "   Diagnosis  \n",
       "0          0  \n",
       "1          0  \n",
       "2          0  \n",
       "3          0  \n",
       "4          0  "
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Reconstruct dataframe\n",
    "rdf = pd.DataFrame(sc_nbool_df, columns=col_nbool)\n",
    "rdf = pd.concat([bool_df, rdf, df.iloc[:, -1]], axis=1)\n",
    "rdf.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9ef95f5e-db76-420c-aad7-5b98c6721023",
   "metadata": {},
   "source": [
    "#### construct x, y, test, train matrices"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "65742204-e02f-4fc4-aa63-8cc4338dfdd6",
   "metadata": {},
   "outputs": [],
   "source": [
    "x = rdf.iloc[:, :-1].values\n",
    "y = rdf.iloc[:, -1].values\n",
    "from sklearn.model_selection import train_test_split\n",
    "x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state = 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "2e9f7e82-e474-467c-b082-01a2e9f43ec1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1719, 430, 2149)"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# check sizes\n",
    "len(x_train), len(x_test), len(x_train) + len(x_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2aa93022-9501-4db4-97b7-afef8b03ebc2",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true
   },
   "source": [
    "## Try Various Models"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "65724933-6690-48ee-b2e1-418748193147",
   "metadata": {},
   "source": [
    "#### <b>Note:</b> Some of these have paramaters deduced from hyperparameter tuning in a later section"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "b243f900-acca-4cc7-95ec-fa7005252f5b",
   "metadata": {},
   "outputs": [],
   "source": [
    "x = rdf.iloc[:, :-1].values\n",
    "y = rdf.iloc[:, -1].values\n",
    "x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state = 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "1041214d-0c3f-4acd-868a-1d401a869089",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[246  21]\n",
      " [ 46 117]] 0.8441860465116279\n"
     ]
    }
   ],
   "source": [
    "# Build Model\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "model = LogisticRegression (random_state = 0)\n",
    "model.fit(x_train, y_train)\n",
    "\n",
    "y_pred = model.predict(x_test)\n",
    "# compared predicted vs observation (true values)\n",
    "#print (np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test), 1)), 1))\n",
    "from sklearn.metrics import confusion_matrix, accuracy_score\n",
    "cm = confusion_matrix (y_test, y_pred)\n",
    "print (cm, accuracy_score(y_test, y_pred))\n",
    "aLR = accuracy_score(y_test, y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "f17f79c8-d1c1-4696-8caa-422f91e6e901",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[245  22]\n",
      " [ 21 142]] 0.9\n"
     ]
    }
   ],
   "source": [
    "from sklearn.tree import DecisionTreeClassifier\n",
    "model = DecisionTreeClassifier (criterion = 'entropy', random_state = 0)\n",
    "model.fit(x_train, y_train)\n",
    "y_pred = model.predict(x_test)\n",
    "cm = confusion_matrix (y_test, y_pred)\n",
    "print (cm, accuracy_score(y_test, y_pred))\n",
    "aDT = accuracy_score(y_test, y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "871ec607-3d17-48c0-80d8-01619076be4b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[262   5]\n",
      " [ 19 144]] 0.9441860465116279\n"
     ]
    }
   ],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier\n",
    "model = RandomForestClassifier(random_state = 0)\n",
    "model.fit(x_train, y_train)\n",
    "\n",
    "y_pred = model.predict(x_test)\n",
    "cm = confusion_matrix (y_test, y_pred)\n",
    "print (cm, accuracy_score(y_test, y_pred))\n",
    "aRF = accuracy_score(y_test, y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "2e83d4eb-6455-4321-9304-5452a27db98f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[262   5]\n",
      " [ 18 145]]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.9465116279069767"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# tried various for max_leaf_nodes, max_depth, including max_leaf_nodes = 250, max_depth = 250.  didn't see improvement\n",
    "#model = RandomForestClassifier (n_estimators = 100, criterion = 'entropy', random_state = 0, max_leaf_nodes = 250, max_depth = 250)\n",
    "model = RandomForestClassifier (n_estimators = 100, criterion = 'entropy', random_state = 0, max_features='sqrt')\n",
    "model.fit(x_train, y_train)\n",
    "\n",
    "y_pred = model.predict(x_test)\n",
    "cm = confusion_matrix (y_test, y_pred)\n",
    "print (cm)\n",
    "accuracy_score(y_test, y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "2a8e5681-1bc0-4852-ad3b-cbfb8a94472a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[262   5]\n",
      " [  9 154]] 0.9674418604651163\n"
     ]
    }
   ],
   "source": [
    "# NOTE! Hyperparameters were determined in \"Hyperparameter Tuning\" sections later in the notebook\n",
    "model = RandomForestClassifier(criterion = 'entropy', n_estimators = 100, max_features = None,\n",
    "                               min_samples_split = 10, min_samples_leaf = 2, min_weight_fraction_leaf = 0.0)\n",
    "model.fit(x_train, y_train)\n",
    "\n",
    "y_pred = model.predict(x_test)\n",
    "cm = confusion_matrix (y_test, y_pred)\n",
    "print (cm, accuracy_score(y_test, y_pred))\n",
    "aRF_tun = accuracy_score(y_test, y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "3b7eaa7a-52e4-438e-805b-d568e9ebf2d6",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[259   8]\n",
      " [ 49 114]]\n",
      "[[259   8]\n",
      " [ 49 114]] 0.8674418604651163\n"
     ]
    }
   ],
   "source": [
    "from sklearn.ensemble import ExtraTreesClassifier\n",
    "model = ExtraTreesClassifier(random_state = 0)\n",
    "model.fit(x_train, y_train)\n",
    "\n",
    "y_pred = model.predict(x_test)\n",
    "cm = confusion_matrix (y_test, y_pred)\n",
    "print (cm)\n",
    "print (cm, accuracy_score(y_test, y_pred))\n",
    "aET = accuracy_score(y_test, y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "30d83ee7-95e8-43bc-a491-9aa239e43529",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[258   9]\n",
      " [ 43 120]] 0.8790697674418605\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.8790697674418605"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model = ExtraTreesClassifier(n_estimators=250)\n",
    "model.fit(x_train, y_train)\n",
    "\n",
    "y_pred = model.predict(x_test)\n",
    "cm = confusion_matrix (y_test, y_pred)\n",
    "print (cm, accuracy_score(y_test, y_pred))\n",
    "accuracy_score(y_test, y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "6d332518-1145-4c03-ba6e-b9b398dc8767",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[260   7]\n",
      " [  9 154]] 0.9627906976744186\n"
     ]
    }
   ],
   "source": [
    "# NOTE! Hyperparameters were determined in \"Hyperparameter Tuning\" sections later in the notebook\n",
    "model = ExtraTreesClassifier(criterion = 'log_loss', n_estimators = 100, max_features = None, max_leaf_nodes = 100, max_depth = None,\n",
    "                             min_samples_split = 10, min_samples_leaf = 2)\n",
    "model.fit(x_train, y_train)\n",
    "\n",
    "y_pred = model.predict(x_test)\n",
    "cm = confusion_matrix (y_test, y_pred)\n",
    "print (cm, accuracy_score(y_test, y_pred))\n",
    "aET_tun = accuracy_score(y_test, y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "d2408992-23cc-43ff-8382-7bb9c33cf821",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[LightGBM] [Info] Number of positive: 597, number of negative: 1122\n",
      "[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.000278 seconds.\n",
      "You can set `force_row_wise=true` to remove the overhead.\n",
      "And if memory is not enough, you can set `force_col_wise=true`.\n",
      "[LightGBM] [Info] Total Bins 3284\n",
      "[LightGBM] [Info] Number of data points in the train set: 1719, number of used features: 32\n",
      "[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.347295 -> initscore=-0.630951\n",
      "[LightGBM] [Info] Start training from score -0.630951\n",
      "[[262   5]\n",
      " [ 11 152]] 0.9627906976744186\n"
     ]
    }
   ],
   "source": [
    "import lightgbm as lgb\n",
    "model = lgb.LGBMClassifier(random_state = 0)\n",
    "model.fit(x_train, y_train)\n",
    "\n",
    "y_pred = model.predict(x_test)\n",
    "cm = confusion_matrix (y_test, y_pred)\n",
    "print (cm, accuracy_score(y_test, y_pred))\n",
    "aLGBM = accuracy_score(y_test, y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "137d8863-c1dd-49d8-b674-5a4b3a785cc1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[262   5]\n",
      " [ 12 151]] 0.9604651162790697\n"
     ]
    }
   ],
   "source": [
    "# NOTE! Hyperparameters were determined in \"Hyperparameter Tuning\" sections later in the notebook\n",
    "import lightgbm as lgb\n",
    "model = lgb.LGBMClassifier(num_leaves = 32, learning_rate = 0.09, n_estimators = 100, verbose = 0)\n",
    "model.fit(x_train, y_train)\n",
    "\n",
    "y_pred = model.predict(x_test)\n",
    "cm = confusion_matrix (y_test, y_pred)\n",
    "print (cm, accuracy_score(y_test, y_pred))\n",
    "aLGBM_tun = accuracy_score(y_test, y_pred)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e6d382af-80a3-4b52-b4eb-507a63c82f8b",
   "metadata": {},
   "source": [
    "## Plot a Pair of Features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "17920da9-a3df-4cce-a0b4-d7ee68ba4591",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Age', 'BMI', 'AlcoholConsumption', 'PhysicalActivity', 'DietQuality',\n",
       "       'SleepQuality', 'SystolicBP', 'DiastolicBP', 'CholesterolTotal',\n",
       "       'CholesterolLDL', 'CholesterolHDL', 'CholesterolTriglycerides', 'MMSE',\n",
       "       'FunctionalAssessment', 'ADL'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(nbool_df.drop(['Ethnicity', 'EducationLevel'], axis = 1)).columns"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2ac28fa2-c7b7-4e44-912b-1be9f5dca826",
   "metadata": {},
   "source": [
    "### Plot Functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "106f8d36-28a4-43d6-9ae0-654dc659bef8",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Function to create plot with two features on x,y axes and points = binary labels\n",
    "def scatter_plot(model, scaler, a, b, alabel, blabel, title, fig_name):\n",
    "    from matplotlib.colors import ListedColormap\n",
    "    from sklearn.preprocessing import StandardScaler\n",
    "    a_set, b_set = scaler.inverse_transform(a), b\n",
    "    a1, a2 = np.meshgrid(np.arange(start = a_set[:, 0].min() - .5, stop = a_set[:, 0].max() + .5, step = 0.05),\n",
    "                         np.arange(start = a_set[:, 1].min() - .5, stop = a_set[:, 1].max() + .5, step = 0.05))\n",
    "    fig_ = plt.figure()\n",
    "    plt.contourf (a1, a2, model.predict(scaler.transform(np.array([a1.ravel(), a2.ravel()]).T)).reshape(a1.shape),\n",
    "                 alpha = 0.75, cmap = ListedColormap(('lightcoral', 'deepskyblue')))\n",
    "    plt.xlim(a1.min(), a1.max())\n",
    "    plt.ylim(a2.min(), a2.max())\n",
    "    for i, j in enumerate(np.unique(b_set)):\n",
    "        plt.scatter(a_set[b_set == j, 0], a_set[b_set == j, 1], c = ListedColormap(('red', 'blue'))(i), label = j, s = 4)\n",
    "    plt.title(title)\n",
    "    plt.xlabel(alabel)\n",
    "    plt.ylabel(blabel)\n",
    "    plt.legend(loc='center left', bbox_to_anchor=(1, 0.5))\n",
    "    fig_.savefig(fig_name + '.png', bbox_inches='tight', dpi = 100)\n",
    "    plt.close()\n",
    "    return fig_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "dc58c2b4-8004-497a-a028-4caed19d0877",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Function to create plots for 4 classifiers\n",
    "def plot4models (f1, f2, dataf):\n",
    "    from matplotlib import image as mpimg\n",
    "    \n",
    "    w = dataf.iloc[:, [dataf.columns.get_loc(f1), dataf.columns.get_loc(f2)]].values\n",
    "    z = dataf.iloc[:,  -1].values\n",
    "    w_train, w_test, z_train, z_test = train_test_split(w, z, test_size = 0.2, random_state = 0)\n",
    "    sc = StandardScaler()\n",
    "    w_train = sc.fit_transform(w_train)\n",
    "    # not plotting test set \n",
    "    #w_test = sc.transform(w_test)\n",
    "\n",
    "    # visualizing Logistic Regression results\n",
    "    classifier = LogisticRegression()\n",
    "    classifier.fit(w_train, z_train)\n",
    "    fig_lr = scatter_plot (classifier, sc, w_train, z_train, f1, f2, 'Logistic Regression', 'plot1')\n",
    "    \n",
    "    # visualizing ExtraTreesClassifier results\n",
    "    classifier = ExtraTreesClassifier(criterion = 'log_loss', n_estimators = 100, max_features = None, max_leaf_nodes = 100, max_depth = None,\n",
    "                                      min_samples_split = 10, min_samples_leaf = 2)\n",
    "    classifier.fit(w_train, z_train)\n",
    "    fig_et = scatter_plot (classifier, sc, w_train, z_train, f1, f2, 'Extra Trees Classifier', 'plot2')\n",
    "    \n",
    "    # visualizing LightGBM results\n",
    "    classifier = lgb.LGBMClassifier(num_leaves = 32, learning_rate = 0.09, n_estimators = 100, verbose = 0)\n",
    "    classifier.fit(w_train, z_train)\n",
    "    fig_lgbm = scatter_plot (classifier, sc, w_train, z_train, f1, f2, 'LightGBM', 'plot3')\n",
    "    \n",
    "    # visualizing RandomForestClassifier results\n",
    "    classifier = RandomForestClassifier (criterion = 'entropy', n_estimators = 100, max_features = None,\n",
    "                                         min_samples_split = 10, min_samples_leaf = 2, min_weight_fraction_leaf = 0.0)\n",
    "    classifier.fit(w_train, z_train)\n",
    "    fig_rf = scatter_plot (classifier, sc, w_train, z_train, f1, f2, 'Random Forest', 'plot4')\n",
    "\n",
    "    img1 = mpimg.imread('plot1' + '.png')\n",
    "    img2 = mpimg.imread('plot2' + '.png')\n",
    "    img3 = mpimg.imread('plot3' + '.png')\n",
    "    img4 = mpimg.imread('plot4' + '.png')\n",
    "    fig = plt.figure()\n",
    "    fig.set_figwidth(15)\n",
    "    fig.set_figheight(11)\n",
    "    fig.tight_layout() \n",
    "    \n",
    "    plt.subplot(2, 2, 1)\n",
    "    plt.axis('off')\n",
    "    plt.imshow(img1)\n",
    "    plt.subplot(2, 2, 2)\n",
    "    plt.axis('off')\n",
    "    plt.imshow(img2)\n",
    "    plt.subplot(2, 2, 3)\n",
    "    plt.axis('off')\n",
    "    plt.imshow(img3)\n",
    "    plt.subplot(2, 2, 4)\n",
    "    plt.axis('off')\n",
    "    plt.imshow(img4)\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c2da4246-6138-4082-aaf6-5dfe8dcf1ed1",
   "metadata": {},
   "source": [
    "### Select 2 Features to Plot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "614df94a-46f6-46c4-b4b0-bf286853b887",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1500x1100 with 4 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1500x1100 with 4 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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5BFcLhd/+MMf+Pa3v82jjz7K2LFj+dGPfkRtbS2PPvoocXFxlJWVhe/5+eef54UXXuDv//7vKSgooLa2lsbGxi4u6e3HNjY28rWvfY3t27fzr//6r2RlZfH888/zr//6ryQkJHDhhRcipaSyspIPP/yQe+65h3/4h3/gj3/8Iz/5yU+YMmUK06ZNG1Hf0Wg0Go1Gc/Z57733aGpqCnusCCG49NJLiYuL46abbgovJKWlpfHMM8+wbds2HnvsMaZMmcK///u/895773Hrrbdy11134Xa7SUtLY/369bS2tvLiiy/y5S9/mbS0NCZMmMDevXu54YYbGD9+PI7jsHbtWh544AGee+45iouLh1x3KSX/+7//y4MPPsiXv/xl4uLi+N3vfsevf/1r7r77bubPn8/hw4f56U9/imVZPPTQQ7S0tPC9732PEydO8LWvfY3s7GzeeOMNvvvd7+LxeLjyyiv50Y9+xLp16/jRj35EWloalZWV+P3+Pj3k161bx/z588nKyury+UBeQNHR0dx5551kZGQQCoV45ZVX+N73vseYMWOYMmUKW7du5X//93/54he/yMKFC2lqauLIkSMIITh69Cjf//73Wbx4MQ8//DCGYXD48GGSkpK6tA/ARRddhGVZ3H777Xz7299m+fLlJCcn8+qrr4aPtW2bNWvW8B//8R9cfPHF/Mu//Av19fX87Gc/44c//CHf+c53SEpKQkrJgQMHWLJkCT/96U+JjIw8J7Y7ajQfR/Sbo9EMk5aWFp544gluueUWbr/9dkzTZNasWWzevJmnn36aT33qU7z44otERkby7//+7yQkJHRZ0OivXJfLRUREBOnp6RQUFIQn/6SkJCIjI0lNTWXSpEm43e4e57dbcLKysvj7v//7sDCYNWvWgPf0s5/9jLS0NBoaGti5cyerVq0Kb1PbsmULJ0+e5Cc/+Qlz584FIDMzk82bN7N27VpmzJjBr3/9ay644AK++MUvYpoms2fPZvPmzWFPrHaSkpL413/9VzIzM5FS8tOf/pRAIBBefAKIjIzk/vvvZ+vWrWRmZtLa2orH48Hr9YbjILSLnEAggMvlwu12k5CQ0O8e/p07d/L+++/zrW99i+uuuw4hBBMmTGDr1q386U9/4oILLgDA5XLx6U9/miuvvBLTNImIiGDdunUcOXJELzxpNBqNRvMxZMeOHdTV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UlJrF61dKC8vZ8mSJeTk5HD++eeTlpbW2kVqkyzLIjc3l6VLl3L8+HG8Xi+TJk2ia9euGs9eg2VZlJaWsmzZMvbv34/D4aBv376MGTNGc0ycJCsri1WrVnH06FFSUlI4//zzSUhIwLIs/H4/S5cuZe/evcTGxjJx4kQ6deqkc03kLKKc1zTKeadHOa9plPOaTjmvaZTzWpcqnpqovLyct99+m1deeYW+ffty6NAh3n//fR5//HESEhJau3htSmFhIf/+979JTU0lKiqK9957jwULFvDLX/5Sq540wrIsNm/ezP/93//hdDrp0aOHAkk9iouL+fnPf47f76dz584YhkFmZiZdunTRTaKGcDjMK6+8wptvvsnQoUPx+/3861//4oEHHmDy5MmtXbw2Y9euXbz77rvk5uZy5MgRBg4cWBVIXn/9dZ5//nkGDx7MwYMH+eCDD/jjH/9ITExMaxdbRFqAcl7TKeedOuW8plPOazrlvKZRzmtdqnhqoqKiIl5++WVmzpzJ9ddfT0FBAZdddhnvvfceX/3qV1u7eG1KQkIC9913H6mpqbhcLrZu3crll1/O17/+dfr169faxWvTSktL+eUvf8n06dPZsGFDaxenTXvhhRfYvXs3f/nLX0hJSSEUCuF0OhVG6hAMBnnvvfcYPXo099xzD8FgkNtvv513331XgeQkAwcO5P7772fnzp384he/qHo8GAzyxBNPcO2113L99deTm5vL3LlzmTdvHpdffnnrFVhEWoxyXtMp55065bymU85rOuW8plHOa13qe9cElmVRVFTEvn37mDBhAvHx8XTp0oXJkyezcOHC1i5em+N2u8nMzCQxMZHo6GgSExMJhUJqBWtEKBTi4YcfZsCAAcyaNUtdYxvx0ksv0blzZ+69916mT5/O73//e8rKylq7WG2SaZr06NGDnTt3UlRUxLFjx9i9ezejR49u7aK1KfHx8XTt2rVW74YDBw5w6NAhLrzwQhISEujRowdjx45lwYIFrVNQEWlRynnNo5x3apTzmkc5r+mU85pGOa916YrXRLm5uZimSWJiYtVjHTp04Pjx461XqHYgPz+fn//858yZM4eePXu2dnHarFAoxFtvvcXWrVv54Q9/iNOpzoiN2blzJx9++CFXXXUVjzzyCIsXL+aPf/wj4XC4tYvW5jidTm699VZycnKYMGECM2fO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RSAQqBq7X3mDdzgcmKaJYRiUl5dX/Qx2F+1QKFTVWuVwOKq6PAeDwap9uVwuTNMkHA4TDAYJhUIsXryYX/3qV3z7299mzpw5OBwOLMsiFAoRCoUwDAPTNAmFQng8nmq/q3wty7KqylNZNofDQSAQqCo7UG2fLpcLy7LYtGkTv/rVr/jGN77B1KlTNe5fREREzlrKecp5Imc79XgSaQcMw2h0/HvN358cQGo6eZLKSqZpVu1j6tSpJCUlkZeXh9/vJzo6umqCypNXRKn8d12/q69sNV/75O0sy2Lx4sW8/fbbJCUlMWTIEIUREREROasp54nI2U4VTyJSi9PpZNSoUa3y2qtXryYmJobrrruO1NTUVimDiIiIyNlKOU9EzjQNtRMRERERERERkYjQEgIiIiIiIiIiIhIRqngSEREREREREZGIUMWTiIiIiIiIiIhEhCqeREREREREREQkIlTxJCIiIiIiIiIiEaGKJxERERERERERiQhVPImIiIiIiIiISESo4klERERERERERCJCFU8iIiIiIiIiIhIRqngSEREREREREZGIUMWTiIiIiIiIiIhEhCqeREREREREREQkIlTxJCIiIiIiIiIiEaGKJxERERERERERiQhVPImIiIiIiIiISESo4klERERERERERCJCFU8iIiIiIiIiIhIRqngSEREREREREZGIUMWTiIiIiIiIiIhEhCqeREREREREREQkIlTxJCIiIiIiIiIiEaGKJxERERERERERiQhVPImIiIiIiIiISESo4klERERERERERCJCFU8iIiIiIiIiIhIRqngSEREREREREZGIUMWTiIiIiIiIiIhEhCqeREREREREREQkIlTxJCIiIiIiIiIiEaGKJxERERERERERiQhVPImIiIiIiIiISESo4klERERERERERCJCFU8iIiIiIiIiIhIRqngSEREREREREZGIUMWTiIiIiIiIiIhEhCqeREREREREREQkIlTxJCIiIiIiIiIiEaGKJxERERERERERiQhVPImIiIiIiIiISESo4klERERERERERCJCFU8iIiIiIiIiIhIRqngSEREREREREZGIUMWTiIiIiIiIiIhEhCqeREREREREREQkIlTxJCIiIiIiIiIiEaGKJxERERERERERiQhVPImIiIiIiIiISESo4klERERERERERCJCFU8iIiIiIiIiIhIRqngSEREREREREZGIUMWTiIiIiIiIiIhEhCqeREREREREREQkIlTxJCIiIiIiIiIiEaGKJxERERERERERiQhVPImIiIiIiIiISESo4klERERERERERCJCFU8iIiIiIiIiIhIRqngSEREREREREZGIUMWTiIiIiIiIiIhEhCqeREREREREREQkIlTxJCIiIiIiIiIiEaGKJxERERERERERiQhVPImIiIiIiIiISESo4klERERERERERCJCFU8iIiIiIiIiIhIRqngSEREREREREZGIUMWTiIiIiIiIiIhEhCqeREREREREREQkIlTxJCIiIiIiIiIiEaGKJxERERERERERiQhVPImIiIiIiIiISESo4klERERERERERCJCFU8iIiIiIiIiIhIRqngSEREREREREZGIUMWTiIiIiIiIiIhEhCqeREREREREREQkIlTxJCIiIiIiIiIiEaGKJxERERERERERiQhVPImIiIiIiIiISESo4klERERERERERCJCFU8iIiIiIiIiIhIRqngSEREREREREZGIUMWTiIiIiIiIiIhEhCqeREREREREREQkIlTxJCIiIiIiIiIiEaGKJxERERERERERiQhVPImIiIiIiIiISESo4klERERERERERCJCFU8iIiIiIiIiIhIRqngSEREREREREZGIUMWTiIiIiIiIiIhEhCqeREREREREREQkIlTxJCIiIiIiIiIiEaGKJxERERERERERiQhVPImIiIiIiIiISEQ4W7sAItK4YDDIBx98wKFDh7j22muJi4ur+p3f7+fNN9/ENE0uueQSvF5vk/b5wx/+kPPPP585c+bU+fv8/Hw2bNhAv379SEtLwzCMqt9ZlsXq1atZuHAhBw8eJBQKkZKSwsiRI5kyZQqxsbEAvPLKKyxcuJBgMIhhGERFRZGZmcmcOXPo0qULpmly9OhRXnjhBXbs2MG3v/1t+vTpU/VagUCAxx9/nH379nHRRRdxySWXnOohFBEREWkR+fn5vPLKK6xevRoAh8NBSkoKEydOZNKkSURFRUX09bOzs3nhhRcYN24cY8eOjehrncyyLNatW8eTTz5Z7XGHw8G0adO48sorz1hZThYKhVi8eDEZGRlkZma2ShlEpGHq8STSDoRCIZYvX877779PWVlZtd+Zpknnzp3JyMjA4XA0eZ//+te/WLlyZb2/379/P4888ggbN27Esqyqx4PBIH/84x+55ZZbWLlyJR07dqRnz54UFhby8MMP88ADD1Q9d8mSJXzyyScMHDiQIUOGkJKSwmuvvcbdd99NYWEhYIe3N998k6effpoXXniBcDhctf2mTZt45pln+Oc//8ny5cub/N5EREREIqWkpISPPvqII0eOMHDgQDIzM9m+fTvf+c53eOeddwiFQhF9/cLCQt5++222b98e0depy549e3jzzTdJSUlh2LBhDBs2jKFDh5KRkXHGy1KpvLychx9+mPfff7/VyiAiDVOPJ5F2zul0MmrUqKp/g90iFQwGq4KP0+nEsiwsy8Ltdldta1kWgUCg6nkulwvTNLEsi9LSUg4fPkxhYSE+nw+Hw4HL5eKNN97gscce4zvf+Q4333wzbrcbwzAIBoPk5+fz8ccfVytfhw4duPHGG4mKiiIcDtOvXz++973vsW3btmqtdBMnTuTVV1/l/vvvJyoqCsuy+PDDD+nXrx9Hjx6N6DEUERERaa6RI0dy44034vV6mTNnDt/+9rd5//33mTp1KqmpqYDde7uyUc0wDJxOZ7WGQr/fj2maVVkKqHpOZQ/wcDhMMBgkHA5jGEatiq3KjFf5HLB7ITmdzqp9lJeXVz0eDAaxLKvqOaFQqN7XrktiYiKXX345Q4cOrXrMNM1aZa183Ol0VuXLUChEKBTC4XAQCoXw+XzExcVVvf/K93bydpXv8eTfG4aBw+HA4XDg8/k4cuQIubm5lJWVYRgGHo+nwfcgImeWejyJtHOlpaXcd999/OhHP6K4uJhwOMyuXbu45557GDZsGBMnTuQXv/gFN910E3feeWe1bQ8fPsxPfvITzjvvPMaOHctjjz1GeXk5Bw8e5A9/+AObN2/m9ttvZ8CAAcyaNYt169bx7rvv0qtXL2688Ubi4uLweDy43W6io6Pp1KkTN9xwQ7XXqAxZleGhsgLL4/FUe97s2bPx+XxVrVXHjx9n6dKlXHbZZbWeKyIiItLaKjON2+0mJSWFHj16UFhYWFXJs3//fm6//XYmT57MqFGjuOiii/j3v/9NSUlJ1T7GjBnDN77xDR566CEmTpzI6NGjefjhhykuLq6qbPniiy+45pprGDRoEDNmzODZZ5/F5/MBdoVMOBxmyZIlfOUrX2H48OGMHDmSm2++me3bt1f1Wr/zzju56KKL+Otf/8r06dMZNmwYP/jBD9i1axdPPPEE06ZNY+TIkTzwwANkZ2dX6+1eU2WlT2W+q6ysCgaDrFy5kq997WsMHz6cYcOGcdNNN/HFF18QCAQA+Nvf/sbw4cN59NFHmT17NkOHDiUnJ4edO3fygx/8gPHjxzNkyBAuvvhiPv7446rtNm/ezG233ca4ceMYOnQo06ZN45lnnqG0tJSrr76arVu38thjjzFgwAAmTZpETk5ORD5zETk16vEkcpYpLS2tqjT61a9+RadOnXjllVf45JNPqs2RFA6HWbRoEbfeeitPPvkkS5cu5Re/+AXjxo1j3Lhx3HLLLWzatIl7772XyZMn4/F4KCkpYf/+/YwfP75aZVBlS1ulk1uYsrOzee2113C5XOTm5vLee+8xYcIEevXqVe156enpXHzxxfzrX//i0ksvZfXq1fj9fiZMmNCsIYQiIiIiZ0JlpU95eTl79+5lz549jB49mvj4eMDuST59+nTuuusuXC4XmzZt4te//jWGYfC1r32tah8LFy6kT58+/OUvf2H9+vU89NBDjB49mjlz5rB3715++ctfEhcXxz//+U8sy+Lpp59m3bp1VeXYt28f3/rWtxg6dCh/+9vf8Pv9/OEPf+Ab3/gGL774IhkZGViWxZYtW9i5cye//e1v2bFjB7/61a/YsWMHQ4cO5bHHHmPjxo089thjjBo1irlz59abvwoKCpg3b17VUD+n08msWbPYt28fP/3pT0lKSuJQe6f4AAEAAElEQVQvf/kLpmnyzDPP8MADD/D4448zYMAALMvi4MGDbN26lR/+8IckJCRgWRb3338/oVCIhx56iLS0NN566y2+9a1v8eyzzzJ27Fh++9vfsm/fPh5//HGSk5M5dOgQ0dHRmKbJE088wRVXXMGsWbO48847cTgcJCYmRvSzF5HmUcWTyFkmLy+PefPm8b3vfY/LL78cwzDo169frSFwhmEwaNAg7r77blwuF0OHDuUf//gH8+fPZ9KkSaSkpODxeOjcuTN9+/bFNE3Wr1+Pz+cjMTGxquuzz+fjgw8+qJqDKTY2lu9+97tVk5zn5+fz2Wef4XA4KC0tJS8vj169euH3+2u1pt14441cccUVLF++nC+++IJBgwaRnp5+Bo6aiIiISPPMmzePgoICLMti27ZteDwerrnmGmJjYzEMg5SUFLp168bnn39O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VNauXcv27dv52c9+NthFFkL0A8l5vSM5r/ck5/We5Lyek5zXM5LzBpfS0rezRxzH4cMPP+TOO+9k5cqVpKen841vfIOPfvSjMk67g927dzNlyhRM0yQ1NRXDMEhKSuK+++7jnHPOGeziDQmrV6/mrrvu4pZbbmHWrFmDXZwTUiQS4f777+cvf/kLiUSCc845h29+85ttS+6KQxzHYc2aNfz0pz9l8+bN+Hw+zjjjDG677TZyc3MHu3gnjPXr13PllVcSDodpaGggLS2NJUuW8Jvf/Iaqqipuu+023nvvPTIzM/n617/O5ZdfLtd/IU4SkvN6TnJe30nO657kvJ6TnNczkvMGl1Q89YLWGsdxcBwHpRSGYUiteyc6zpHQyjRN2V891HqsGYYhN9ej0Fq37Setddv5KPvrSK2Xedu2236W/XWkzq5dSilM0wQ44vqvlJL9J8RJRHJez0jO6zvJed2TnNdzkvN6RnLe4JKKJyGEEEIIIYQQQggxIKRZQgghhBBCCCGEEEIMCKl4EkIIIYQQQgghhBADQiqehBBCCCGEEEIIIcSAkIonIYQQQgghhBBCCDEgpOJJiJNEaWkplZWVnIjrBWzatImamhoA9uzZQ3l5OY7jDHKphBBCCCGGBsl5QoihzDPYBRBCdC+RSPDaa6+xd+9eAHw+H1lZWZSUlDB69GiUUjz22GPMnj2bxYsXd7mt7du3U1ZWxplnnonP52t7vLKykvXr11NeXo5pmhQUFDB16lRSU1P7XP5rr72Wb37zm1x77bW88sorpKSkcMkll1BTU8P777/PwoULCYVCfX4dIYQQQoihRnKeEOJkJxVPQgwBsViM3//+98RiMebOnUsikaCyspLq6mquu+46zjvvPG666SY8nu5P6bfeeosnn3ySmTNntgWSXbt2ce+991JdXU1hYSGJRIKnn36aGTNmcP3115OWltZv7+WTn/wkSilM02TLli389Kc/ZcaMGRJIhBBCCHFKkpwnhDjZScWTEENEIBBgwYIF3HDDDViWRVVVFX/84x+55557GDt2LA888ABnnnkmF198MZZl8frrr/PQQw9RU1PDzJkz+cpXvkJNTQ2PP/44y5cv5+KLL2bkyJHccccdPP7442zZsoUf/vCHTJgwgUQiwauvvsrdd9/NxIkTOe+883jkkUeoqanhq1/9KgArVqzg97//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",
      "text/plain": [
       "<Figure size 1500x1100 with 4 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Global variable for displaying figures. x-axis = feat1, y-axis= feat2\n",
    "# feat1, feat2 can be any non-identical combination of the columns in\n",
    "#   (nbool_df.drop(['Ethnicity', 'EducationLevel'], axis = 1)).columns\n",
    "#   which contains the continuous non-Boolean features\n",
    "#       'Age', 'BMI', 'AlcoholConsumption',\n",
    "#       'PhysicalActivity', 'DietQuality', 'SleepQuality', 'SystolicBP',\n",
    "#       'DiastolicBP', 'CholesterolTotal', 'CholesterolLDL', 'CholesterolHDL',y\n",
    "#       'CholesterolTriglycerides', 'MMSE', 'FunctionalAssessment', 'ADL'\n",
    "# i.e., don't plot same vs. same, like ADL vs. ADL\n",
    "# If you plot non-continuous features such as Ethnicity or Smoking, you'll get some \"interesting\" plots\n",
    "\n",
    "# Pick any two features, subject to the above\n",
    "# Some examples:\n",
    "\n",
    "plot4models ('MMSE', 'ADL', df)\n",
    "plot4models ('CholesterolHDL', 'FunctionalAssessment', df)\n",
    "plot4models ('DietQuality', 'FunctionalAssessment', df)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b7cf0dfd-efc5-44f1-860e-b60418879b21",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true
   },
   "source": [
    "## Other Classifiers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "a1c5b433-68ec-4bc6-97fa-5a8d86db1ca9",
   "metadata": {},
   "outputs": [],
   "source": [
    "x = rdf.iloc[:, :-1].values\n",
    "y = rdf.iloc[:, -1].values\n",
    "x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state = 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "c2b4ce2a-6882-4b75-91bd-2a0f7746dba9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((2149, 32), (2149,))"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x.shape, y.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "573daad1-b8a0-4f02-acd3-7060a132a97d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: black;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-1 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-1 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-1 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: block;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"▸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"▾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-1 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-1 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-1 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-1 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 1ex;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-1 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GaussianNB()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;GaussianNB<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.4/modules/generated/sklearn.naive_bayes.GaussianNB.html\">?<span>Documentation for GaussianNB</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>GaussianNB()</pre></div> </div></div></div></div>"
      ],
      "text/plain": [
       "GaussianNB()"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.naive_bayes import GaussianNB\n",
    "model = GaussianNB ()\n",
    "model.fit(x_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "faa0d4f5-f2c3-456f-9bc2-fd588727f641",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[235  32]\n",
      " [ 48 115]] 0.813953488372093\n"
     ]
    }
   ],
   "source": [
    "y_pred = model.predict(x_test)\n",
    "cm = confusion_matrix (y_test, y_pred)\n",
    "print (cm, accuracy_score(y_test, y_pred))\n",
    "aNB = accuracy_score(y_test, y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "68fe0d41-6cf9-4d4a-9f7f-be71327272c3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-2 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: black;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-2 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-2 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-2 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: block;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"▸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"▾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-2 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-2 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-2 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-2 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-2 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-2 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 1ex;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-2 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-2 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-2 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KNeighborsClassifier()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;KNeighborsClassifier<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.4/modules/generated/sklearn.neighbors.KNeighborsClassifier.html\">?<span>Documentation for KNeighborsClassifier</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>KNeighborsClassifier()</pre></div> </div></div></div></div>"
      ],
      "text/plain": [
       "KNeighborsClassifier()"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "model = KNeighborsClassifier (n_neighbors = 5, metric = 'minkowski', p = 2)\n",
    "model.fit(x_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "214eb85a-d45b-4faa-9130-7dc09b3ab8b1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[241  26]\n",
      " [ 81  82]] 0.7511627906976744\n"
     ]
    }
   ],
   "source": [
    "y_pred = model.predict(x_test)\n",
    "cm = confusion_matrix (y_test, y_pred)\n",
    "print (cm, accuracy_score(y_test, y_pred))\n",
    "aKN = accuracy_score(y_test, y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "2a61aab8-e1e9-4555-8bfc-aec5adb23c28",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-3 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: black;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-3 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-3 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-3 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-3 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-3 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: block;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"▸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-3 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"▾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-3 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-3 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-3 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-3 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-3 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-3 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 1ex;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-3 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-3 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-3 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>SVC(kernel=&#x27;linear&#x27;, random_state=0)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" checked><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;SVC<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.4/modules/generated/sklearn.svm.SVC.html\">?<span>Documentation for SVC</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>SVC(kernel=&#x27;linear&#x27;, random_state=0)</pre></div> </div></div></div></div>"
      ],
      "text/plain": [
       "SVC(kernel='linear', random_state=0)"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.svm import SVC\n",
    "model = SVC (kernel = 'linear', random_state = 0)\n",
    "model.fit(x_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "3b46eb7d-53ae-48f7-b830-e939d504e5e3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[242  25]\n",
      " [ 45 118]] 0.8372093023255814\n"
     ]
    }
   ],
   "source": [
    "y_pred = model.predict(x_test)\n",
    "cm = confusion_matrix (y_test, y_pred)\n",
    "print (cm, accuracy_score(y_test, y_pred))\n",
    "aSVC = accuracy_score(y_test, y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "f8d9d23c-72b2-4b33-958f-d66ff4110cc1",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-4 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: black;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-4 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-4 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-4 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-4 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-4 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-4 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-4 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: block;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "#sk-container-id-4 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"▸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-4 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-4 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-4 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-4 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"▾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-4 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-4 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-4 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-4 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-4 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-4 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-4 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-4 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-4 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 1ex;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-4 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-4 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-4 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-4 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-4\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>SVC(random_state=0)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" checked><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;SVC<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.4/modules/generated/sklearn.svm.SVC.html\">?<span>Documentation for SVC</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>SVC(random_state=0)</pre></div> </div></div></div></div>"
      ],
      "text/plain": [
       "SVC(random_state=0)"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.svm import SVC\n",
    "model = SVC (kernel = 'rbf', random_state = 0)\n",
    "model.fit(x_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "1d80bd8b-67d9-4c50-89e7-3b0b37489f54",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[254  13]\n",
      " [ 59 104]] 0.8325581395348837\n"
     ]
    }
   ],
   "source": [
    "y_pred = model.predict(x_test)\n",
    "cm = confusion_matrix (y_test, y_pred)\n",
    "print (cm, accuracy_score(y_test, y_pred))\n",
    "aKSVC = accuracy_score(y_test, y_pred)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "68385279-07c1-4857-9a5b-dc53f99ebf56",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true
   },
   "source": [
    "## Table Summary of Initial Accuracies for All Models (before tuning and cross-validation)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "2038e01b-1f59-40f9-b88a-80ae680b8271",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Initial Accuracy</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Log_Regress</th>\n",
       "      <td>84.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Dec_Tree</th>\n",
       "      <td>90.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>NaiveBayes</th>\n",
       "      <td>81.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>KNN</th>\n",
       "      <td>75.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SVC</th>\n",
       "      <td>83.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>KernelSVC</th>\n",
       "      <td>83.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ExtraTrees</th>\n",
       "      <td>86.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ET_tuned</th>\n",
       "      <td>96.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>LGBM</th>\n",
       "      <td>96.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>LGBM_tuned</th>\n",
       "      <td>96.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>RandForest</th>\n",
       "      <td>94.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>RF_tuned</th>\n",
       "      <td>96.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Best</th>\n",
       "      <td>96.7</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             Initial Accuracy\n",
       "Log_Regress              84.4\n",
       "Dec_Tree                 90.0\n",
       "NaiveBayes               81.4\n",
       "KNN                      75.1\n",
       "SVC                      83.7\n",
       "KernelSVC                83.3\n",
       "ExtraTrees               86.7\n",
       "ET_tuned                 96.3\n",
       "LGBM                     96.3\n",
       "LGBM_tuned               96.0\n",
       "RandForest               94.4\n",
       "RF_tuned                 96.7\n",
       "Best                     96.7"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "row_labels = ['Log_Regress', 'Dec_Tree', 'NaiveBayes', 'KNN', 'SVC', 'KernelSVC', 'ExtraTrees', 'ET_tuned',\n",
    "              'LGBM', 'LGBM_tuned', 'RandForest', 'RF_tuned', 'Best' ]\n",
    "accuracies = [aLR, aDT, aNB, aKN, aSVC, aKSVC, aET, aET_tun, aLGBM, aLGBM_tun, aRF, aRF_tun]\n",
    "accuracies.append(max(accuracies))\n",
    "accuracies = np.array(accuracies) * 100\n",
    "accuracies = pd.DataFrame(accuracies, row_labels, ['Initial Accuracy'])\n",
    "pd.options.display.float_format = \"{:,.1f}\".format\n",
    "accuracies"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4584075a-f52e-4114-bd3b-f3dd5c8582b6",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-success\">\n",
    "<b>FYI / Analysis:</b> From the accuracies obtained for nine models, ExtraTrees, LighGBM, and Random Forest show\n",
    "    the most promise.  Their hyperparameters are tuned in the sections below.\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e0af0d83-3691-4ac8-bbe5-1df13ba4392f",
   "metadata": {},
   "source": [
    "## Hyperparameter Tuning: Extra Trees"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bd824688-8092-4b90-9db7-0fbb19cd01f1",
   "metadata": {},
   "source": [
    "#### <b>Note:</b> For computational efficiency, only one hyperparameter is varied in most searches below "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "439fa219-1846-4af1-9b26-58e99bd4c512",
   "metadata": {},
   "outputs": [],
   "source": [
    "x = rdf.iloc[:, :-1].values\n",
    "y = rdf.iloc[:, -1].values\n",
    "x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state = 0)\n",
    "finalres = []     # Initialize to blank final results (later code should error if we forget to calculate them)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "84808f6f-c3a8-47aa-9384-fda956d9eb76",
   "metadata": {},
   "source": [
    "### Manual Tuning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "id": "b4cf7521-4792-4f39-912a-8d12c0a8758e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Function to invoke GridSearchCV. Performs parameter search, cross-validates.\n",
    "#   Returns best score, stdev, params\n",
    "def gs(model, x, y, params, k = 10, verbose = 2):\n",
    "    from sklearn.model_selection import GridSearchCV\n",
    "    grid_search = GridSearchCV (estimator = model,\n",
    "                            param_grid = params,\n",
    "                            scoring = 'accuracy',\n",
    "                            cv = k,\n",
    "                            verbose = verbose)\n",
    "    grid_search.fit(x, y)\n",
    "    best_score = grid_search.best_score_\n",
    "    best_stdev = float(grid_search.cv_results_['std_test_score'][0])\n",
    "    best_param = grid_search.best_params_\n",
    "    print (model)\n",
    "    print ('Best Parameters:', best_param)\n",
    "    print ('Accuracy: %.4f (%.4f)' % (best_score, best_stdev))\n",
    "    return best_score, best_stdev, best_param"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "id": "80d7c8ab-0d9e-4872-b9cc-d471fd89e2f6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[259   8]\n",
      " [ 49 114]]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.8674418604651163"
      ]
     },
     "execution_count": 119,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model = ExtraTreesClassifier(n_estimators=100, random_state = 0)\n",
    "model.fit(x_train, y_train)\n",
    "y_pred = model.predict(x_test)\n",
    "cm = confusion_matrix (y_test, y_pred)\n",
    "print (cm)\n",
    "accuracy_score(y_test, y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "id": "7ec0c2cd-3d3a-49cb-98b1-2fed23a3e9d8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[256  11]\n",
      " [ 46 117]]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.8674418604651163"
      ]
     },
     "execution_count": 120,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model = ExtraTreesClassifier(n_estimators=250, random_state = 0)\n",
    "model.fit(x_train, y_train)\n",
    "y_pred = model.predict(x_test)\n",
    "cm = confusion_matrix (y_test, y_pred)\n",
    "print (cm)\n",
    "accuracy_score(y_test, y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "id": "06e2cc28-f1c3-42cc-ab0d-1746683b88b1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[257  10]\n",
      " [ 48 115]]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.8651162790697674"
      ]
     },
     "execution_count": 121,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model = ExtraTreesClassifier(n_estimators=500, random_state = 0)\n",
    "model.fit(x_train, y_train)\n",
    "y_pred = model.predict(x_test)\n",
    "cm = confusion_matrix (y_test, y_pred)\n",
    "print (cm)\n",
    "accuracy_score(y_test, y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "id": "5157a499-a238-4c77-b1a7-22d255ed6bfa",
   "metadata": {},
   "outputs": [],
   "source": [
    "# There isn't much improvement with n_estimators > 100, so use 100"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "id": "d3a0f6ab-5780-46ad-9d04-6291969df6d1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 10 folds for each of 3 candidates, totalling 30 fits\n",
      "ExtraTreesClassifier()\n",
      "Best Parameters: {'criterion': 'entropy', 'n_estimators': 100, 'random_state': None}\n",
      "Accuracy: 0.8575 (0.0263)\n"
     ]
    }
   ],
   "source": [
    "# n_estimators selection\n",
    "model = ExtraTreesClassifier()\n",
    "parameters = [{'criterion': ['gini', 'entropy', 'log_loss'], 'n_estimators': [100], 'random_state': [None]}]\n",
    "devnull = gs(model, x_train, y_train, parameters, 10, 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "id": "e1e1e4dc-8213-4eca-ac42-91304d12a173",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 10 folds for each of 3 candidates, totalling 30 fits\n",
      "ExtraTreesClassifier()\n",
      "Best Parameters: {'criterion': 'log_loss', 'n_estimators': 100, 'random_state': None}\n",
      "Accuracy: 0.8575 (0.0215)\n"
     ]
    }
   ],
   "source": [
    "# Loss function selection\n",
    "model = ExtraTreesClassifier()\n",
    "parameters = [{'criterion': ['gini', 'entropy', 'log_loss'], 'n_estimators': [100], 'random_state': [None]}]\n",
    "devnull = gs(model, x_train, y_train, parameters, 10, 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "id": "6804fa84-006c-4ef5-8799-d873b22fc0aa",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 10 folds for each of 5 candidates, totalling 50 fits\n",
      "ExtraTreesClassifier()\n",
      "Best Parameters: {'criterion': 'log_loss', 'max_features': None, 'n_estimators': 100}\n",
      "Accuracy: 0.9424 (0.0146)\n"
     ]
    }
   ],
   "source": [
    "# Max_features selection\n",
    "model = ExtraTreesClassifier()\n",
    "parameters = [{'criterion': ['log_loss'], 'n_estimators': [100], 'max_features' : [None, 'sqrt', 'log2', 12, 16]}]\n",
    "devnull = gs(model, x_train, y_train, parameters, 10, 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "id": "40bf5a6f-048b-4701-872e-e6a6b93de432",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 10 folds for each of 4 candidates, totalling 40 fits\n",
      "ExtraTreesClassifier()\n",
      "Best Parameters: {'criterion': 'log_loss', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': None, 'n_estimators': 100}\n",
      "Accuracy: 0.9401 (0.0220)\n"
     ]
    }
   ],
   "source": [
    "# max_leaf_nodes selection\n",
    "model = ExtraTreesClassifier()\n",
    "parameters = [{'criterion': ['log_loss'], 'n_estimators': [100], 'max_features' : [None], 'max_leaf_nodes' : [2, 5, 10, None], 'max_depth' : [None]}]\n",
    "devnull = gs(model, x_train, y_train, parameters, 10, 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "id": "ac2af3ca-f16a-4f57-b70d-374bf3c5e48d",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 10 folds for each of 4 candidates, totalling 40 fits\n",
      "ExtraTreesClassifier()\n",
      "Best Parameters: {'criterion': 'log_loss', 'max_depth': 10, 'max_features': None, 'max_leaf_nodes': None, 'n_estimators': 100}\n",
      "Accuracy: 0.9407 (0.0425)\n"
     ]
    }
   ],
   "source": [
    "# max_depth selection\n",
    "model = ExtraTreesClassifier()\n",
    "parameters = [{'criterion': ['log_loss'], 'n_estimators': [100], 'max_features' : [None], 'max_leaf_nodes' : [None], 'max_depth' : [2, 5, 10, None]}]\n",
    "devnull = gs(model, x_train, y_train, parameters, 10, 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "id": "f60b061e-b1f3-4435-9f15-9430e6f7d6b0",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 10 folds for each of 4 candidates, totalling 40 fits\n",
      "ExtraTreesClassifier()\n",
      "Best Parameters: {'criterion': 'log_loss', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': 100, 'n_estimators': 100}\n",
      "Accuracy: 0.9436 (0.0175)\n"
     ]
    }
   ],
   "source": [
    "# Try more max_leaf_nodes\n",
    "model = ExtraTreesClassifier()\n",
    "parameters = [{'criterion': ['log_loss'], 'n_estimators': [100], 'max_features' : [None], 'max_leaf_nodes' : [None, 100], 'max_depth' : [None, 100]}]\n",
    "devnull = gs(model, x_train, y_train, parameters, 10, 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "id": "536ebd99-860b-42c1-83f4-99e6661041ec",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 10 folds for each of 9 candidates, totalling 90 fits\n",
      "[CV] END criterion=log_loss, max_depth=None, max_features=None, max_leaf_nodes=100, min_samples_leaf=1, min_samples_split=2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=log_loss, max_depth=None, max_features=None, max_leaf_nodes=100, min_samples_leaf=1, min_samples_split=2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=log_loss, max_depth=None, max_features=None, max_leaf_nodes=100, min_samples_leaf=1, min_samples_split=2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=log_loss, max_depth=None, max_features=None, max_leaf_nodes=100, min_samples_leaf=1, min_samples_split=2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=log_loss, max_depth=None, max_features=None, max_leaf_nodes=100, min_samples_leaf=1, min_samples_split=2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=log_loss, max_depth=None, max_features=None, max_leaf_nodes=100, min_samples_leaf=1, min_samples_split=2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=log_loss, max_depth=None, max_features=None, max_leaf_nodes=100, min_samples_leaf=1, min_samples_split=2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=log_loss, max_depth=None, max_features=None, max_leaf_nodes=100, min_samples_leaf=1, min_samples_split=2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=log_loss, max_depth=None, max_features=None, max_leaf_nodes=100, min_samples_leaf=1, min_samples_split=2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=log_loss, max_depth=None, max_features=None, max_leaf_nodes=100, min_samples_leaf=1, min_samples_split=2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=log_loss, max_depth=None, max_features=None, max_leaf_nodes=100, min_samples_leaf=1, min_samples_split=3, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=log_loss, max_depth=None, max_features=None, max_leaf_nodes=100, min_samples_leaf=1, min_samples_split=3, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=log_loss, max_depth=None, max_features=None, max_leaf_nodes=100, min_samples_leaf=1, min_samples_split=3, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=log_loss, max_depth=None, max_features=None, max_leaf_nodes=100, min_samples_leaf=1, min_samples_split=3, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=log_loss, max_depth=None, max_features=None, max_leaf_nodes=100, min_samples_leaf=1, min_samples_split=3, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=log_loss, max_depth=None, max_features=None, max_leaf_nodes=100, min_samples_leaf=1, min_samples_split=3, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=log_loss, max_depth=None, max_features=None, max_leaf_nodes=100, min_samples_leaf=1, min_samples_split=3, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=log_loss, max_depth=None, max_features=None, max_leaf_nodes=100, min_samples_leaf=1, min_samples_split=3, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=log_loss, max_depth=None, max_features=None, max_leaf_nodes=100, min_samples_leaf=1, min_samples_split=3, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=log_loss, max_depth=None, max_features=None, max_leaf_nodes=100, min_samples_leaf=1, min_samples_split=3, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=log_loss, max_depth=None, max_features=None, max_leaf_nodes=100, min_samples_leaf=1, min_samples_split=4, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=log_loss, max_depth=None, max_features=None, max_leaf_nodes=100, min_samples_leaf=1, min_samples_split=4, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=log_loss, max_depth=None, max_features=None, max_leaf_nodes=100, min_samples_leaf=1, min_samples_split=4, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=log_loss, max_depth=None, max_features=None, max_leaf_nodes=100, min_samples_leaf=1, min_samples_split=4, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=log_loss, max_depth=None, max_features=None, max_leaf_nodes=100, min_samples_leaf=1, min_samples_split=4, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=log_loss, max_depth=None, max_features=None, max_leaf_nodes=100, min_samples_leaf=1, min_samples_split=4, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=log_loss, max_depth=None, max_features=None, max_leaf_nodes=100, min_samples_leaf=1, min_samples_split=4, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=log_loss, max_depth=None, max_features=None, max_leaf_nodes=100, min_samples_leaf=1, min_samples_split=4, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=log_loss, max_depth=None, max_features=None, max_leaf_nodes=100, min_samples_leaf=1, min_samples_split=4, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=log_loss, max_depth=None, max_features=None, max_leaf_nodes=100, min_samples_leaf=1, min_samples_split=4, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=log_loss, max_depth=None, max_features=None, max_leaf_nodes=100, min_samples_leaf=2, min_samples_split=2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=log_loss, max_depth=None, max_features=None, max_leaf_nodes=100, min_samples_leaf=2, min_samples_split=2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=log_loss, max_depth=None, max_features=None, max_leaf_nodes=100, min_samples_leaf=2, min_samples_split=2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=log_loss, max_depth=None, max_features=None, max_leaf_nodes=100, min_samples_leaf=2, min_samples_split=2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=log_loss, max_depth=None, max_features=None, max_leaf_nodes=100, min_samples_leaf=2, min_samples_split=2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=log_loss, max_depth=None, max_features=None, max_leaf_nodes=100, min_samples_leaf=2, min_samples_split=2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=log_loss, max_depth=None, max_features=None, max_leaf_nodes=100, min_samples_leaf=2, min_samples_split=2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=log_loss, max_depth=None, max_features=None, max_leaf_nodes=100, min_samples_leaf=2, min_samples_split=2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=log_loss, max_depth=None, max_features=None, max_leaf_nodes=100, min_samples_leaf=2, min_samples_split=2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=log_loss, max_depth=None, max_features=None, max_leaf_nodes=100, min_samples_leaf=2, min_samples_split=2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=log_loss, max_depth=None, max_features=None, max_leaf_nodes=100, min_samples_leaf=2, min_samples_split=3, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=log_loss, max_depth=None, max_features=None, max_leaf_nodes=100, min_samples_leaf=2, min_samples_split=3, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=log_loss, max_depth=None, max_features=None, max_leaf_nodes=100, min_samples_leaf=2, min_samples_split=3, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=log_loss, max_depth=None, max_features=None, max_leaf_nodes=100, min_samples_leaf=2, min_samples_split=3, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=log_loss, max_depth=None, max_features=None, max_leaf_nodes=100, min_samples_leaf=2, min_samples_split=3, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=log_loss, max_depth=None, max_features=None, max_leaf_nodes=100, min_samples_leaf=2, min_samples_split=3, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=log_loss, max_depth=None, max_features=None, max_leaf_nodes=100, min_samples_leaf=2, min_samples_split=3, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=log_loss, max_depth=None, max_features=None, max_leaf_nodes=100, min_samples_leaf=2, min_samples_split=3, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=log_loss, max_depth=None, max_features=None, max_leaf_nodes=100, min_samples_leaf=2, min_samples_split=3, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=log_loss, max_depth=None, max_features=None, max_leaf_nodes=100, min_samples_leaf=2, min_samples_split=3, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=log_loss, max_depth=None, max_features=None, max_leaf_nodes=100, min_samples_leaf=2, min_samples_split=4, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=log_loss, max_depth=None, max_features=None, max_leaf_nodes=100, min_samples_leaf=2, min_samples_split=4, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=log_loss, max_depth=None, max_features=None, max_leaf_nodes=100, min_samples_leaf=2, min_samples_split=4, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=log_loss, max_depth=None, max_features=None, max_leaf_nodes=100, min_samples_leaf=2, min_samples_split=4, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=log_loss, max_depth=None, max_features=None, max_leaf_nodes=100, min_samples_leaf=2, min_samples_split=4, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=log_loss, max_depth=None, max_features=None, max_leaf_nodes=100, min_samples_leaf=2, min_samples_split=4, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=log_loss, max_depth=None, max_features=None, max_leaf_nodes=100, min_samples_leaf=2, min_samples_split=4, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=log_loss, max_depth=None, max_features=None, max_leaf_nodes=100, min_samples_leaf=2, min_samples_split=4, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=log_loss, max_depth=None, max_features=None, max_leaf_nodes=100, min_samples_leaf=2, min_samples_split=4, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=log_loss, max_depth=None, max_features=None, max_leaf_nodes=100, min_samples_leaf=2, min_samples_split=4, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=log_loss, max_depth=None, max_features=None, max_leaf_nodes=100, min_samples_leaf=3, min_samples_split=2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=log_loss, max_depth=None, max_features=None, max_leaf_nodes=100, min_samples_leaf=3, min_samples_split=2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=log_loss, max_depth=None, max_features=None, max_leaf_nodes=100, min_samples_leaf=3, min_samples_split=2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=log_loss, max_depth=None, max_features=None, max_leaf_nodes=100, min_samples_leaf=3, min_samples_split=2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=log_loss, max_depth=None, max_features=None, max_leaf_nodes=100, min_samples_leaf=3, min_samples_split=2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=log_loss, max_depth=None, max_features=None, max_leaf_nodes=100, min_samples_leaf=3, min_samples_split=2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=log_loss, max_depth=None, max_features=None, max_leaf_nodes=100, min_samples_leaf=3, min_samples_split=2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=log_loss, max_depth=None, max_features=None, max_leaf_nodes=100, min_samples_leaf=3, min_samples_split=2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=log_loss, max_depth=None, max_features=None, max_leaf_nodes=100, min_samples_leaf=3, min_samples_split=2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=log_loss, max_depth=None, max_features=None, max_leaf_nodes=100, min_samples_leaf=3, min_samples_split=2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=log_loss, max_depth=None, max_features=None, max_leaf_nodes=100, min_samples_leaf=3, min_samples_split=3, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=log_loss, max_depth=None, max_features=None, max_leaf_nodes=100, min_samples_leaf=3, min_samples_split=3, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=log_loss, max_depth=None, max_features=None, max_leaf_nodes=100, min_samples_leaf=3, min_samples_split=3, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=log_loss, max_depth=None, max_features=None, max_leaf_nodes=100, min_samples_leaf=3, min_samples_split=3, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=log_loss, max_depth=None, max_features=None, max_leaf_nodes=100, min_samples_leaf=3, min_samples_split=3, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=log_loss, max_depth=None, max_features=None, max_leaf_nodes=100, min_samples_leaf=3, min_samples_split=3, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=log_loss, max_depth=None, max_features=None, max_leaf_nodes=100, min_samples_leaf=3, min_samples_split=3, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=log_loss, max_depth=None, max_features=None, max_leaf_nodes=100, min_samples_leaf=3, min_samples_split=3, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=log_loss, max_depth=None, max_features=None, max_leaf_nodes=100, min_samples_leaf=3, min_samples_split=3, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=log_loss, max_depth=None, max_features=None, max_leaf_nodes=100, min_samples_leaf=3, min_samples_split=3, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=log_loss, max_depth=None, max_features=None, max_leaf_nodes=100, min_samples_leaf=3, min_samples_split=4, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=log_loss, max_depth=None, max_features=None, max_leaf_nodes=100, min_samples_leaf=3, min_samples_split=4, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=log_loss, max_depth=None, max_features=None, max_leaf_nodes=100, min_samples_leaf=3, min_samples_split=4, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=log_loss, max_depth=None, max_features=None, max_leaf_nodes=100, min_samples_leaf=3, min_samples_split=4, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=log_loss, max_depth=None, max_features=None, max_leaf_nodes=100, min_samples_leaf=3, min_samples_split=4, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=log_loss, max_depth=None, max_features=None, max_leaf_nodes=100, min_samples_leaf=3, min_samples_split=4, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=log_loss, max_depth=None, max_features=None, max_leaf_nodes=100, min_samples_leaf=3, min_samples_split=4, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=log_loss, max_depth=None, max_features=None, max_leaf_nodes=100, min_samples_leaf=3, min_samples_split=4, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=log_loss, max_depth=None, max_features=None, max_leaf_nodes=100, min_samples_leaf=3, min_samples_split=4, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=log_loss, max_depth=None, max_features=None, max_leaf_nodes=100, min_samples_leaf=3, min_samples_split=4, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "ExtraTreesClassifier()\n",
      "Best Parameters: {'criterion': 'log_loss', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': 100, 'min_samples_leaf': 2, 'min_samples_split': 3, 'n_estimators': 100, 'n_jobs': 8, 'verbose': 0}\n",
      "Accuracy: 0.9441 (0.0173)\n"
     ]
    }
   ],
   "source": [
    "# Grid Search of min_samples_split and min_samples_leaf (3 x 3 combos)\n",
    "model = ExtraTreesClassifier()\n",
    "parameters = [{'criterion': ['log_loss'], 'n_estimators': [100], 'max_features' : [None], 'max_leaf_nodes' : [100], 'max_depth' : [None],\n",
    "               'min_samples_split' : [2, 3 ,4], 'min_samples_leaf' : [1, 2, 3], 'verbose' : [0], 'n_jobs' : [8]}]\n",
    "devnull = gs(model, x_train, y_train, parameters, 10, 2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "id": "4dd80908-adf4-4272-8a18-3a8f4cdd26f6",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 10 folds for each of 4 candidates, totalling 40 fits\n",
      "ExtraTreesClassifier()\n",
      "Best Parameters: {'criterion': 'log_loss', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': 100, 'min_samples_leaf': 2, 'min_samples_split': 2, 'n_estimators': 100, 'n_jobs': 8, 'verbose': 0}\n",
      "Accuracy: 0.9436 (0.0177)\n"
     ]
    }
   ],
   "source": [
    "# Try higher values for min_samples_leaf \n",
    "model = ExtraTreesClassifier()\n",
    "parameters = [{'criterion': ['log_loss'], 'n_estimators': [100], 'max_features' : [None], 'max_leaf_nodes' : [100], 'max_depth' : [None],\n",
    "               'min_samples_split' : [2], 'min_samples_leaf' : [2, 10, 20, 50], 'verbose' : [0], 'n_jobs' : [8]}]\n",
    "devnull = gs(model, x_train, y_train, parameters, 10, 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "id": "1da71526-e521-490b-b004-c510180ceabe",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 10 folds for each of 4 candidates, totalling 40 fits\n",
      "ExtraTreesClassifier()\n",
      "Best Parameters: {'criterion': 'log_loss', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': 100, 'min_samples_leaf': 2, 'min_samples_split': 10, 'n_estimators': 100, 'n_jobs': 8, 'verbose': 0}\n",
      "Accuracy: 0.9430 (0.0192)\n"
     ]
    }
   ],
   "source": [
    "# Try higher values for min_samples_split\n",
    "model = ExtraTreesClassifier()\n",
    "parameters = [{'criterion': ['log_loss'], 'n_estimators': [100], 'max_features' : [None], 'max_leaf_nodes' : [100], 'max_depth' : [None],\n",
    "               'min_samples_split' : [2, 10, 20, 50], 'min_samples_leaf' : [2], 'verbose' : [0], 'n_jobs' : [8]}]\n",
    "finalres = gs(model, x_train, y_train, parameters, 10, 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "id": "fdd3fe18-b04d-4d1d-8c74-83c9f63101f9",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'criterion': 'log_loss',\n",
       " 'max_depth': None,\n",
       " 'max_features': None,\n",
       " 'max_leaf_nodes': 100,\n",
       " 'min_samples_leaf': 2,\n",
       " 'min_samples_split': 10,\n",
       " 'n_estimators': 100,\n",
       " 'n_jobs': 8,\n",
       " 'verbose': 0}"
      ]
     },
     "execution_count": 132,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "acc_et = finalres[0]\n",
    "std_et = finalres[1]\n",
    "et_opt_param = finalres[2]\n",
    "et_opt_param"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5bcb37e2-987d-49de-9aca-ed48f59c12a1",
   "metadata": {},
   "source": [
    "### Try Randomized Grid Search"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 625,
   "id": "979c5f8b-afeb-4028-81ed-ec3ded7a8e60",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Model is superior if best_score better than acc_et after fitting\n",
    "best_score = acc_et"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 626,
   "id": "3d3446e2-976e-4dc8-9882-425d6ae107ef",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "14:40:52.591078\n"
     ]
    }
   ],
   "source": [
    "import datetime\n",
    "st = datetime.datetime.now()\n",
    "print(st.time())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 627,
   "id": "5980effd-668f-4855-948c-62a8ec8a5775",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 3 folds for each of 4000 candidates, totalling 12000 fits\n",
      "ExtraTreesClassifier()\n",
      "Best Parameters: {'n_estimators': 100, 'min_weight_fraction_leaf': 0.0, 'min_samples_split': 20, 'min_samples_leaf': 2, 'max_features': None, 'max_depth': 110, 'criterion': 'log_loss', 'bootstrap': False}\n",
      "Accuracy: 0.9418 (0.0000)\n"
     ]
    }
   ],
   "source": [
    "# NOTE:\n",
    "# On CPU = Intel Core i5-1035G1\n",
    "# Cell takes > 30 minutes to evaluate at n_iter = 8000; fit code is commented out\n",
    "#   To run cell, uncomment code starting with line fit_random.fit(.....\n",
    "#   For faster run, change n_iter < 8000\n",
    "\n",
    "from sklearn.model_selection import RandomizedSearchCV\n",
    "random_grid = {'criterion': ['gini', 'entropy', 'log_loss'],\n",
    "               'bootstrap': [True, False],\n",
    "               'max_depth': [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, None],\n",
    "               'max_features': [None, 'sqrt', 'log2', 12, 16],\n",
    "               'min_samples_leaf': [2, 10, 20, 50],\n",
    "               'min_samples_split': [2, 10, 20, 50],\n",
    "               'min_weight_fraction_leaf' : [0.0, 0.1, 0.2, 0.5],\n",
    "               'n_estimators': [25, 100, 150, 250]}\n",
    "# Use random grid to search for hyperparameters\n",
    "model = ExtraTreesClassifier()\n",
    "# Random search of parameters, using 3 fold cross validation, \n",
    "# search across n_iter different combinations, and n_jobs cores (all = -1)\n",
    "fit_random = RandomizedSearchCV(estimator = model, param_distributions = random_grid, n_iter = 4000, cv = 3, verbose = 1, n_jobs = 8)\n",
    "#fit_random.fit(x_train, y_train)\n",
    "#\n",
    "#best_score = fit_random.best_score_\n",
    "#best_stdev = float(fit_random.cv_results_['std_test_score'][0])\n",
    "#best_param = fit_random.best_params_\n",
    "#print (model)\n",
    "#print ('Best Parameters:', best_param)\n",
    "#print ('Accuracy: %.4f (%.4f)' % (best_score, best_stdev))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 628,
   "id": "940930be-5210-4490-a6c1-101a8a9c20c9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "datetime.timedelta(seconds=858, microseconds=460759)"
      ]
     },
     "execution_count": 628,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "datetime.datetime.now() - st"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 629,
   "id": "865d0f30-1b63-427c-b30a-b60fa3824faa",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-0.002315203467900928\n",
      "No improvement after randomized grid search.\n",
      "  Optimal parameters list NOT updated.\n"
     ]
    }
   ],
   "source": [
    "# Update Extra Trees optimal parameters if score difference >= 0.005\n",
    "print (best_score - acc_et)\n",
    "if best_score - acc_et >= 0.005:\n",
    "    print ('Model mproved.')\n",
    "    print ('  Updating optimal parameters list.')\n",
    "    acc_et = best_score\n",
    "    std_et = best_stdev\n",
    "    et_opt_param = best_param\n",
    "else:\n",
    "    print ('No improvement after randomized grid search.')\n",
    "    print ('  Optimal parameters list NOT updated.')\n",
    "\n",
    "# Keep n_estimators = 100 because difference at n >= 150 is insignificant\n",
    "et_opt_param |= {'n_estimators' : 100}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "id": "3c522878-c8ed-402b-9db2-fa9651a72c36",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Extra Trees final results:\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(0.9429790561675506,\n",
       " 0.019227979776696203,\n",
       " {'criterion': 'log_loss',\n",
       "  'max_depth': None,\n",
       "  'max_features': None,\n",
       "  'max_leaf_nodes': 100,\n",
       "  'min_samples_leaf': 2,\n",
       "  'min_samples_split': 10,\n",
       "  'n_estimators': 100,\n",
       "  'n_jobs': 8,\n",
       "  'verbose': 0})"
      ]
     },
     "execution_count": 141,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print ('Extra Trees final results:')\n",
    "acc_et, std_et, et_opt_param"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8f5dcbd8-6bfd-424a-97f3-76e30b0e1a54",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true
   },
   "source": [
    "## Hyperparameter Tuning: LightGBM"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "id": "ba12831c-eb9b-4811-9392-9de53469f932",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: lightgbm in c:\\programdata\\anaconda3\\lib\\site-packages (4.5.0)\n",
      "Requirement already satisfied: numpy>=1.17.0 in c:\\programdata\\anaconda3\\lib\\site-packages (from lightgbm) (1.26.4)\n",
      "Requirement already satisfied: scipy in c:\\programdata\\anaconda3\\lib\\site-packages (from lightgbm) (1.13.1)\n"
     ]
    }
   ],
   "source": [
    "!pip install lightgbm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "id": "353daa0d-199a-436e-af9d-d74aaae176f0",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Include all features\n",
    "x = rdf.iloc[:, :-1].values\n",
    "y = rdf.iloc[:, -1].values\n",
    "x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state = 0)\n",
    "finalres = []     # Initialize to blank final results (later code should error if we forget to calculate them)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "39b5f9a5-9ad5-449a-8f1f-3a951bbf5426",
   "metadata": {},
   "source": [
    "### Manual Tuning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "id": "9463e3fc-a35c-4428-a389-8ced6cb0c416",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 10 folds for each of 25 candidates, totalling 250 fits\n",
      "[CV] END learning_rate=0.08, n_estimators=100, num_leaves=29, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.08, n_estimators=100, num_leaves=29, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.08, n_estimators=100, num_leaves=29, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.08, n_estimators=100, num_leaves=29, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.08, n_estimators=100, num_leaves=29, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.08, n_estimators=100, num_leaves=29, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.08, n_estimators=100, num_leaves=29, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.08, n_estimators=100, num_leaves=29, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.08, n_estimators=100, num_leaves=29, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.08, n_estimators=100, num_leaves=29, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.08, n_estimators=100, num_leaves=30, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.08, n_estimators=100, num_leaves=30, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.08, n_estimators=100, num_leaves=30, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.08, n_estimators=100, num_leaves=30, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.08, n_estimators=100, num_leaves=30, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.08, n_estimators=100, num_leaves=30, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.08, n_estimators=100, num_leaves=30, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.08, n_estimators=100, num_leaves=30, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.08, n_estimators=100, num_leaves=30, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.08, n_estimators=100, num_leaves=30, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.08, n_estimators=100, num_leaves=31, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.08, n_estimators=100, num_leaves=31, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.08, n_estimators=100, num_leaves=31, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.08, n_estimators=100, num_leaves=31, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.08, n_estimators=100, num_leaves=31, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.08, n_estimators=100, num_leaves=31, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.08, n_estimators=100, num_leaves=31, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.08, n_estimators=100, num_leaves=31, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.08, n_estimators=100, num_leaves=31, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.08, n_estimators=100, num_leaves=31, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.08, n_estimators=100, num_leaves=32, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.08, n_estimators=100, num_leaves=32, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.08, n_estimators=100, num_leaves=32, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.08, n_estimators=100, num_leaves=32, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.08, n_estimators=100, num_leaves=32, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.08, n_estimators=100, num_leaves=32, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.08, n_estimators=100, num_leaves=32, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.08, n_estimators=100, num_leaves=32, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.08, n_estimators=100, num_leaves=32, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.08, n_estimators=100, num_leaves=32, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.08, n_estimators=100, num_leaves=33, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.08, n_estimators=100, num_leaves=33, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.08, n_estimators=100, num_leaves=33, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.08, n_estimators=100, num_leaves=33, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.08, n_estimators=100, num_leaves=33, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.08, n_estimators=100, num_leaves=33, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.08, n_estimators=100, num_leaves=33, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.08, n_estimators=100, num_leaves=33, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.08, n_estimators=100, num_leaves=33, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.08, n_estimators=100, num_leaves=33, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, n_estimators=100, num_leaves=29, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, n_estimators=100, num_leaves=29, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, n_estimators=100, num_leaves=29, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, n_estimators=100, num_leaves=29, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.09, n_estimators=100, num_leaves=29, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.09, n_estimators=100, num_leaves=29, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.09, n_estimators=100, num_leaves=29, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, n_estimators=100, num_leaves=29, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.09, n_estimators=100, num_leaves=29, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, n_estimators=100, num_leaves=29, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, n_estimators=100, num_leaves=30, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, n_estimators=100, num_leaves=30, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, n_estimators=100, num_leaves=30, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.09, n_estimators=100, num_leaves=30, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.09, n_estimators=100, num_leaves=30, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.09, n_estimators=100, num_leaves=30, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, n_estimators=100, num_leaves=30, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, n_estimators=100, num_leaves=30, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.09, n_estimators=100, num_leaves=30, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, n_estimators=100, num_leaves=30, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.09, n_estimators=100, num_leaves=31, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.09, n_estimators=100, num_leaves=31, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, n_estimators=100, num_leaves=31, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.09, n_estimators=100, num_leaves=31, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.09, n_estimators=100, num_leaves=31, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, n_estimators=100, num_leaves=31, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, n_estimators=100, num_leaves=31, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.09, n_estimators=100, num_leaves=31, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, n_estimators=100, num_leaves=31, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, n_estimators=100, num_leaves=31, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, n_estimators=100, num_leaves=32, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, n_estimators=100, num_leaves=32, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, n_estimators=100, num_leaves=32, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.09, n_estimators=100, num_leaves=32, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, n_estimators=100, num_leaves=32, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, n_estimators=100, num_leaves=32, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.09, n_estimators=100, num_leaves=32, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, n_estimators=100, num_leaves=32, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, n_estimators=100, num_leaves=32, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, n_estimators=100, num_leaves=32, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.09, n_estimators=100, num_leaves=33, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, n_estimators=100, num_leaves=33, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.09, n_estimators=100, num_leaves=33, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.09, n_estimators=100, num_leaves=33, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, n_estimators=100, num_leaves=33, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, n_estimators=100, num_leaves=33, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, n_estimators=100, num_leaves=33, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.09, n_estimators=100, num_leaves=33, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, n_estimators=100, num_leaves=33, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, n_estimators=100, num_leaves=33, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.1, n_estimators=100, num_leaves=29, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.1, n_estimators=100, num_leaves=29, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.1, n_estimators=100, num_leaves=29, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.1, n_estimators=100, num_leaves=29, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.1, n_estimators=100, num_leaves=29, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.1, n_estimators=100, num_leaves=29, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.1, n_estimators=100, num_leaves=29, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.1, n_estimators=100, num_leaves=29, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.1, n_estimators=100, num_leaves=29, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.1, n_estimators=100, num_leaves=29, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.1, n_estimators=100, num_leaves=30, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.1, n_estimators=100, num_leaves=30, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.1, n_estimators=100, num_leaves=30, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.1, n_estimators=100, num_leaves=30, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.1, n_estimators=100, num_leaves=30, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.1, n_estimators=100, num_leaves=30, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.1, n_estimators=100, num_leaves=30, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.1, n_estimators=100, num_leaves=30, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.1, n_estimators=100, num_leaves=30, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.1, n_estimators=100, num_leaves=30, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.1, n_estimators=100, num_leaves=31, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.1, n_estimators=100, num_leaves=31, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.1, n_estimators=100, num_leaves=31, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.1, n_estimators=100, num_leaves=31, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.1, n_estimators=100, num_leaves=31, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.1, n_estimators=100, num_leaves=31, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.1, n_estimators=100, num_leaves=31, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.1, n_estimators=100, num_leaves=31, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.1, n_estimators=100, num_leaves=31, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.1, n_estimators=100, num_leaves=31, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.1, n_estimators=100, num_leaves=32, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.1, n_estimators=100, num_leaves=32, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.1, n_estimators=100, num_leaves=32, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.1, n_estimators=100, num_leaves=32, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.1, n_estimators=100, num_leaves=32, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.1, n_estimators=100, num_leaves=32, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.1, n_estimators=100, num_leaves=32, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.1, n_estimators=100, num_leaves=32, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.1, n_estimators=100, num_leaves=32, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.1, n_estimators=100, num_leaves=32, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.1, n_estimators=100, num_leaves=33, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.1, n_estimators=100, num_leaves=33, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.1, n_estimators=100, num_leaves=33, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.1, n_estimators=100, num_leaves=33, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.1, n_estimators=100, num_leaves=33, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.1, n_estimators=100, num_leaves=33, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.1, n_estimators=100, num_leaves=33, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.1, n_estimators=100, num_leaves=33, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.1, n_estimators=100, num_leaves=33, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.1, n_estimators=100, num_leaves=33, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.11, n_estimators=100, num_leaves=29, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.11, n_estimators=100, num_leaves=29, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.11, n_estimators=100, num_leaves=29, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.11, n_estimators=100, num_leaves=29, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.11, n_estimators=100, num_leaves=29, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.11, n_estimators=100, num_leaves=29, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.11, n_estimators=100, num_leaves=29, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.11, n_estimators=100, num_leaves=29, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.11, n_estimators=100, num_leaves=29, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.11, n_estimators=100, num_leaves=29, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.11, n_estimators=100, num_leaves=30, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.11, n_estimators=100, num_leaves=30, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.11, n_estimators=100, num_leaves=30, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.11, n_estimators=100, num_leaves=30, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.11, n_estimators=100, num_leaves=30, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.11, n_estimators=100, num_leaves=30, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.11, n_estimators=100, num_leaves=30, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.11, n_estimators=100, num_leaves=30, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.11, n_estimators=100, num_leaves=30, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.11, n_estimators=100, num_leaves=30, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.11, n_estimators=100, num_leaves=31, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.11, n_estimators=100, num_leaves=31, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.11, n_estimators=100, num_leaves=31, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.11, n_estimators=100, num_leaves=31, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.11, n_estimators=100, num_leaves=31, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.11, n_estimators=100, num_leaves=31, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.11, n_estimators=100, num_leaves=31, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.11, n_estimators=100, num_leaves=31, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.11, n_estimators=100, num_leaves=31, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.11, n_estimators=100, num_leaves=31, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.11, n_estimators=100, num_leaves=32, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.11, n_estimators=100, num_leaves=32, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.11, n_estimators=100, num_leaves=32, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.11, n_estimators=100, num_leaves=32, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.11, n_estimators=100, num_leaves=32, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.11, n_estimators=100, num_leaves=32, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.11, n_estimators=100, num_leaves=32, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.11, n_estimators=100, num_leaves=32, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.11, n_estimators=100, num_leaves=32, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.11, n_estimators=100, num_leaves=32, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.11, n_estimators=100, num_leaves=33, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.11, n_estimators=100, num_leaves=33, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.11, n_estimators=100, num_leaves=33, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.11, n_estimators=100, num_leaves=33, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.11, n_estimators=100, num_leaves=33, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.11, n_estimators=100, num_leaves=33, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.11, n_estimators=100, num_leaves=33, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.11, n_estimators=100, num_leaves=33, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.11, n_estimators=100, num_leaves=33, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.11, n_estimators=100, num_leaves=33, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.12, n_estimators=100, num_leaves=29, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.12, n_estimators=100, num_leaves=29, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.12, n_estimators=100, num_leaves=29, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.12, n_estimators=100, num_leaves=29, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.12, n_estimators=100, num_leaves=29, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.12, n_estimators=100, num_leaves=29, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.12, n_estimators=100, num_leaves=29, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.12, n_estimators=100, num_leaves=29, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.12, n_estimators=100, num_leaves=29, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.12, n_estimators=100, num_leaves=29, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.12, n_estimators=100, num_leaves=30, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.12, n_estimators=100, num_leaves=30, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.12, n_estimators=100, num_leaves=30, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.12, n_estimators=100, num_leaves=30, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.12, n_estimators=100, num_leaves=30, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.12, n_estimators=100, num_leaves=30, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.12, n_estimators=100, num_leaves=30, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.12, n_estimators=100, num_leaves=30, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.12, n_estimators=100, num_leaves=30, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.12, n_estimators=100, num_leaves=30, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.12, n_estimators=100, num_leaves=31, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.12, n_estimators=100, num_leaves=31, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.12, n_estimators=100, num_leaves=31, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.12, n_estimators=100, num_leaves=31, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.12, n_estimators=100, num_leaves=31, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.12, n_estimators=100, num_leaves=31, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.12, n_estimators=100, num_leaves=31, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.12, n_estimators=100, num_leaves=31, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.12, n_estimators=100, num_leaves=31, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.12, n_estimators=100, num_leaves=31, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.12, n_estimators=100, num_leaves=32, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.12, n_estimators=100, num_leaves=32, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.12, n_estimators=100, num_leaves=32, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.12, n_estimators=100, num_leaves=32, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.12, n_estimators=100, num_leaves=32, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.12, n_estimators=100, num_leaves=32, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.12, n_estimators=100, num_leaves=32, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.12, n_estimators=100, num_leaves=32, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.12, n_estimators=100, num_leaves=32, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.12, n_estimators=100, num_leaves=32, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.12, n_estimators=100, num_leaves=33, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.12, n_estimators=100, num_leaves=33, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.12, n_estimators=100, num_leaves=33, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.12, n_estimators=100, num_leaves=33, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.12, n_estimators=100, num_leaves=33, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.12, n_estimators=100, num_leaves=33, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.12, n_estimators=100, num_leaves=33, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.12, n_estimators=100, num_leaves=33, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.12, n_estimators=100, num_leaves=33, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.12, n_estimators=100, num_leaves=33, verbose=-1; total time=   0.1s\n",
      "LGBMClassifier()\n",
      "Best Parameters: {'learning_rate': 0.09, 'n_estimators': 100, 'num_leaves': 32, 'verbose': -1}\n",
      "Accuracy: 0.9488 (0.0159)\n"
     ]
    }
   ],
   "source": [
    "# Hyperparameter Grid Search and display optimal values\n",
    "import lightgbm as lgb\n",
    "model= lgb.LGBMClassifier()\n",
    "parameters = ({'num_leaves' : [29,30,31,32,33], 'learning_rate' : [0.08,0.09,0.10,0.11,0.12], 'n_estimators' : [100], 'verbose' : [-1]})\n",
    "devnull = gs(model, x_train, y_train, parameters, 10, 2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "id": "05608916-5523-4d9c-bb84-203e0f72ba13",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 10 folds for each of 16 candidates, totalling 160 fits\n",
      "[CV] END learning_rate=0.09, max_depth=10, n_estimators=100, n_jobs=8, num_leaves=32, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, max_depth=10, n_estimators=100, n_jobs=8, num_leaves=32, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.09, max_depth=10, n_estimators=100, n_jobs=8, num_leaves=32, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.09, max_depth=10, n_estimators=100, n_jobs=8, num_leaves=32, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.09, max_depth=10, n_estimators=100, n_jobs=8, num_leaves=32, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.09, max_depth=10, n_estimators=100, n_jobs=8, num_leaves=32, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.09, max_depth=10, n_estimators=100, n_jobs=8, num_leaves=32, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, max_depth=10, n_estimators=100, n_jobs=8, num_leaves=32, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.09, max_depth=10, n_estimators=100, n_jobs=8, num_leaves=32, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.09, max_depth=10, n_estimators=100, n_jobs=8, num_leaves=32, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, max_depth=10, n_estimators=100, n_jobs=8, num_leaves=64, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, max_depth=10, n_estimators=100, n_jobs=8, num_leaves=64, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, max_depth=10, n_estimators=100, n_jobs=8, num_leaves=64, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, max_depth=10, n_estimators=100, n_jobs=8, num_leaves=64, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, max_depth=10, n_estimators=100, n_jobs=8, num_leaves=64, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, max_depth=10, n_estimators=100, n_jobs=8, num_leaves=64, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, max_depth=10, n_estimators=100, n_jobs=8, num_leaves=64, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, max_depth=10, n_estimators=100, n_jobs=8, num_leaves=64, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, max_depth=10, n_estimators=100, n_jobs=8, num_leaves=64, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, max_depth=10, n_estimators=100, n_jobs=8, num_leaves=64, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, max_depth=10, n_estimators=100, n_jobs=8, num_leaves=128, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, max_depth=10, n_estimators=100, n_jobs=8, num_leaves=128, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, max_depth=10, n_estimators=100, n_jobs=8, num_leaves=128, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, max_depth=10, n_estimators=100, n_jobs=8, num_leaves=128, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, max_depth=10, n_estimators=100, n_jobs=8, num_leaves=128, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, max_depth=10, n_estimators=100, n_jobs=8, num_leaves=128, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, max_depth=10, n_estimators=100, n_jobs=8, num_leaves=128, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, max_depth=10, n_estimators=100, n_jobs=8, num_leaves=128, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, max_depth=10, n_estimators=100, n_jobs=8, num_leaves=128, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, max_depth=10, n_estimators=100, n_jobs=8, num_leaves=128, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, max_depth=10, n_estimators=100, n_jobs=8, num_leaves=512, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, max_depth=10, n_estimators=100, n_jobs=8, num_leaves=512, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, max_depth=10, n_estimators=100, n_jobs=8, num_leaves=512, verbose=-1; total time=   0.2s\n",
      "[CV] END learning_rate=0.09, max_depth=10, n_estimators=100, n_jobs=8, num_leaves=512, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, max_depth=10, n_estimators=100, n_jobs=8, num_leaves=512, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, max_depth=10, n_estimators=100, n_jobs=8, num_leaves=512, verbose=-1; total time=   0.2s\n",
      "[CV] END learning_rate=0.09, max_depth=10, n_estimators=100, n_jobs=8, num_leaves=512, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, max_depth=10, n_estimators=100, n_jobs=8, num_leaves=512, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, max_depth=10, n_estimators=100, n_jobs=8, num_leaves=512, verbose=-1; total time=   0.3s\n",
      "[CV] END learning_rate=0.09, max_depth=10, n_estimators=100, n_jobs=8, num_leaves=512, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, max_depth=20, n_estimators=100, n_jobs=8, num_leaves=32, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.09, max_depth=20, n_estimators=100, n_jobs=8, num_leaves=32, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.09, max_depth=20, n_estimators=100, n_jobs=8, num_leaves=32, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, max_depth=20, n_estimators=100, n_jobs=8, num_leaves=32, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, max_depth=20, n_estimators=100, n_jobs=8, num_leaves=32, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.09, max_depth=20, n_estimators=100, n_jobs=8, num_leaves=32, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, max_depth=20, n_estimators=100, n_jobs=8, num_leaves=32, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.09, max_depth=20, n_estimators=100, n_jobs=8, num_leaves=32, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, max_depth=20, n_estimators=100, n_jobs=8, num_leaves=32, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.09, max_depth=20, n_estimators=100, n_jobs=8, num_leaves=32, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.09, max_depth=20, n_estimators=100, n_jobs=8, num_leaves=64, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, max_depth=20, n_estimators=100, n_jobs=8, num_leaves=64, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, max_depth=20, n_estimators=100, n_jobs=8, num_leaves=64, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, max_depth=20, n_estimators=100, n_jobs=8, num_leaves=64, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, max_depth=20, n_estimators=100, n_jobs=8, num_leaves=64, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, max_depth=20, n_estimators=100, n_jobs=8, num_leaves=64, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, max_depth=20, n_estimators=100, n_jobs=8, num_leaves=64, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, max_depth=20, n_estimators=100, n_jobs=8, num_leaves=64, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, max_depth=20, n_estimators=100, n_jobs=8, num_leaves=64, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, max_depth=20, n_estimators=100, n_jobs=8, num_leaves=64, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, max_depth=20, n_estimators=100, n_jobs=8, num_leaves=128, verbose=-1; total time=   0.2s\n",
      "[CV] END learning_rate=0.09, max_depth=20, n_estimators=100, n_jobs=8, num_leaves=128, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, max_depth=20, n_estimators=100, n_jobs=8, num_leaves=128, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, max_depth=20, n_estimators=100, n_jobs=8, num_leaves=128, verbose=-1; total time=   0.2s\n",
      "[CV] END learning_rate=0.09, max_depth=20, n_estimators=100, n_jobs=8, num_leaves=128, verbose=-1; total time=   0.2s\n",
      "[CV] END learning_rate=0.09, max_depth=20, n_estimators=100, n_jobs=8, num_leaves=128, verbose=-1; total time=   0.2s\n",
      "[CV] END learning_rate=0.09, max_depth=20, n_estimators=100, n_jobs=8, num_leaves=128, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, max_depth=20, n_estimators=100, n_jobs=8, num_leaves=128, verbose=-1; total time=   0.2s\n",
      "[CV] END learning_rate=0.09, max_depth=20, n_estimators=100, n_jobs=8, num_leaves=128, verbose=-1; total time=   0.2s\n",
      "[CV] END learning_rate=0.09, max_depth=20, n_estimators=100, n_jobs=8, num_leaves=128, verbose=-1; total time=   0.2s\n",
      "[CV] END learning_rate=0.09, max_depth=20, n_estimators=100, n_jobs=8, num_leaves=512, verbose=-1; total time=   0.2s\n",
      "[CV] END learning_rate=0.09, max_depth=20, n_estimators=100, n_jobs=8, num_leaves=512, verbose=-1; total time=   0.2s\n",
      "[CV] END learning_rate=0.09, max_depth=20, n_estimators=100, n_jobs=8, num_leaves=512, verbose=-1; total time=   0.2s\n",
      "[CV] END learning_rate=0.09, max_depth=20, n_estimators=100, n_jobs=8, num_leaves=512, verbose=-1; total time=   0.2s\n",
      "[CV] END learning_rate=0.09, max_depth=20, n_estimators=100, n_jobs=8, num_leaves=512, verbose=-1; total time=   0.2s\n",
      "[CV] END learning_rate=0.09, max_depth=20, n_estimators=100, n_jobs=8, num_leaves=512, verbose=-1; total time=   0.2s\n",
      "[CV] END learning_rate=0.09, max_depth=20, n_estimators=100, n_jobs=8, num_leaves=512, verbose=-1; total time=   0.2s\n",
      "[CV] END learning_rate=0.09, max_depth=20, n_estimators=100, n_jobs=8, num_leaves=512, verbose=-1; total time=   0.2s\n",
      "[CV] END learning_rate=0.09, max_depth=20, n_estimators=100, n_jobs=8, num_leaves=512, verbose=-1; total time=   0.2s\n",
      "[CV] END learning_rate=0.09, max_depth=20, n_estimators=100, n_jobs=8, num_leaves=512, verbose=-1; total time=   0.2s\n",
      "[CV] END learning_rate=0.09, max_depth=50, n_estimators=100, n_jobs=8, num_leaves=32, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, max_depth=50, n_estimators=100, n_jobs=8, num_leaves=32, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, max_depth=50, n_estimators=100, n_jobs=8, num_leaves=32, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, max_depth=50, n_estimators=100, n_jobs=8, num_leaves=32, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, max_depth=50, n_estimators=100, n_jobs=8, num_leaves=32, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, max_depth=50, n_estimators=100, n_jobs=8, num_leaves=32, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, max_depth=50, n_estimators=100, n_jobs=8, num_leaves=32, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, max_depth=50, n_estimators=100, n_jobs=8, num_leaves=32, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, max_depth=50, n_estimators=100, n_jobs=8, num_leaves=32, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, max_depth=50, n_estimators=100, n_jobs=8, num_leaves=32, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, max_depth=50, n_estimators=100, n_jobs=8, num_leaves=64, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, max_depth=50, n_estimators=100, n_jobs=8, num_leaves=64, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, max_depth=50, n_estimators=100, n_jobs=8, num_leaves=64, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, max_depth=50, n_estimators=100, n_jobs=8, num_leaves=64, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, max_depth=50, n_estimators=100, n_jobs=8, num_leaves=64, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, max_depth=50, n_estimators=100, n_jobs=8, num_leaves=64, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, max_depth=50, n_estimators=100, n_jobs=8, num_leaves=64, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, max_depth=50, n_estimators=100, n_jobs=8, num_leaves=64, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, max_depth=50, n_estimators=100, n_jobs=8, num_leaves=64, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, max_depth=50, n_estimators=100, n_jobs=8, num_leaves=64, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, max_depth=50, n_estimators=100, n_jobs=8, num_leaves=128, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, max_depth=50, n_estimators=100, n_jobs=8, num_leaves=128, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, max_depth=50, n_estimators=100, n_jobs=8, num_leaves=128, verbose=-1; total time=   0.2s\n",
      "[CV] END learning_rate=0.09, max_depth=50, n_estimators=100, n_jobs=8, num_leaves=128, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, max_depth=50, n_estimators=100, n_jobs=8, num_leaves=128, verbose=-1; total time=   0.2s\n",
      "[CV] END learning_rate=0.09, max_depth=50, n_estimators=100, n_jobs=8, num_leaves=128, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, max_depth=50, n_estimators=100, n_jobs=8, num_leaves=128, verbose=-1; total time=   0.2s\n",
      "[CV] END learning_rate=0.09, max_depth=50, n_estimators=100, n_jobs=8, num_leaves=128, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, max_depth=50, n_estimators=100, n_jobs=8, num_leaves=128, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, max_depth=50, n_estimators=100, n_jobs=8, num_leaves=128, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, max_depth=50, n_estimators=100, n_jobs=8, num_leaves=512, verbose=-1; total time=   0.2s\n",
      "[CV] END learning_rate=0.09, max_depth=50, n_estimators=100, n_jobs=8, num_leaves=512, verbose=-1; total time=   0.2s\n",
      "[CV] END learning_rate=0.09, max_depth=50, n_estimators=100, n_jobs=8, num_leaves=512, verbose=-1; total time=   0.2s\n",
      "[CV] END learning_rate=0.09, max_depth=50, n_estimators=100, n_jobs=8, num_leaves=512, verbose=-1; total time=   0.3s\n",
      "[CV] END learning_rate=0.09, max_depth=50, n_estimators=100, n_jobs=8, num_leaves=512, verbose=-1; total time=   0.2s\n",
      "[CV] END learning_rate=0.09, max_depth=50, n_estimators=100, n_jobs=8, num_leaves=512, verbose=-1; total time=   0.2s\n",
      "[CV] END learning_rate=0.09, max_depth=50, n_estimators=100, n_jobs=8, num_leaves=512, verbose=-1; total time=   0.2s\n",
      "[CV] END learning_rate=0.09, max_depth=50, n_estimators=100, n_jobs=8, num_leaves=512, verbose=-1; total time=   0.2s\n",
      "[CV] END learning_rate=0.09, max_depth=50, n_estimators=100, n_jobs=8, num_leaves=512, verbose=-1; total time=   0.2s\n",
      "[CV] END learning_rate=0.09, max_depth=50, n_estimators=100, n_jobs=8, num_leaves=512, verbose=-1; total time=   0.2s\n",
      "[CV] END learning_rate=0.09, max_depth=None, n_estimators=100, n_jobs=8, num_leaves=32, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.09, max_depth=None, n_estimators=100, n_jobs=8, num_leaves=32, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, max_depth=None, n_estimators=100, n_jobs=8, num_leaves=32, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, max_depth=None, n_estimators=100, n_jobs=8, num_leaves=32, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, max_depth=None, n_estimators=100, n_jobs=8, num_leaves=32, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.09, max_depth=None, n_estimators=100, n_jobs=8, num_leaves=32, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, max_depth=None, n_estimators=100, n_jobs=8, num_leaves=32, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.09, max_depth=None, n_estimators=100, n_jobs=8, num_leaves=32, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, max_depth=None, n_estimators=100, n_jobs=8, num_leaves=32, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, max_depth=None, n_estimators=100, n_jobs=8, num_leaves=32, verbose=-1; total time=   0.0s\n",
      "[CV] END learning_rate=0.09, max_depth=None, n_estimators=100, n_jobs=8, num_leaves=64, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, max_depth=None, n_estimators=100, n_jobs=8, num_leaves=64, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, max_depth=None, n_estimators=100, n_jobs=8, num_leaves=64, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, max_depth=None, n_estimators=100, n_jobs=8, num_leaves=64, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, max_depth=None, n_estimators=100, n_jobs=8, num_leaves=64, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, max_depth=None, n_estimators=100, n_jobs=8, num_leaves=64, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, max_depth=None, n_estimators=100, n_jobs=8, num_leaves=64, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, max_depth=None, n_estimators=100, n_jobs=8, num_leaves=64, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, max_depth=None, n_estimators=100, n_jobs=8, num_leaves=64, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, max_depth=None, n_estimators=100, n_jobs=8, num_leaves=64, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, max_depth=None, n_estimators=100, n_jobs=8, num_leaves=128, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, max_depth=None, n_estimators=100, n_jobs=8, num_leaves=128, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, max_depth=None, n_estimators=100, n_jobs=8, num_leaves=128, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, max_depth=None, n_estimators=100, n_jobs=8, num_leaves=128, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, max_depth=None, n_estimators=100, n_jobs=8, num_leaves=128, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, max_depth=None, n_estimators=100, n_jobs=8, num_leaves=128, verbose=-1; total time=   0.2s\n",
      "[CV] END learning_rate=0.09, max_depth=None, n_estimators=100, n_jobs=8, num_leaves=128, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, max_depth=None, n_estimators=100, n_jobs=8, num_leaves=128, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, max_depth=None, n_estimators=100, n_jobs=8, num_leaves=128, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, max_depth=None, n_estimators=100, n_jobs=8, num_leaves=128, verbose=-1; total time=   0.1s\n",
      "[CV] END learning_rate=0.09, max_depth=None, n_estimators=100, n_jobs=8, num_leaves=512, verbose=-1; total time=   0.2s\n",
      "[CV] END learning_rate=0.09, max_depth=None, n_estimators=100, n_jobs=8, num_leaves=512, verbose=-1; total time=   0.2s\n",
      "[CV] END learning_rate=0.09, max_depth=None, n_estimators=100, n_jobs=8, num_leaves=512, verbose=-1; total time=   0.2s\n",
      "[CV] END learning_rate=0.09, max_depth=None, n_estimators=100, n_jobs=8, num_leaves=512, verbose=-1; total time=   0.2s\n",
      "[CV] END learning_rate=0.09, max_depth=None, n_estimators=100, n_jobs=8, num_leaves=512, verbose=-1; total time=   0.2s\n",
      "[CV] END learning_rate=0.09, max_depth=None, n_estimators=100, n_jobs=8, num_leaves=512, verbose=-1; total time=   0.2s\n",
      "[CV] END learning_rate=0.09, max_depth=None, n_estimators=100, n_jobs=8, num_leaves=512, verbose=-1; total time=   0.2s\n",
      "[CV] END learning_rate=0.09, max_depth=None, n_estimators=100, n_jobs=8, num_leaves=512, verbose=-1; total time=   0.2s\n",
      "[CV] END learning_rate=0.09, max_depth=None, n_estimators=100, n_jobs=8, num_leaves=512, verbose=-1; total time=   0.2s\n",
      "[CV] END learning_rate=0.09, max_depth=None, n_estimators=100, n_jobs=8, num_leaves=512, verbose=-1; total time=   0.2s\n",
      "LGBMClassifier()\n",
      "Best Parameters: {'learning_rate': 0.09, 'max_depth': 20, 'n_estimators': 100, 'n_jobs': 8, 'num_leaves': 32, 'verbose': -1}\n",
      "Accuracy: 0.9488 (0.0164)\n"
     ]
    }
   ],
   "source": [
    "# Try more num_leaves and various max_depth\n",
    "import lightgbm as lgb\n",
    "model= lgb.LGBMClassifier()\n",
    "parameters = ({'num_leaves' : [32, 64, 128, 512], 'max_depth': [10, 20, 50, None], 'learning_rate' : [0.09], 'n_estimators' : [100],\n",
    "               'verbose' : [-1], 'n_jobs' : [8]})\n",
    "finalres = gs(model, x_train, y_train, parameters, 10, 2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "id": "e4a17257-094b-4a5d-98ad-94d8ce765438",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'learning_rate': 0.09,\n",
       " 'max_depth': 20,\n",
       " 'n_estimators': 100,\n",
       " 'n_jobs': 8,\n",
       " 'num_leaves': 32,\n",
       " 'verbose': -1}"
      ]
     },
     "execution_count": 147,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "acc_lg = finalres[0]\n",
    "std_lg = finalres[1]\n",
    "lg_opt_param = finalres[2]\n",
    "lg_opt_param"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3d32a18b-79e6-460d-9798-ce0de795429a",
   "metadata": {},
   "source": [
    "### Try Randomized Grid Search"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 655,
   "id": "aa0f1604-0e52-4f88-a9f6-081780f70ac7",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Note from lightgbm.readthedocs.io/en/latest/Parameters-Tuning.html\n",
    "#   (section Tune Parameters for the Leaf-wise (Best-first) Tree)\n",
    "#\n",
    "# Thus, when trying to tune the num_leaves, we should let it be smaller than 2^(max_depth).\n",
    "# For example, when the max_depth=7 the depth-wise tree can get good accuracy, but setting num_leaves to 127\n",
    "# may cause over-fitting, and setting it to 70 or 80 may get better accuracy than depth-wise.\n",
    "#\n",
    "# Therefore, will not use very large values of num_leaves"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 656,
   "id": "53467b8b-ec5d-4772-894b-ff4876f67b5f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Model is superior if best_score better than acc_lg after fitting\n",
    "best_score = acc_lg"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 657,
   "id": "8465947d-01fa-4b9e-a2dc-d30ab7c24e16",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "15:06:01.601752\n"
     ]
    }
   ],
   "source": [
    "import datetime\n",
    "st = datetime.datetime.now()\n",
    "print(st.time())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 658,
   "id": "7bbb4fab-3e50-4887-b367-aee32cfd88b2",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 3 folds for each of 2000 candidates, totalling 6000 fits\n",
      "LGBMClassifier()\n",
      "Best Parameters: {'num_leaves': 2, 'n_estimators': 250, 'min_samples_leaf': 20, 'max_depth': 90, 'learning_rate': 0.08, 'criterion': 'gini'}\n",
      "Accuracy: 0.9500 (0.0168)\n"
     ]
    }
   ],
   "source": [
    "# NOTE:\n",
    "# On CPU = Intel Core i5-1035G1\n",
    "# Cell takes > 30 minutes to evaluate at n_iter = 4000; fit code is commented out\n",
    "#   To run cell, uncomment code starting with line fit_random.fit(.....\n",
    "#   For faster run, change n_iter < 4000\n",
    "\n",
    "from sklearn.model_selection import RandomizedSearchCV\n",
    "random_grid = {'criterion': ['gini', 'entropy', 'log_loss'],\n",
    "               'max_depth': [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, None],\n",
    "               'num_leaves': [2, 10, 20, 50, 64, 128, 256, 512],              \n",
    "               'min_samples_leaf': [2, 10, 20, 50],\n",
    "               'learning_rate' : [0.08,0.09,0.10,0.11,0.12,0.15,0.20,0.30],\n",
    "               'n_estimators': [25, 100, 150, 250]}\n",
    "# Use random grid to search for hyperparameters\n",
    "model = lgb.LGBMClassifier()\n",
    "# Random search of parameters, using 3 fold cross validation, \n",
    "# search across n_iter different combinations, and n_jobs cores (all = -1)\n",
    "fit_random = RandomizedSearchCV(estimator = model, param_distributions = random_grid, n_iter = 2000, cv = 3, verbose = 1, n_jobs = 8)\n",
    "#fit_random.fit(x_train, y_train)\n",
    "#\n",
    "#best_score = fit_random.best_score_\n",
    "#best_stdev = float(fit_random.cv_results_['std_test_score'][0])\n",
    "#best_param = fit_random.best_params_\n",
    "#print (model)\n",
    "#print ('Best Parameters:', best_param)\n",
    "#print ('Accuracy: %.4f (%.4f)' % (best_score, best_stdev))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 659,
   "id": "d9d97573-622b-4f13-aa2b-96fbb4374836",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "datetime.timedelta(seconds=841, microseconds=452443)"
      ]
     },
     "execution_count": 659,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "datetime.datetime.now() - st"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 660,
   "id": "4abb52ce-940e-4576-ae66-2029b1b1f1d5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.0011711037201754815\n",
      "No improvement after randomized grid search.\n",
      "  Optimal parameters list NOT updated.\n"
     ]
    }
   ],
   "source": [
    "# Update LightGBM optimal parameters if score difference >= 0.005\n",
    "print (best_score - acc_lg)\n",
    "if best_score - acc_lg >= 0.005:\n",
    "    print ('Model mproved.')\n",
    "    print ('  Updating optimal parameters list.')\n",
    "    acc_lg = best_score\n",
    "    std_lg = best_stdev\n",
    "    lg_opt_param = best_param\n",
    "else:\n",
    "    print ('No improvement after randomized grid search.')\n",
    "    print ('  Optimal parameters list NOT updated.')\n",
    "\n",
    "# Keep n_estimators = 100 because difference at n >= 150 is insignificant\n",
    "lg_opt_param |= {'n_estimators' : 100}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "id": "45b34b6d-1f50-45b9-a236-ed4d68212f33",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "LightGBM final results:\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(0.9487998096015232,\n",
       " 0.01635921918668596,\n",
       " {'learning_rate': 0.09,\n",
       "  'max_depth': 20,\n",
       "  'n_estimators': 100,\n",
       "  'n_jobs': 8,\n",
       "  'num_leaves': 32,\n",
       "  'verbose': -1})"
      ]
     },
     "execution_count": 150,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print ('LightGBM final results:')\n",
    "acc_lg, std_lg, lg_opt_param"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "203df9b0-481a-4b00-be4d-3ea2b336dc25",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true
   },
   "source": [
    "## Hyperparameter Tuning: Random Forest"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "id": "c47df5c6-f520-4d36-bb95-45ae29e8bfc7",
   "metadata": {},
   "outputs": [],
   "source": [
    "x = rdf.iloc[:, :-1].values\n",
    "y = rdf.iloc[:, -1].values\n",
    "x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state = 0)\n",
    "finalres = []     # Initialize to blank final results (later code should error if we forget to calculate them)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "26119238-5c6d-4d6e-b09d-b1b96829a65c",
   "metadata": {},
   "source": [
    "### Manual Tuning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "id": "5f762d86-397d-470a-a826-a5c3b905c23b",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 10 folds for each of 3 candidates, totalling 30 fits\n",
      "[CV] END ...................criterion=gini, n_estimators=100; total time=   0.4s\n",
      "[CV] END ...................criterion=gini, n_estimators=100; total time=   0.3s\n",
      "[CV] END ...................criterion=gini, n_estimators=100; total time=   0.3s\n",
      "[CV] END ...................criterion=gini, n_estimators=100; total time=   0.3s\n",
      "[CV] END ...................criterion=gini, n_estimators=100; total time=   0.3s\n",
      "[CV] END ...................criterion=gini, n_estimators=100; total time=   0.3s\n",
      "[CV] END ...................criterion=gini, n_estimators=100; total time=   0.3s\n",
      "[CV] END ...................criterion=gini, n_estimators=100; total time=   0.3s\n",
      "[CV] END ...................criterion=gini, n_estimators=100; total time=   0.3s\n",
      "[CV] END ...................criterion=gini, n_estimators=100; total time=   0.3s\n",
      "[CV] END ................criterion=entropy, n_estimators=100; total time=   0.4s\n",
      "[CV] END ................criterion=entropy, n_estimators=100; total time=   0.4s\n",
      "[CV] END ................criterion=entropy, n_estimators=100; total time=   0.4s\n",
      "[CV] END ................criterion=entropy, n_estimators=100; total time=   0.4s\n",
      "[CV] END ................criterion=entropy, n_estimators=100; total time=   0.4s\n",
      "[CV] END ................criterion=entropy, n_estimators=100; total time=   0.4s\n",
      "[CV] END ................criterion=entropy, n_estimators=100; total time=   0.4s\n",
      "[CV] END ................criterion=entropy, n_estimators=100; total time=   0.4s\n",
      "[CV] END ................criterion=entropy, n_estimators=100; total time=   0.4s\n",
      "[CV] END ................criterion=entropy, n_estimators=100; total time=   0.4s\n",
      "[CV] END ...............criterion=log_loss, n_estimators=100; total time=   0.4s\n",
      "[CV] END ...............criterion=log_loss, n_estimators=100; total time=   0.4s\n",
      "[CV] END ...............criterion=log_loss, n_estimators=100; total time=   0.5s\n",
      "[CV] END ...............criterion=log_loss, n_estimators=100; total time=   0.4s\n",
      "[CV] END ...............criterion=log_loss, n_estimators=100; total time=   0.4s\n",
      "[CV] END ...............criterion=log_loss, n_estimators=100; total time=   0.4s\n",
      "[CV] END ...............criterion=log_loss, n_estimators=100; total time=   0.4s\n",
      "[CV] END ...............criterion=log_loss, n_estimators=100; total time=   0.4s\n",
      "[CV] END ...............criterion=log_loss, n_estimators=100; total time=   0.4s\n",
      "[CV] END ...............criterion=log_loss, n_estimators=100; total time=   0.4s\n",
      "RandomForestClassifier()\n",
      "Best Parameters: {'criterion': 'gini', 'n_estimators': 100}\n",
      "Accuracy: 0.9302 (0.0275)\n"
     ]
    }
   ],
   "source": [
    "# Loss function selection\n",
    "model = RandomForestClassifier()\n",
    "parameters = [{'criterion': ['gini', 'entropy', 'log_loss'], 'n_estimators': [100]}]\n",
    "devnull = gs(model, x_train, y_train, parameters, 10, 2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 155,
   "id": "2f259ffe-ae7d-40bf-a1ed-05e55eeaae6a",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 10 folds for each of 5 candidates, totalling 50 fits\n",
      "[CV] END criterion=entropy, max_features=None, n_estimators=100; total time=   1.6s\n",
      "[CV] END criterion=entropy, max_features=None, n_estimators=100; total time=   1.5s\n",
      "[CV] END criterion=entropy, max_features=None, n_estimators=100; total time=   1.6s\n",
      "[CV] END criterion=entropy, max_features=None, n_estimators=100; total time=   1.7s\n",
      "[CV] END criterion=entropy, max_features=None, n_estimators=100; total time=   1.6s\n",
      "[CV] END criterion=entropy, max_features=None, n_estimators=100; total time=   1.5s\n",
      "[CV] END criterion=entropy, max_features=None, n_estimators=100; total time=   1.6s\n",
      "[CV] END criterion=entropy, max_features=None, n_estimators=100; total time=   1.6s\n",
      "[CV] END criterion=entropy, max_features=None, n_estimators=100; total time=   1.6s\n",
      "[CV] END criterion=entropy, max_features=None, n_estimators=100; total time=   1.6s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=sqrt, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=log2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=12, n_estimators=100; total time=   0.7s\n",
      "[CV] END criterion=entropy, max_features=12, n_estimators=100; total time=   0.7s\n",
      "[CV] END criterion=entropy, max_features=12, n_estimators=100; total time=   0.7s\n",
      "[CV] END criterion=entropy, max_features=12, n_estimators=100; total time=   0.7s\n",
      "[CV] END criterion=entropy, max_features=12, n_estimators=100; total time=   0.7s\n",
      "[CV] END criterion=entropy, max_features=12, n_estimators=100; total time=   0.7s\n",
      "[CV] END criterion=entropy, max_features=12, n_estimators=100; total time=   0.7s\n",
      "[CV] END criterion=entropy, max_features=12, n_estimators=100; total time=   0.9s\n",
      "[CV] END criterion=entropy, max_features=12, n_estimators=100; total time=   0.7s\n",
      "[CV] END criterion=entropy, max_features=12, n_estimators=100; total time=   0.7s\n",
      "[CV] END criterion=entropy, max_features=16, n_estimators=100; total time=   0.9s\n",
      "[CV] END criterion=entropy, max_features=16, n_estimators=100; total time=   0.9s\n",
      "[CV] END criterion=entropy, max_features=16, n_estimators=100; total time=   0.9s\n",
      "[CV] END criterion=entropy, max_features=16, n_estimators=100; total time=   0.9s\n",
      "[CV] END criterion=entropy, max_features=16, n_estimators=100; total time=   0.9s\n",
      "[CV] END criterion=entropy, max_features=16, n_estimators=100; total time=   0.9s\n",
      "[CV] END criterion=entropy, max_features=16, n_estimators=100; total time=   0.9s\n",
      "[CV] END criterion=entropy, max_features=16, n_estimators=100; total time=   0.8s\n",
      "[CV] END criterion=entropy, max_features=16, n_estimators=100; total time=   0.8s\n",
      "[CV] END criterion=entropy, max_features=16, n_estimators=100; total time=   0.8s\n",
      "RandomForestClassifier()\n",
      "Best Parameters: {'criterion': 'entropy', 'max_features': 16, 'n_estimators': 100}\n",
      "Accuracy: 0.9482 (0.0157)\n"
     ]
    }
   ],
   "source": [
    "# max_features selection\n",
    "model = RandomForestClassifier()\n",
    "parameters = [{'criterion': ['entropy'], 'n_estimators': [100], 'max_features' : [None, 'sqrt', 'log2', 12, 16]}]\n",
    "devnull = gs(model, x_train, y_train, parameters, 10, 2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 156,
   "id": "f4ff61f1-f6bd-462f-a77f-54be4c09ce1a",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 10 folds for each of 4 candidates, totalling 40 fits\n",
      "[CV] END criterion=entropy, max_features=None, n_estimators=25; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, n_estimators=25; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, n_estimators=25; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, n_estimators=25; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, n_estimators=25; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, n_estimators=25; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, n_estimators=25; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, n_estimators=25; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, n_estimators=25; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, n_estimators=25; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, n_estimators=100; total time=   1.6s\n",
      "[CV] END criterion=entropy, max_features=None, n_estimators=100; total time=   1.5s\n",
      "[CV] END criterion=entropy, max_features=None, n_estimators=100; total time=   1.6s\n",
      "[CV] END criterion=entropy, max_features=None, n_estimators=100; total time=   1.5s\n",
      "[CV] END criterion=entropy, max_features=None, n_estimators=100; total time=   1.6s\n",
      "[CV] END criterion=entropy, max_features=None, n_estimators=100; total time=   1.6s\n",
      "[CV] END criterion=entropy, max_features=None, n_estimators=100; total time=   1.6s\n",
      "[CV] END criterion=entropy, max_features=None, n_estimators=100; total time=   1.6s\n",
      "[CV] END criterion=entropy, max_features=None, n_estimators=100; total time=   1.6s\n",
      "[CV] END criterion=entropy, max_features=None, n_estimators=100; total time=   1.5s\n",
      "[CV] END criterion=entropy, max_features=None, n_estimators=150; total time=   2.4s\n",
      "[CV] END criterion=entropy, max_features=None, n_estimators=150; total time=   2.4s\n",
      "[CV] END criterion=entropy, max_features=None, n_estimators=150; total time=   2.4s\n",
      "[CV] END criterion=entropy, max_features=None, n_estimators=150; total time=   2.4s\n",
      "[CV] END criterion=entropy, max_features=None, n_estimators=150; total time=   2.5s\n",
      "[CV] END criterion=entropy, max_features=None, n_estimators=150; total time=   2.5s\n",
      "[CV] END criterion=entropy, max_features=None, n_estimators=150; total time=   2.4s\n",
      "[CV] END criterion=entropy, max_features=None, n_estimators=150; total time=   2.4s\n",
      "[CV] END criterion=entropy, max_features=None, n_estimators=150; total time=   2.4s\n",
      "[CV] END criterion=entropy, max_features=None, n_estimators=150; total time=   2.3s\n",
      "[CV] END criterion=entropy, max_features=None, n_estimators=250; total time=   4.5s\n",
      "[CV] END criterion=entropy, max_features=None, n_estimators=250; total time=   4.1s\n",
      "[CV] END criterion=entropy, max_features=None, n_estimators=250; total time=   4.1s\n",
      "[CV] END criterion=entropy, max_features=None, n_estimators=250; total time=   3.8s\n",
      "[CV] END criterion=entropy, max_features=None, n_estimators=250; total time=   4.2s\n",
      "[CV] END criterion=entropy, max_features=None, n_estimators=250; total time=   3.9s\n",
      "[CV] END criterion=entropy, max_features=None, n_estimators=250; total time=   4.0s\n",
      "[CV] END criterion=entropy, max_features=None, n_estimators=250; total time=   3.9s\n",
      "[CV] END criterion=entropy, max_features=None, n_estimators=250; total time=   3.9s\n",
      "[CV] END criterion=entropy, max_features=None, n_estimators=250; total time=   3.9s\n",
      "RandomForestClassifier()\n",
      "Best Parameters: {'criterion': 'entropy', 'max_features': None, 'n_estimators': 250}\n",
      "Accuracy: 0.9500 (0.0182)\n"
     ]
    }
   ],
   "source": [
    "# n_iterations selection\n",
    "model = RandomForestClassifier()\n",
    "parameters = [{'criterion': ['entropy'], 'n_estimators': [25, 100, 150, 250], 'max_features' : [None]}]\n",
    "devnull = gs(model, x_train, y_train, parameters, 10, 2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 157,
   "id": "ca8f5cc2-fce9-4338-a62f-3651fce56d0c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 10 folds for each of 1 candidates, totalling 10 fits\n",
      "[CV] END criterion=entropy, max_features=None, n_estimators=150; total time=   2.7s\n",
      "[CV] END criterion=entropy, max_features=None, n_estimators=150; total time=   2.5s\n",
      "[CV] END criterion=entropy, max_features=None, n_estimators=150; total time=   2.5s\n",
      "[CV] END criterion=entropy, max_features=None, n_estimators=150; total time=   2.5s\n",
      "[CV] END criterion=entropy, max_features=None, n_estimators=150; total time=   2.6s\n",
      "[CV] END criterion=entropy, max_features=None, n_estimators=150; total time=   2.5s\n",
      "[CV] END criterion=entropy, max_features=None, n_estimators=150; total time=   2.6s\n",
      "[CV] END criterion=entropy, max_features=None, n_estimators=150; total time=   3.1s\n",
      "[CV] END criterion=entropy, max_features=None, n_estimators=150; total time=   2.8s\n",
      "[CV] END criterion=entropy, max_features=None, n_estimators=150; total time=   2.5s\n",
      "RandomForestClassifier()\n",
      "Best Parameters: {'criterion': 'entropy', 'max_features': None, 'n_estimators': 150}\n",
      "Accuracy: 0.9500 (0.0169)\n"
     ]
    }
   ],
   "source": [
    "########################################\n",
    "## Model with Winning Hyperparameters ##\n",
    "########################################\n",
    "model = RandomForestClassifier()\n",
    "parameters = [{'criterion': ['entropy'], 'n_estimators': [150], 'max_features' : [None]}]\n",
    "devnull = gs(model, x_train, y_train, parameters, 10, 2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "00962875-f232-4ceb-8309-438def513430",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-success\">\n",
    "Check with n_iterations = 100.  Result is nearly the same as with n = 150, so will continue with n = 100 in later runs.\n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "id": "388bc3a2-c2a7-4dbf-b74b-0eb37d66a07a",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 10 folds for each of 64 candidates, totalling 640 fits\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.5s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.5s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.6s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.6s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.5s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.5s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.5s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.5s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.7s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.7s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.7s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.7s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.6s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.7s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.7s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.6s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.6s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.6s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.5s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.7s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.6s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.7s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.7s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.7s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.7s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.6s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.6s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.6s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.6s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.6s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.6s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.5s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.6s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.6s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.6s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.6s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.6s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.6s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.6s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.7s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.6s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.6s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.7s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.6s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.5s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.6s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.6s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.6s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.6s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.6s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.6s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.6s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.6s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.6s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.6s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.6s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.6s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.6s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.6s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.6s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.8s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.6s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.6s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.6s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.6s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.5s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.5s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.6s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.6s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.6s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.6s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.7s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.7s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.6s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.7s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.7s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.6s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.5s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.5s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.5s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.6s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.8s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.7s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.7s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.7s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.6s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.6s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.6s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.7s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.7s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.5s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.5s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.6s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.8s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.7s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.8s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.8s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.8s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.7s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.7s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.7s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.7s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.5s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.0s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.0s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.0s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.0s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.0s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.0s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.0s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.0s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.8s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.6s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.6s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.7s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.7s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.8s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.7s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.7s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.6s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.6s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.6s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.6s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.6s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.6s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.6s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.6s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.6s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.6s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.6s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.6s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.5s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.0s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.0s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.7s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.8s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.8s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.8s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.8s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.7s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.7s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.7s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.7s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.6s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.0s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.0s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.0s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.0s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.0s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.0s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.0s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.0s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.6s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.6s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.6s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.6s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.6s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.7s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.6s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.6s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.6s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.9s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.5s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.5s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   0.8s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.0s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   0.9s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   0.9s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   0.8s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   0.9s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   0.8s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   0.9s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   0.8s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   0.8s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.6s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.6s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.7s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.6s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.6s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.6s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.6s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.6s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.7s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.6s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.5s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   0.8s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   0.8s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   0.8s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   0.8s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   0.9s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   0.8s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   0.8s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   0.7s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   0.9s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   0.9s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.7s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.6s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.6s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.6s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.6s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.6s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.7s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.6s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.6s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.6s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.5s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   0.8s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   0.8s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   0.8s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   0.8s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   0.8s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   0.8s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   0.8s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   0.8s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   0.8s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.9s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.9s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.8s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.8s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.7s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.8s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.7s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.7s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.6s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.6s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.5s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   0.8s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   0.9s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   0.8s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   0.8s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   0.8s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   0.8s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   0.9s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   0.8s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.0s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   0.9s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.6s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.6s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.6s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.6s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.6s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.6s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.6s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.6s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.6s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100; total time=   0.6s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.5s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100; total time=   0.2s\n",
      "RandomForestClassifier()\n",
      "Best Parameters: {'criterion': 'entropy', 'max_features': None, 'min_samples_leaf': 2, 'min_samples_split': 20, 'min_weight_fraction_leaf': 0.0, 'n_estimators': 100}\n",
      "Accuracy: 0.9460 (0.0164)\n"
     ]
    }
   ],
   "source": [
    "# Grid Search of min_samples_split, min_samples_leaf, min_weight_fraction_leaf (4 x 4 x 4combos)\n",
    "x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.25, random_state = 0)\n",
    "model = RandomForestClassifier()\n",
    "parameters = [{'criterion': ['entropy'], 'n_estimators': [100], 'max_features' : [None],\n",
    "               'min_samples_split' : [2, 10, 20, 50], 'min_samples_leaf' : [2, 10, 20, 50], 'min_weight_fraction_leaf' : [0.0, 0.1, 0.2, 0.5]}]\n",
    "devnull = gs(model, x_train, y_train, parameters, 10, 2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 160,
   "id": "e4f2889a-aed7-45da-af2c-dc753f318624",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 10 folds for each of 1 candidates, totalling 10 fits\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.6s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.5s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.5s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.5s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100; total time=   1.4s\n",
      "RandomForestClassifier()\n",
      "Best Parameters: {'criterion': 'entropy', 'max_features': None, 'min_samples_leaf': 2, 'min_samples_split': 20, 'min_weight_fraction_leaf': 0.0, 'n_estimators': 100}\n",
      "Accuracy: 0.9466 (0.0148)\n"
     ]
    }
   ],
   "source": [
    "# Check with n_iterations = 100.  Result is nearly the same as with n = 150, so will continue with n = 100 in later runs\n",
    "model = RandomForestClassifier()\n",
    "parameters = [{'criterion': ['entropy'], 'n_estimators': [100], 'max_features' : [None],\n",
    "               'min_samples_split' : [20], 'min_samples_leaf' : [2], 'min_weight_fraction_leaf' : [0.0]}]\n",
    "finalres = gs(model, x_train, y_train, parameters, 10, 2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 161,
   "id": "9b3c32aa-17ee-485c-b7cc-fdb9be3f6749",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'criterion': 'entropy',\n",
       " 'max_features': None,\n",
       " 'min_samples_leaf': 2,\n",
       " 'min_samples_split': 20,\n",
       " 'min_weight_fraction_leaf': 0.0,\n",
       " 'n_estimators': 100}"
      ]
     },
     "execution_count": 161,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "acc_rf = finalres[0]\n",
    "std_rf = finalres[1]\n",
    "rf_opt_param = finalres[2]\n",
    "rf_opt_param"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1dd90420-8913-4223-8741-3389fedac63c",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true
   },
   "source": [
    "### Try Randomized Grid Search"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 673,
   "id": "4374b968-c5c7-4eaf-825a-7b100f5ed28d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Model is superior if best_score better than acc_rf after fitting\n",
    "best_score = acc_rf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 674,
   "id": "4e351477-0dba-4f75-bbde-b784a9546332",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "15:24:31.577345\n"
     ]
    }
   ],
   "source": [
    "import datetime\n",
    "st = datetime.datetime.now()\n",
    "print(st.time())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 675,
   "id": "6ce20340-7bb7-4faf-911c-512560b368f5",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 3 folds for each of 2000 candidates, totalling 6000 fits\n",
      "RandomForestClassifier()\n",
      "Best Parameters: {'n_estimators': 25, 'min_weight_fraction_leaf': 0.0, 'min_samples_split': 2, 'min_samples_leaf': 2, 'max_features': 16, 'max_depth': 30, 'criterion': 'entropy', 'bootstrap': False}\n",
      "Accuracy: 0.9453 (0.0000)\n"
     ]
    }
   ],
   "source": [
    "# NOTE:\n",
    "# On CPU = Intel Core i5-1035G1\n",
    "# Cell takes > 45 minutes to evaluate at n_iter = 6000; fit code is commented out\n",
    "#   To run cell, uncomment code starting with line fit_random.fit(.....\n",
    "#   For faster run, change n_iter < 6000\n",
    "\n",
    "from sklearn.model_selection import RandomizedSearchCV\n",
    "random_grid = {'criterion': ['gini', 'entropy', 'log_loss'],\n",
    "               'bootstrap': [True, False],\n",
    "               'max_depth': [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, None],\n",
    "               'max_features': [None, 'sqrt', 'log2', 12, 16],\n",
    "               'min_samples_leaf': [2, 10, 20, 50],\n",
    "               'min_samples_split': [2, 10, 20, 50],\n",
    "               'min_weight_fraction_leaf' : [0.0, 0.1, 0.2, 0.5],\n",
    "               'n_estimators': [25, 100, 150, 250]}\n",
    "# Use random grid to search for hyperparameters\n",
    "model = RandomForestClassifier()\n",
    "# Random search of parameters, using 3 fold cross validation, \n",
    "# search across n_iter different combinations, and n_jobs cores (all = -1)\n",
    "fit_random = RandomizedSearchCV(estimator = model, param_distributions = random_grid, n_iter = 2000, cv = 3, verbose = 1, n_jobs = 8)\n",
    "#fit_random.fit(x_train, y_train)\n",
    "#\n",
    "#best_score = fit_random.best_score_\n",
    "#best_stdev = float(fit_random.cv_results_['std_test_score'][0])\n",
    "#best_param = fit_random.best_params_\n",
    "#print (model)\n",
    "#print ('Best Parameters:', best_param)\n",
    "#print ('Accuracy: %.4f (%.4f)' % (best_score, best_stdev))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 676,
   "id": "83f1b7e6-ec37-4dac-a093-af0a2b4e06e7",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "datetime.timedelta(seconds=1018, microseconds=696537)"
      ]
     },
     "execution_count": 676,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "datetime.datetime.now() - st"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 677,
   "id": "dc40de7f-0d65-43e7-a02c-6c12d0847001",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-0.0023165741375639204\n",
      "No improvement after randomized grid search.\n",
      "  Optimal parameters list NOT updated.\n"
     ]
    }
   ],
   "source": [
    "# Update Random Forest optimal parameters if score difference >= 0.005\n",
    "print (best_score - acc_rf)\n",
    "if best_score - acc_rf >= 0.005:\n",
    "    print ('Model mproved.')\n",
    "    print ('  Updating optimal parameters list.')\n",
    "    acc_rf = best_score\n",
    "    std_rf = best_stdev\n",
    "    rf_opt_param = best_param\n",
    "else:\n",
    "    print ('No improvement after randomized grid search.')\n",
    "    print ('  Optimal parameters list NOT updated.')\n",
    "\n",
    "# Keep n_estimators = 100 because difference at n >= 150 is insignificant\n",
    "rf_opt_param |= {'n_estimators' : 100}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 162,
   "id": "716dbd7f-f354-4f59-9a85-34c9933d70c2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Random Forest final results:\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(0.9466145234261175,\n",
       " 0.014758769603972302,\n",
       " {'criterion': 'entropy',\n",
       "  'max_features': None,\n",
       "  'min_samples_leaf': 2,\n",
       "  'min_samples_split': 20,\n",
       "  'min_weight_fraction_leaf': 0.0,\n",
       "  'n_estimators': 100})"
      ]
     },
     "execution_count": 162,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print ('Random Forest final results:')\n",
    "acc_rf, std_rf, rf_opt_param"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0ebb1e74-53f8-4377-9831-c8d3e725cb86",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true
   },
   "source": [
    "## Visualizations: Explore which features are Top Contributors to Random Forest model"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fc5644f5-4ccc-425c-a9e9-3e0619b2038b",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true
   },
   "source": [
    "### List of Features and Relative Contributions (Importances)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 164,
   "id": "a077ed48-0352-4c42-9862-1e6102b6f7d0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Gender                      0.001588\n",
      "Smoking                     0.001422\n",
      "FamilyHistoryAlzheimers     0.001347\n",
      "CardiovascularDisease       0.000756\n",
      "Diabetes                    0.000923\n",
      "Depression                  0.001136\n",
      "HeadInjury                  0.000490\n",
      "Hypertension                0.000755\n",
      "MemoryComplaints            0.119250\n",
      "BehavioralProblems          0.114454\n",
      "Confusion                   0.000758\n",
      "Disorientation              0.000748\n",
      "PersonalityChanges          0.001656\n",
      "DifficultyCompletingTasks   0.001400\n",
      "Forgetfulness               0.001100\n",
      "Age                         0.019722\n",
      "Ethnicity                   0.003453\n",
      "EducationLevel              0.004583\n",
      "BMI                         0.017921\n",
      "AlcoholConsumption          0.012559\n",
      "PhysicalActivity            0.021121\n",
      "DietQuality                 0.025293\n",
      "SleepQuality                0.013154\n",
      "SystolicBP                  0.016611\n",
      "DiastolicBP                 0.010480\n",
      "CholesterolTotal            0.019960\n",
      "CholesterolLDL              0.020571\n",
      "CholesterolHDL              0.020824\n",
      "CholesterolTriglycerides    0.016114\n",
      "MMSE                        0.185812\n",
      "FunctionalAssessment        0.175747\n",
      "ADL                         0.168294\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "model = RandomForestClassifier(criterion = 'entropy', n_estimators = 100, max_features = None, random_state = 0)\n",
    "model.fit (x_train, y_train)\n",
    "\n",
    "#print(model.__dict__)\n",
    "\n",
    "#use inbuilt class feature_importances of tree based classifiers\n",
    "pd.options.display.float_format = \"{:,.6f}\".format\n",
    "feat_importances = pd.Series(model.feature_importances_, index=rdf.columns[:-1])\n",
    "print(feat_importances)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a990eb7-f22e-45ae-8f3c-8e5019144233",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-success\">\n",
    "The four cholesterol features contribute nearly identically.\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ef9cddff-2b8d-4d01-8a09-b232ca65838e",
   "metadata": {},
   "source": [
    "### Plot Feature Importances, Top 10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 167,
   "id": "986160ce-5d8d-44e2-986e-d261cd34c503",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "f10 = feat_importances.nlargest(10)\n",
    "f10.plot(kind='barh', color=plt.cm.prism(np.arange(len(f10))))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "76dbd12f-81b7-4a6f-8cc1-2064d22e9ba8",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-success\">\n",
    "<b>FYI / Analysis:</b> After k-fold validation, the best accuracies were obtained with: the Random Forest Classifier, Extra Trees Classifier, and LightGBM.  All three gave very similar accuracies after tuning.  See section <i>Accuracy Table after k-Fold Validation</i>.\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7ecdfa40-e7f6-4814-b91f-4525581dc442",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-success\">\n",
    "<b>FYI / Analysis:</b> Three continuous features (MMSE, FuncAss, ADL) and two binary features (Mem and BehavProb) dominate the model.  From\n",
    "    the summary table (near the end of the notebook), the best fit was obtained using features having importance ≥ 0.01, with Top 10 and Top 5\n",
    "    features yielding similar results.  The three cholesterol features could probably be combined into a single feature.  So, either the resulting\n",
    "    top 9 or top 5 features could be used for reliable modelling.\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4ac7ddb1-38c3-4ae6-a9bf-237a1ee5d828",
   "metadata": {},
   "source": [
    "### Plot Features which contribute ≥ 0.01"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 171,
   "id": "5b84defe-6147-4809-aa44-0225d3e0fa55",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "MemoryComplaints           0.119250\n",
       "BehavioralProblems         0.114454\n",
       "Age                        0.019722\n",
       "BMI                        0.017921\n",
       "AlcoholConsumption         0.012559\n",
       "PhysicalActivity           0.021121\n",
       "DietQuality                0.025293\n",
       "SleepQuality               0.013154\n",
       "SystolicBP                 0.016611\n",
       "DiastolicBP                0.010480\n",
       "CholesterolTotal           0.019960\n",
       "CholesterolLDL             0.020571\n",
       "CholesterolHDL             0.020824\n",
       "CholesterolTriglycerides   0.016114\n",
       "MMSE                       0.185812\n",
       "FunctionalAssessment       0.175747\n",
       "ADL                        0.168294\n",
       "dtype: float64"
      ]
     },
     "execution_count": 171,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "feat_importances[feat_importances.ge(0.01)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 172,
   "id": "cebca206-5b1a-4977-a9f3-526494efe823",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fge001 = feat_importances[feat_importances.ge(0.01)]\n",
    "fge001 = fge001.nlargest(len(fge001))\n",
    "fge001.plot(kind='barh', color=plt.cm.prism(np.arange(len(fge001))))\n",
    "#fge001.plot(kind='barh', color=plt.cm.Set3(np.arange(len(fge001))))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "934aec25-3594-45da-acc5-58ef3e7c63e8",
   "metadata": {},
   "source": [
    "### Correlation Matrix, highlighting the most important features"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3a093e0d-04b6-49a7-a8f5-ae26aaa468f6",
   "metadata": {},
   "source": [
    "#### <b>Note:</b> Only the magnitude is shown <i>(ignore whether correlation is positive or negative)</i>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 175,
   "id": "19bf3f42-d05a-40c8-9368-83a670b7a47c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 2000x2000 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import seaborn as sns\n",
    "corrmat = rdf.corr()\n",
    "top_corr_features = corrmat.index\n",
    "plt.figure(figsize=(20,20))\n",
    "\n",
    "# plot heat map\n",
    "# shows Absolute value of correlations.  Depict only correlations, not whether positive or negative\n",
    "g=sns.heatmap(abs(rdf[top_corr_features].corr()),annot=True,cmap=\"OrRd\", mask=np.eye(len(corrmat)))\n",
    "\n",
    "# Suppress coloring the diagonal, as this overdominates the output\n",
    "g.patch.set_facecolor('lightgrey')\n",
    "g.patch.set_edgecolor('white')\n",
    "g.patch.set_hatch('xx')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9bc1f936-cd8a-42ea-a869-843aa3b2d419",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-success\">\n",
    "The dominance of the top 5 features is quite evident.\n",
    "</div>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 177,
   "id": "699091d2-8eb9-4836-97a7-65c1b3861a5b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Gender</th>\n",
       "      <th>Smoking</th>\n",
       "      <th>FamilyHistoryAlzheimers</th>\n",
       "      <th>CardiovascularDisease</th>\n",
       "      <th>Diabetes</th>\n",
       "      <th>Depression</th>\n",
       "      <th>HeadInjury</th>\n",
       "      <th>Hypertension</th>\n",
       "      <th>MemoryComplaints</th>\n",
       "      <th>BehavioralProblems</th>\n",
       "      <th>Confusion</th>\n",
       "      <th>Disorientation</th>\n",
       "      <th>PersonalityChanges</th>\n",
       "      <th>DifficultyCompletingTasks</th>\n",
       "      <th>Forgetfulness</th>\n",
       "      <th>Age</th>\n",
       "      <th>Ethnicity</th>\n",
       "      <th>EducationLevel</th>\n",
       "      <th>BMI</th>\n",
       "      <th>AlcoholConsumption</th>\n",
       "      <th>PhysicalActivity</th>\n",
       "      <th>DietQuality</th>\n",
       "      <th>SleepQuality</th>\n",
       "      <th>SystolicBP</th>\n",
       "      <th>DiastolicBP</th>\n",
       "      <th>CholesterolTotal</th>\n",
       "      <th>CholesterolLDL</th>\n",
       "      <th>CholesterolHDL</th>\n",
       "      <th>CholesterolTriglycerides</th>\n",
       "      <th>MMSE</th>\n",
       "      <th>FunctionalAssessment</th>\n",
       "      <th>ADL</th>\n",
       "      <th>Diagnosis</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Gender</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.016650</td>\n",
       "      <td>0.018421</td>\n",
       "      <td>0.034577</td>\n",
       "      <td>0.018300</td>\n",
       "      <td>0.018113</td>\n",
       "      <td>0.004013</td>\n",
       "      <td>0.002641</td>\n",
       "      <td>0.003880</td>\n",
       "      <td>0.006099</td>\n",
       "      <td>0.030583</td>\n",
       "      <td>0.017506</td>\n",
       "      <td>0.025919</td>\n",
       "      <td>0.001636</td>\n",
       "      <td>0.028537</td>\n",
       "      <td>0.028708</td>\n",
       "      <td>0.003660</td>\n",
       "      <td>0.007070</td>\n",
       "      <td>0.005928</td>\n",
       "      <td>0.004330</td>\n",
       "      <td>0.035795</td>\n",
       "      <td>0.010942</td>\n",
       "      <td>0.007310</td>\n",
       "      <td>0.011657</td>\n",
       "      <td>0.026059</td>\n",
       "      <td>0.009568</td>\n",
       "      <td>0.016271</td>\n",
       "      <td>0.005846</td>\n",
       "      <td>0.012427</td>\n",
       "      <td>0.025330</td>\n",
       "      <td>0.033324</td>\n",
       "      <td>0.003865</td>\n",
       "      <td>0.020975</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Smoking</th>\n",
       "      <td>0.016650</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.045811</td>\n",
       "      <td>0.027955</td>\n",
       "      <td>0.035810</td>\n",
       "      <td>0.039363</td>\n",
       "      <td>0.019178</td>\n",
       "      <td>0.021124</td>\n",
       "      <td>0.020339</td>\n",
       "      <td>0.014763</td>\n",
       "      <td>0.004498</td>\n",
       "      <td>0.028403</td>\n",
       "      <td>0.009977</td>\n",
       "      <td>0.001741</td>\n",
       "      <td>0.018011</td>\n",
       "      <td>0.020060</td>\n",
       "      <td>0.031485</td>\n",
       "      <td>0.009904</td>\n",
       "      <td>0.020437</td>\n",
       "      <td>0.008363</td>\n",
       "      <td>0.010760</td>\n",
       "      <td>0.002048</td>\n",
       "      <td>0.001145</td>\n",
       "      <td>0.024116</td>\n",
       "      <td>0.014112</td>\n",
       "      <td>0.010907</td>\n",
       "      <td>0.007393</td>\n",
       "      <td>0.025567</td>\n",
       "      <td>0.021058</td>\n",
       "      <td>0.002139</td>\n",
       "      <td>0.031879</td>\n",
       "      <td>0.029233</td>\n",
       "      <td>0.004865</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>FamilyHistoryAlzheimers</th>\n",
       "      <td>0.018421</td>\n",
       "      <td>0.045811</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.020783</td>\n",
       "      <td>0.023106</td>\n",
       "      <td>0.000796</td>\n",
       "      <td>0.019184</td>\n",
       "      <td>0.012920</td>\n",
       "      <td>0.028348</td>\n",
       "      <td>0.023558</td>\n",
       "      <td>0.017976</td>\n",
       "      <td>0.035963</td>\n",
       "      <td>0.006839</td>\n",
       "      <td>0.008787</td>\n",
       "      <td>0.022339</td>\n",
       "      <td>0.018784</td>\n",
       "      <td>0.022526</td>\n",
       "      <td>0.032748</td>\n",
       "      <td>0.006446</td>\n",
       "      <td>0.003707</td>\n",
       "      <td>0.014106</td>\n",
       "      <td>0.011261</td>\n",
       "      <td>0.014801</td>\n",
       "      <td>0.006463</td>\n",
       "      <td>0.006060</td>\n",
       "      <td>0.007054</td>\n",
       "      <td>0.011682</td>\n",
       "      <td>0.013581</td>\n",
       "      <td>0.001046</td>\n",
       "      <td>0.015575</td>\n",
       "      <td>0.004650</td>\n",
       "      <td>0.014041</td>\n",
       "      <td>0.032900</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CardiovascularDisease</th>\n",
       "      <td>0.034577</td>\n",
       "      <td>0.027955</td>\n",
       "      <td>0.020783</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.010134</td>\n",
       "      <td>0.006043</td>\n",
       "      <td>0.001342</td>\n",
       "      <td>0.011760</td>\n",
       "      <td>0.031061</td>\n",
       "      <td>0.016803</td>\n",
       "      <td>0.017658</td>\n",
       "      <td>0.025237</td>\n",
       "      <td>0.032343</td>\n",
       "      <td>0.024684</td>\n",
       "      <td>0.010170</td>\n",
       "      <td>0.015284</td>\n",
       "      <td>0.002347</td>\n",
       "      <td>0.007528</td>\n",
       "      <td>0.005467</td>\n",
       "      <td>0.023632</td>\n",
       "      <td>0.003976</td>\n",
       "      <td>0.015220</td>\n",
       "      <td>0.002112</td>\n",
       "      <td>0.013575</td>\n",
       "      <td>0.043662</td>\n",
       "      <td>0.007961</td>\n",
       "      <td>0.038607</td>\n",
       "      <td>0.017681</td>\n",
       "      <td>0.001264</td>\n",
       "      <td>0.025351</td>\n",
       "      <td>0.041270</td>\n",
       "      <td>0.012918</td>\n",
       "      <td>0.031490</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Diabetes</th>\n",
       "      <td>0.018300</td>\n",
       "      <td>0.035810</td>\n",
       "      <td>0.023106</td>\n",
       "      <td>0.010134</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.003310</td>\n",
       "      <td>0.000013</td>\n",
       "      <td>0.000898</td>\n",
       "      <td>0.017280</td>\n",
       "      <td>0.027927</td>\n",
       "      <td>0.004793</td>\n",
       "      <td>0.004494</td>\n",
       "      <td>0.004184</td>\n",
       "      <td>0.001466</td>\n",
       "      <td>0.007644</td>\n",
       "      <td>0.005708</td>\n",
       "      <td>0.019588</td>\n",
       "      <td>0.003059</td>\n",
       "      <td>0.008980</td>\n",
       "      <td>0.000073</td>\n",
       "      <td>0.029880</td>\n",
       "      <td>0.009192</td>\n",
       "      <td>0.023987</td>\n",
       "      <td>0.011518</td>\n",
       "      <td>0.003423</td>\n",
       "      <td>0.048767</td>\n",
       "      <td>0.014744</td>\n",
       "      <td>0.038532</td>\n",
       "      <td>0.044906</td>\n",
       "      <td>0.008905</td>\n",
       "      <td>0.043548</td>\n",
       "      <td>0.022235</td>\n",
       "      <td>0.031508</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Depression</th>\n",
       "      <td>0.018113</td>\n",
       "      <td>0.039363</td>\n",
       "      <td>0.000796</td>\n",
       "      <td>0.006043</td>\n",
       "      <td>0.003310</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.007662</td>\n",
       "      <td>0.032061</td>\n",
       "      <td>0.019039</td>\n",
       "      <td>0.001316</td>\n",
       "      <td>0.001593</td>\n",
       "      <td>0.005764</td>\n",
       "      <td>0.026044</td>\n",
       "      <td>0.017145</td>\n",
       "      <td>0.017822</td>\n",
       "      <td>0.008752</td>\n",
       "      <td>0.005411</td>\n",
       "      <td>0.027573</td>\n",
       "      <td>0.012507</td>\n",
       "      <td>0.008867</td>\n",
       "      <td>0.013533</td>\n",
       "      <td>0.002516</td>\n",
       "      <td>0.022996</td>\n",
       "      <td>0.018864</td>\n",
       "      <td>0.023021</td>\n",
       "      <td>0.010087</td>\n",
       "      <td>0.004796</td>\n",
       "      <td>0.008256</td>\n",
       "      <td>0.043186</td>\n",
       "      <td>0.014020</td>\n",
       "      <td>0.019733</td>\n",
       "      <td>0.006195</td>\n",
       "      <td>0.005893</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>HeadInjury</th>\n",
       "      <td>0.004013</td>\n",
       "      <td>0.019178</td>\n",
       "      <td>0.019184</td>\n",
       "      <td>0.001342</td>\n",
       "      <td>0.000013</td>\n",
       "      <td>0.007662</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.016380</td>\n",
       "      <td>0.021329</td>\n",
       "      <td>0.047649</td>\n",
       "      <td>0.031152</td>\n",
       "      <td>0.033060</td>\n",
       "      <td>0.031417</td>\n",
       "      <td>0.010646</td>\n",
       "      <td>0.000020</td>\n",
       "      <td>0.040337</td>\n",
       "      <td>0.009364</td>\n",
       "      <td>0.008951</td>\n",
       "      <td>0.016288</td>\n",
       "      <td>0.008301</td>\n",
       "      <td>0.025780</td>\n",
       "      <td>0.008163</td>\n",
       "      <td>0.004546</td>\n",
       "      <td>0.000081</td>\n",
       "      <td>0.010430</td>\n",
       "      <td>0.021734</td>\n",
       "      <td>0.026806</td>\n",
       "      <td>0.000685</td>\n",
       "      <td>0.016845</td>\n",
       "      <td>0.006063</td>\n",
       "      <td>0.034655</td>\n",
       "      <td>0.016669</td>\n",
       "      <td>0.021411</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Hypertension</th>\n",
       "      <td>0.002641</td>\n",
       "      <td>0.021124</td>\n",
       "      <td>0.012920</td>\n",
       "      <td>0.011760</td>\n",
       "      <td>0.000898</td>\n",
       "      <td>0.032061</td>\n",
       "      <td>0.016380</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.021130</td>\n",
       "      <td>0.031700</td>\n",
       "      <td>0.008634</td>\n",
       "      <td>0.033567</td>\n",
       "      <td>0.011857</td>\n",
       "      <td>0.002780</td>\n",
       "      <td>0.029931</td>\n",
       "      <td>0.003954</td>\n",
       "      <td>0.012848</td>\n",
       "      <td>0.016950</td>\n",
       "      <td>0.004928</td>\n",
       "      <td>0.006010</td>\n",
       "      <td>0.022081</td>\n",
       "      <td>0.043628</td>\n",
       "      <td>0.038668</td>\n",
       "      <td>0.000843</td>\n",
       "      <td>0.043424</td>\n",
       "      <td>0.024493</td>\n",
       "      <td>0.013892</td>\n",
       "      <td>0.004205</td>\n",
       "      <td>0.011504</td>\n",
       "      <td>0.012079</td>\n",
       "      <td>0.028332</td>\n",
       "      <td>0.018602</td>\n",
       "      <td>0.035080</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MemoryComplaints</th>\n",
       "      <td>0.003880</td>\n",
       "      <td>0.020339</td>\n",
       "      <td>0.028348</td>\n",
       "      <td>0.031061</td>\n",
       "      <td>0.017280</td>\n",
       "      <td>0.019039</td>\n",
       "      <td>0.021329</td>\n",
       "      <td>0.021130</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.009765</td>\n",
       "      <td>0.007749</td>\n",
       "      <td>0.013442</td>\n",
       "      <td>0.030096</td>\n",
       "      <td>0.044151</td>\n",
       "      <td>0.006961</td>\n",
       "      <td>0.012343</td>\n",
       "      <td>0.003687</td>\n",
       "      <td>0.000165</td>\n",
       "      <td>0.029293</td>\n",
       "      <td>0.029418</td>\n",
       "      <td>0.008709</td>\n",
       "      <td>0.012537</td>\n",
       "      <td>0.016807</td>\n",
       "      <td>0.009517</td>\n",
       "      <td>0.006126</td>\n",
       "      <td>0.013821</td>\n",
       "      <td>0.005737</td>\n",
       "      <td>0.030898</td>\n",
       "      <td>0.014484</td>\n",
       "      <td>0.007652</td>\n",
       "      <td>0.002320</td>\n",
       "      <td>0.037511</td>\n",
       "      <td>0.306742</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BehavioralProblems</th>\n",
       "      <td>0.006099</td>\n",
       "      <td>0.014763</td>\n",
       "      <td>0.023558</td>\n",
       "      <td>0.016803</td>\n",
       "      <td>0.027927</td>\n",
       "      <td>0.001316</td>\n",
       "      <td>0.047649</td>\n",
       "      <td>0.031700</td>\n",
       "      <td>0.009765</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.022676</td>\n",
       "      <td>0.022154</td>\n",
       "      <td>0.002892</td>\n",
       "      <td>0.019174</td>\n",
       "      <td>0.023374</td>\n",
       "      <td>0.038973</td>\n",
       "      <td>0.019363</td>\n",
       "      <td>0.010473</td>\n",
       "      <td>0.035276</td>\n",
       "      <td>0.013657</td>\n",
       "      <td>0.014253</td>\n",
       "      <td>0.014033</td>\n",
       "      <td>0.019899</td>\n",
       "      <td>0.012787</td>\n",
       "      <td>0.016682</td>\n",
       "      <td>0.006505</td>\n",
       "      <td>0.002926</td>\n",
       "      <td>0.027170</td>\n",
       "      <td>0.010310</td>\n",
       "      <td>0.025408</td>\n",
       "      <td>0.021941</td>\n",
       "      <td>0.043376</td>\n",
       "      <td>0.224350</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Confusion</th>\n",
       "      <td>0.030583</td>\n",
       "      <td>0.004498</td>\n",
       "      <td>0.017976</td>\n",
       "      <td>0.017658</td>\n",
       "      <td>0.004793</td>\n",
       "      <td>0.001593</td>\n",
       "      <td>0.031152</td>\n",
       "      <td>0.008634</td>\n",
       "      <td>0.007749</td>\n",
       "      <td>0.022676</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.007034</td>\n",
       "      <td>0.001573</td>\n",
       "      <td>0.022003</td>\n",
       "      <td>0.010100</td>\n",
       "      <td>0.009002</td>\n",
       "      <td>0.022431</td>\n",
       "      <td>0.008168</td>\n",
       "      <td>0.015859</td>\n",
       "      <td>0.032798</td>\n",
       "      <td>0.009397</td>\n",
       "      <td>0.002628</td>\n",
       "      <td>0.013508</td>\n",
       "      <td>0.008404</td>\n",
       "      <td>0.016567</td>\n",
       "      <td>0.037390</td>\n",
       "      <td>0.020629</td>\n",
       "      <td>0.005254</td>\n",
       "      <td>0.013631</td>\n",
       "      <td>0.003763</td>\n",
       "      <td>0.023118</td>\n",
       "      <td>0.012373</td>\n",
       "      <td>0.019186</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Disorientation</th>\n",
       "      <td>0.017506</td>\n",
       "      <td>0.028403</td>\n",
       "      <td>0.035963</td>\n",
       "      <td>0.025237</td>\n",
       "      <td>0.004494</td>\n",
       "      <td>0.005764</td>\n",
       "      <td>0.033060</td>\n",
       "      <td>0.033567</td>\n",
       "      <td>0.013442</td>\n",
       "      <td>0.022154</td>\n",
       "      <td>0.007034</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.022311</td>\n",
       "      <td>0.020767</td>\n",
       "      <td>0.032013</td>\n",
       "      <td>0.027523</td>\n",
       "      <td>0.018132</td>\n",
       "      <td>0.017568</td>\n",
       "      <td>0.031840</td>\n",
       "      <td>0.015521</td>\n",
       "      <td>0.020407</td>\n",
       "      <td>0.026271</td>\n",
       "      <td>0.019467</td>\n",
       "      <td>0.037500</td>\n",
       "      <td>0.015098</td>\n",
       "      <td>0.025313</td>\n",
       "      <td>0.027335</td>\n",
       "      <td>0.021054</td>\n",
       "      <td>0.013222</td>\n",
       "      <td>0.036715</td>\n",
       "      <td>0.007193</td>\n",
       "      <td>0.002256</td>\n",
       "      <td>0.024648</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PersonalityChanges</th>\n",
       "      <td>0.025919</td>\n",
       "      <td>0.009977</td>\n",
       "      <td>0.006839</td>\n",
       "      <td>0.032343</td>\n",
       "      <td>0.004184</td>\n",
       "      <td>0.026044</td>\n",
       "      <td>0.031417</td>\n",
       "      <td>0.011857</td>\n",
       "      <td>0.030096</td>\n",
       "      <td>0.002892</td>\n",
       "      <td>0.001573</td>\n",
       "      <td>0.022311</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.037686</td>\n",
       "      <td>0.013311</td>\n",
       "      <td>0.009470</td>\n",
       "      <td>0.030035</td>\n",
       "      <td>0.019950</td>\n",
       "      <td>0.015901</td>\n",
       "      <td>0.019117</td>\n",
       "      <td>0.013629</td>\n",
       "      <td>0.029087</td>\n",
       "      <td>0.016892</td>\n",
       "      <td>0.012170</td>\n",
       "      <td>0.001501</td>\n",
       "      <td>0.017469</td>\n",
       "      <td>0.016120</td>\n",
       "      <td>0.018553</td>\n",
       "      <td>0.017733</td>\n",
       "      <td>0.034492</td>\n",
       "      <td>0.024260</td>\n",
       "      <td>0.016128</td>\n",
       "      <td>0.020627</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>DifficultyCompletingTasks</th>\n",
       "      <td>0.001636</td>\n",
       "      <td>0.001741</td>\n",
       "      <td>0.008787</td>\n",
       "      <td>0.024684</td>\n",
       "      <td>0.001466</td>\n",
       "      <td>0.017145</td>\n",
       "      <td>0.010646</td>\n",
       "      <td>0.002780</td>\n",
       "      <td>0.044151</td>\n",
       "      <td>0.019174</td>\n",
       "      <td>0.022003</td>\n",
       "      <td>0.020767</td>\n",
       "      <td>0.037686</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.013386</td>\n",
       "      <td>0.013900</td>\n",
       "      <td>0.019363</td>\n",
       "      <td>0.013033</td>\n",
       "      <td>0.039400</td>\n",
       "      <td>0.002712</td>\n",
       "      <td>0.031169</td>\n",
       "      <td>0.045737</td>\n",
       "      <td>0.011237</td>\n",
       "      <td>0.003598</td>\n",
       "      <td>0.026220</td>\n",
       "      <td>0.017936</td>\n",
       "      <td>0.011552</td>\n",
       "      <td>0.056947</td>\n",
       "      <td>0.041899</td>\n",
       "      <td>0.003294</td>\n",
       "      <td>0.019805</td>\n",
       "      <td>0.025646</td>\n",
       "      <td>0.009069</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Forgetfulness</th>\n",
       "      <td>0.028537</td>\n",
       "      <td>0.018011</td>\n",
       "      <td>0.022339</td>\n",
       "      <td>0.010170</td>\n",
       "      <td>0.007644</td>\n",
       "      <td>0.017822</td>\n",
       "      <td>0.000020</td>\n",
       "      <td>0.029931</td>\n",
       "      <td>0.006961</td>\n",
       "      <td>0.023374</td>\n",
       "      <td>0.010100</td>\n",
       "      <td>0.032013</td>\n",
       "      <td>0.013311</td>\n",
       "      <td>0.013386</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.019279</td>\n",
       "      <td>0.034619</td>\n",
       "      <td>0.008685</td>\n",
       "      <td>0.071131</td>\n",
       "      <td>0.024121</td>\n",
       "      <td>0.009837</td>\n",
       "      <td>0.006175</td>\n",
       "      <td>0.002930</td>\n",
       "      <td>0.011357</td>\n",
       "      <td>0.005857</td>\n",
       "      <td>0.025326</td>\n",
       "      <td>0.000588</td>\n",
       "      <td>0.016662</td>\n",
       "      <td>0.003526</td>\n",
       "      <td>0.011848</td>\n",
       "      <td>0.019387</td>\n",
       "      <td>0.002595</td>\n",
       "      <td>0.000354</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Age</th>\n",
       "      <td>0.028708</td>\n",
       "      <td>0.020060</td>\n",
       "      <td>0.018784</td>\n",
       "      <td>0.015284</td>\n",
       "      <td>0.005708</td>\n",
       "      <td>0.008752</td>\n",
       "      <td>0.040337</td>\n",
       "      <td>0.003954</td>\n",
       "      <td>0.012343</td>\n",
       "      <td>0.038973</td>\n",
       "      <td>0.009002</td>\n",
       "      <td>0.027523</td>\n",
       "      <td>0.009470</td>\n",
       "      <td>0.013900</td>\n",
       "      <td>0.019279</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.027745</td>\n",
       "      <td>0.060560</td>\n",
       "      <td>0.015677</td>\n",
       "      <td>0.007323</td>\n",
       "      <td>0.010249</td>\n",
       "      <td>0.023386</td>\n",
       "      <td>0.049139</td>\n",
       "      <td>0.005324</td>\n",
       "      <td>0.004462</td>\n",
       "      <td>0.000392</td>\n",
       "      <td>0.003588</td>\n",
       "      <td>0.006803</td>\n",
       "      <td>0.003062</td>\n",
       "      <td>0.004235</td>\n",
       "      <td>0.005508</td>\n",
       "      <td>0.038658</td>\n",
       "      <td>0.005488</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ethnicity</th>\n",
       "      <td>0.003660</td>\n",
       "      <td>0.031485</td>\n",
       "      <td>0.022526</td>\n",
       "      <td>0.002347</td>\n",
       "      <td>0.019588</td>\n",
       "      <td>0.005411</td>\n",
       "      <td>0.009364</td>\n",
       "      <td>0.012848</td>\n",
       "      <td>0.003687</td>\n",
       "      <td>0.019363</td>\n",
       "      <td>0.022431</td>\n",
       "      <td>0.018132</td>\n",
       "      <td>0.030035</td>\n",
       "      <td>0.019363</td>\n",
       "      <td>0.034619</td>\n",
       "      <td>0.027745</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.026516</td>\n",
       "      <td>0.003176</td>\n",
       "      <td>0.008363</td>\n",
       "      <td>0.020498</td>\n",
       "      <td>0.018184</td>\n",
       "      <td>0.029304</td>\n",
       "      <td>0.027086</td>\n",
       "      <td>0.010310</td>\n",
       "      <td>0.011757</td>\n",
       "      <td>0.007907</td>\n",
       "      <td>0.021828</td>\n",
       "      <td>0.007173</td>\n",
       "      <td>0.012504</td>\n",
       "      <td>0.004704</td>\n",
       "      <td>0.010475</td>\n",
       "      <td>0.014782</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>EducationLevel</th>\n",
       "      <td>0.007070</td>\n",
       "      <td>0.009904</td>\n",
       "      <td>0.032748</td>\n",
       "      <td>0.007528</td>\n",
       "      <td>0.003059</td>\n",
       "      <td>0.027573</td>\n",
       "      <td>0.008951</td>\n",
       "      <td>0.016950</td>\n",
       "      <td>0.000165</td>\n",
       "      <td>0.010473</td>\n",
       "      <td>0.008168</td>\n",
       "      <td>0.017568</td>\n",
       "      <td>0.019950</td>\n",
       "      <td>0.013033</td>\n",
       "      <td>0.008685</td>\n",
       "      <td>0.060560</td>\n",
       "      <td>0.026516</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.023514</td>\n",
       "      <td>0.012646</td>\n",
       "      <td>0.016703</td>\n",
       "      <td>0.017412</td>\n",
       "      <td>0.020248</td>\n",
       "      <td>0.016782</td>\n",
       "      <td>0.002553</td>\n",
       "      <td>0.041598</td>\n",
       "      <td>0.050504</td>\n",
       "      <td>0.008125</td>\n",
       "      <td>0.025763</td>\n",
       "      <td>0.026090</td>\n",
       "      <td>0.020269</td>\n",
       "      <td>0.031934</td>\n",
       "      <td>0.043966</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BMI</th>\n",
       "      <td>0.005928</td>\n",
       "      <td>0.020437</td>\n",
       "      <td>0.006446</td>\n",
       "      <td>0.005467</td>\n",
       "      <td>0.008980</td>\n",
       "      <td>0.012507</td>\n",
       "      <td>0.016288</td>\n",
       "      <td>0.004928</td>\n",
       "      <td>0.029293</td>\n",
       "      <td>0.035276</td>\n",
       "      <td>0.015859</td>\n",
       "      <td>0.031840</td>\n",
       "      <td>0.015901</td>\n",
       "      <td>0.039400</td>\n",
       "      <td>0.071131</td>\n",
       "      <td>0.015677</td>\n",
       "      <td>0.003176</td>\n",
       "      <td>0.023514</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.008997</td>\n",
       "      <td>0.000742</td>\n",
       "      <td>0.019922</td>\n",
       "      <td>0.005975</td>\n",
       "      <td>0.019275</td>\n",
       "      <td>0.002524</td>\n",
       "      <td>0.001082</td>\n",
       "      <td>0.023684</td>\n",
       "      <td>0.038605</td>\n",
       "      <td>0.018001</td>\n",
       "      <td>0.003477</td>\n",
       "      <td>0.030501</td>\n",
       "      <td>0.009788</td>\n",
       "      <td>0.026343</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AlcoholConsumption</th>\n",
       "      <td>0.004330</td>\n",
       "      <td>0.008363</td>\n",
       "      <td>0.003707</td>\n",
       "      <td>0.023632</td>\n",
       "      <td>0.000073</td>\n",
       "      <td>0.008867</td>\n",
       "      <td>0.008301</td>\n",
       "      <td>0.006010</td>\n",
       "      <td>0.029418</td>\n",
       "      <td>0.013657</td>\n",
       "      <td>0.032798</td>\n",
       "      <td>0.015521</td>\n",
       "      <td>0.019117</td>\n",
       "      <td>0.002712</td>\n",
       "      <td>0.024121</td>\n",
       "      <td>0.007323</td>\n",
       "      <td>0.008363</td>\n",
       "      <td>0.012646</td>\n",
       "      <td>0.008997</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.021696</td>\n",
       "      <td>0.020117</td>\n",
       "      <td>0.003873</td>\n",
       "      <td>0.030070</td>\n",
       "      <td>0.008909</td>\n",
       "      <td>0.033944</td>\n",
       "      <td>0.017042</td>\n",
       "      <td>0.001925</td>\n",
       "      <td>0.023362</td>\n",
       "      <td>0.011424</td>\n",
       "      <td>0.016483</td>\n",
       "      <td>0.008250</td>\n",
       "      <td>0.007618</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PhysicalActivity</th>\n",
       "      <td>0.035795</td>\n",
       "      <td>0.010760</td>\n",
       "      <td>0.014106</td>\n",
       "      <td>0.003976</td>\n",
       "      <td>0.029880</td>\n",
       "      <td>0.013533</td>\n",
       "      <td>0.025780</td>\n",
       "      <td>0.022081</td>\n",
       "      <td>0.008709</td>\n",
       "      <td>0.014253</td>\n",
       "      <td>0.009397</td>\n",
       "      <td>0.020407</td>\n",
       "      <td>0.013629</td>\n",
       "      <td>0.031169</td>\n",
       "      <td>0.009837</td>\n",
       "      <td>0.010249</td>\n",
       "      <td>0.020498</td>\n",
       "      <td>0.016703</td>\n",
       "      <td>0.000742</td>\n",
       "      <td>0.021696</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.011085</td>\n",
       "      <td>0.001823</td>\n",
       "      <td>0.004811</td>\n",
       "      <td>0.010555</td>\n",
       "      <td>0.014335</td>\n",
       "      <td>0.017789</td>\n",
       "      <td>0.001993</td>\n",
       "      <td>0.027416</td>\n",
       "      <td>0.008342</td>\n",
       "      <td>0.002419</td>\n",
       "      <td>0.013324</td>\n",
       "      <td>0.005945</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>DietQuality</th>\n",
       "      <td>0.010942</td>\n",
       "      <td>0.002048</td>\n",
       "      <td>0.011261</td>\n",
       "      <td>0.015220</td>\n",
       "      <td>0.009192</td>\n",
       "      <td>0.002516</td>\n",
       "      <td>0.008163</td>\n",
       "      <td>0.043628</td>\n",
       "      <td>0.012537</td>\n",
       "      <td>0.014033</td>\n",
       "      <td>0.002628</td>\n",
       "      <td>0.026271</td>\n",
       "      <td>0.029087</td>\n",
       "      <td>0.045737</td>\n",
       "      <td>0.006175</td>\n",
       "      <td>0.023386</td>\n",
       "      <td>0.018184</td>\n",
       "      <td>0.017412</td>\n",
       "      <td>0.019922</td>\n",
       "      <td>0.020117</td>\n",
       "      <td>0.011085</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.051295</td>\n",
       "      <td>0.006031</td>\n",
       "      <td>0.009539</td>\n",
       "      <td>0.016790</td>\n",
       "      <td>0.023698</td>\n",
       "      <td>0.008659</td>\n",
       "      <td>0.034734</td>\n",
       "      <td>0.021636</td>\n",
       "      <td>0.009700</td>\n",
       "      <td>0.007888</td>\n",
       "      <td>0.008506</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SleepQuality</th>\n",
       "      <td>0.007310</td>\n",
       "      <td>0.001145</td>\n",
       "      <td>0.014801</td>\n",
       "      <td>0.002112</td>\n",
       "      <td>0.023987</td>\n",
       "      <td>0.022996</td>\n",
       "      <td>0.004546</td>\n",
       "      <td>0.038668</td>\n",
       "      <td>0.016807</td>\n",
       "      <td>0.019899</td>\n",
       "      <td>0.013508</td>\n",
       "      <td>0.019467</td>\n",
       "      <td>0.016892</td>\n",
       "      <td>0.011237</td>\n",
       "      <td>0.002930</td>\n",
       "      <td>0.049139</td>\n",
       "      <td>0.029304</td>\n",
       "      <td>0.020248</td>\n",
       "      <td>0.005975</td>\n",
       "      <td>0.003873</td>\n",
       "      <td>0.001823</td>\n",
       "      <td>0.051295</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.027887</td>\n",
       "      <td>0.010797</td>\n",
       "      <td>0.006879</td>\n",
       "      <td>0.006751</td>\n",
       "      <td>0.015453</td>\n",
       "      <td>0.024004</td>\n",
       "      <td>0.012506</td>\n",
       "      <td>0.029589</td>\n",
       "      <td>0.014535</td>\n",
       "      <td>0.056548</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SystolicBP</th>\n",
       "      <td>0.011657</td>\n",
       "      <td>0.024116</td>\n",
       "      <td>0.006463</td>\n",
       "      <td>0.013575</td>\n",
       "      <td>0.011518</td>\n",
       "      <td>0.018864</td>\n",
       "      <td>0.000081</td>\n",
       "      <td>0.000843</td>\n",
       "      <td>0.009517</td>\n",
       "      <td>0.012787</td>\n",
       "      <td>0.008404</td>\n",
       "      <td>0.037500</td>\n",
       "      <td>0.012170</td>\n",
       "      <td>0.003598</td>\n",
       "      <td>0.011357</td>\n",
       "      <td>0.005324</td>\n",
       "      <td>0.027086</td>\n",
       "      <td>0.016782</td>\n",
       "      <td>0.019275</td>\n",
       "      <td>0.030070</td>\n",
       "      <td>0.004811</td>\n",
       "      <td>0.006031</td>\n",
       "      <td>0.027887</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.002590</td>\n",
       "      <td>0.018537</td>\n",
       "      <td>0.007295</td>\n",
       "      <td>0.002947</td>\n",
       "      <td>0.034824</td>\n",
       "      <td>0.003548</td>\n",
       "      <td>0.013161</td>\n",
       "      <td>0.015447</td>\n",
       "      <td>0.015615</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>DiastolicBP</th>\n",
       "      <td>0.026059</td>\n",
       "      <td>0.014112</td>\n",
       "      <td>0.006060</td>\n",
       "      <td>0.043662</td>\n",
       "      <td>0.003423</td>\n",
       "      <td>0.023021</td>\n",
       "      <td>0.010430</td>\n",
       "      <td>0.043424</td>\n",
       "      <td>0.006126</td>\n",
       "      <td>0.016682</td>\n",
       "      <td>0.016567</td>\n",
       "      <td>0.015098</td>\n",
       "      <td>0.001501</td>\n",
       "      <td>0.026220</td>\n",
       "      <td>0.005857</td>\n",
       "      <td>0.004462</td>\n",
       "      <td>0.010310</td>\n",
       "      <td>0.002553</td>\n",
       "      <td>0.002524</td>\n",
       "      <td>0.008909</td>\n",
       "      <td>0.010555</td>\n",
       "      <td>0.009539</td>\n",
       "      <td>0.010797</td>\n",
       "      <td>0.002590</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.015249</td>\n",
       "      <td>0.015542</td>\n",
       "      <td>0.008180</td>\n",
       "      <td>0.007928</td>\n",
       "      <td>0.028586</td>\n",
       "      <td>0.031485</td>\n",
       "      <td>0.004836</td>\n",
       "      <td>0.005293</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CholesterolTotal</th>\n",
       "      <td>0.009568</td>\n",
       "      <td>0.010907</td>\n",
       "      <td>0.007054</td>\n",
       "      <td>0.007961</td>\n",
       "      <td>0.048767</td>\n",
       "      <td>0.010087</td>\n",
       "      <td>0.021734</td>\n",
       "      <td>0.024493</td>\n",
       "      <td>0.013821</td>\n",
       "      <td>0.006505</td>\n",
       "      <td>0.037390</td>\n",
       "      <td>0.025313</td>\n",
       "      <td>0.017469</td>\n",
       "      <td>0.017936</td>\n",
       "      <td>0.025326</td>\n",
       "      <td>0.000392</td>\n",
       "      <td>0.011757</td>\n",
       "      <td>0.041598</td>\n",
       "      <td>0.001082</td>\n",
       "      <td>0.033944</td>\n",
       "      <td>0.014335</td>\n",
       "      <td>0.016790</td>\n",
       "      <td>0.006879</td>\n",
       "      <td>0.018537</td>\n",
       "      <td>0.015249</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.010336</td>\n",
       "      <td>0.010116</td>\n",
       "      <td>0.001959</td>\n",
       "      <td>0.013638</td>\n",
       "      <td>0.005345</td>\n",
       "      <td>0.000775</td>\n",
       "      <td>0.006394</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CholesterolLDL</th>\n",
       "      <td>0.016271</td>\n",
       "      <td>0.007393</td>\n",
       "      <td>0.011682</td>\n",
       "      <td>0.038607</td>\n",
       "      <td>0.014744</td>\n",
       "      <td>0.004796</td>\n",
       "      <td>0.026806</td>\n",
       "      <td>0.013892</td>\n",
       "      <td>0.005737</td>\n",
       "      <td>0.002926</td>\n",
       "      <td>0.020629</td>\n",
       "      <td>0.027335</td>\n",
       "      <td>0.016120</td>\n",
       "      <td>0.011552</td>\n",
       "      <td>0.000588</td>\n",
       "      <td>0.003588</td>\n",
       "      <td>0.007907</td>\n",
       "      <td>0.050504</td>\n",
       "      <td>0.023684</td>\n",
       "      <td>0.017042</td>\n",
       "      <td>0.017789</td>\n",
       "      <td>0.023698</td>\n",
       "      <td>0.006751</td>\n",
       "      <td>0.007295</td>\n",
       "      <td>0.015542</td>\n",
       "      <td>0.010336</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.037148</td>\n",
       "      <td>0.005582</td>\n",
       "      <td>0.025383</td>\n",
       "      <td>0.016215</td>\n",
       "      <td>0.019380</td>\n",
       "      <td>0.031976</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CholesterolHDL</th>\n",
       "      <td>0.005846</td>\n",
       "      <td>0.025567</td>\n",
       "      <td>0.013581</td>\n",
       "      <td>0.017681</td>\n",
       "      <td>0.038532</td>\n",
       "      <td>0.008256</td>\n",
       "      <td>0.000685</td>\n",
       "      <td>0.004205</td>\n",
       "      <td>0.030898</td>\n",
       "      <td>0.027170</td>\n",
       "      <td>0.005254</td>\n",
       "      <td>0.021054</td>\n",
       "      <td>0.018553</td>\n",
       "      <td>0.056947</td>\n",
       "      <td>0.016662</td>\n",
       "      <td>0.006803</td>\n",
       "      <td>0.021828</td>\n",
       "      <td>0.008125</td>\n",
       "      <td>0.038605</td>\n",
       "      <td>0.001925</td>\n",
       "      <td>0.001993</td>\n",
       "      <td>0.008659</td>\n",
       "      <td>0.015453</td>\n",
       "      <td>0.002947</td>\n",
       "      <td>0.008180</td>\n",
       "      <td>0.010116</td>\n",
       "      <td>0.037148</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.015235</td>\n",
       "      <td>0.005218</td>\n",
       "      <td>0.003450</td>\n",
       "      <td>0.005252</td>\n",
       "      <td>0.042584</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CholesterolTriglycerides</th>\n",
       "      <td>0.012427</td>\n",
       "      <td>0.021058</td>\n",
       "      <td>0.001046</td>\n",
       "      <td>0.001264</td>\n",
       "      <td>0.044906</td>\n",
       "      <td>0.043186</td>\n",
       "      <td>0.016845</td>\n",
       "      <td>0.011504</td>\n",
       "      <td>0.014484</td>\n",
       "      <td>0.010310</td>\n",
       "      <td>0.013631</td>\n",
       "      <td>0.013222</td>\n",
       "      <td>0.017733</td>\n",
       "      <td>0.041899</td>\n",
       "      <td>0.003526</td>\n",
       "      <td>0.003062</td>\n",
       "      <td>0.007173</td>\n",
       "      <td>0.025763</td>\n",
       "      <td>0.018001</td>\n",
       "      <td>0.023362</td>\n",
       "      <td>0.027416</td>\n",
       "      <td>0.034734</td>\n",
       "      <td>0.024004</td>\n",
       "      <td>0.034824</td>\n",
       "      <td>0.007928</td>\n",
       "      <td>0.001959</td>\n",
       "      <td>0.005582</td>\n",
       "      <td>0.015235</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.007615</td>\n",
       "      <td>0.009207</td>\n",
       "      <td>0.023546</td>\n",
       "      <td>0.022672</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MMSE</th>\n",
       "      <td>0.025330</td>\n",
       "      <td>0.002139</td>\n",
       "      <td>0.015575</td>\n",
       "      <td>0.025351</td>\n",
       "      <td>0.008905</td>\n",
       "      <td>0.014020</td>\n",
       "      <td>0.006063</td>\n",
       "      <td>0.012079</td>\n",
       "      <td>0.007652</td>\n",
       "      <td>0.025408</td>\n",
       "      <td>0.003763</td>\n",
       "      <td>0.036715</td>\n",
       "      <td>0.034492</td>\n",
       "      <td>0.003294</td>\n",
       "      <td>0.011848</td>\n",
       "      <td>0.004235</td>\n",
       "      <td>0.012504</td>\n",
       "      <td>0.026090</td>\n",
       "      <td>0.003477</td>\n",
       "      <td>0.011424</td>\n",
       "      <td>0.008342</td>\n",
       "      <td>0.021636</td>\n",
       "      <td>0.012506</td>\n",
       "      <td>0.003548</td>\n",
       "      <td>0.028586</td>\n",
       "      <td>0.013638</td>\n",
       "      <td>0.025383</td>\n",
       "      <td>0.005218</td>\n",
       "      <td>0.007615</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.024932</td>\n",
       "      <td>0.003359</td>\n",
       "      <td>0.237126</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>FunctionalAssessment</th>\n",
       "      <td>0.033324</td>\n",
       "      <td>0.031879</td>\n",
       "      <td>0.004650</td>\n",
       "      <td>0.041270</td>\n",
       "      <td>0.043548</td>\n",
       "      <td>0.019733</td>\n",
       "      <td>0.034655</td>\n",
       "      <td>0.028332</td>\n",
       "      <td>0.002320</td>\n",
       "      <td>0.021941</td>\n",
       "      <td>0.023118</td>\n",
       "      <td>0.007193</td>\n",
       "      <td>0.024260</td>\n",
       "      <td>0.019805</td>\n",
       "      <td>0.019387</td>\n",
       "      <td>0.005508</td>\n",
       "      <td>0.004704</td>\n",
       "      <td>0.020269</td>\n",
       "      <td>0.030501</td>\n",
       "      <td>0.016483</td>\n",
       "      <td>0.002419</td>\n",
       "      <td>0.009700</td>\n",
       "      <td>0.029589</td>\n",
       "      <td>0.013161</td>\n",
       "      <td>0.031485</td>\n",
       "      <td>0.005345</td>\n",
       "      <td>0.016215</td>\n",
       "      <td>0.003450</td>\n",
       "      <td>0.009207</td>\n",
       "      <td>0.024932</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.053904</td>\n",
       "      <td>0.364898</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ADL</th>\n",
       "      <td>0.003865</td>\n",
       "      <td>0.029233</td>\n",
       "      <td>0.014041</td>\n",
       "      <td>0.012918</td>\n",
       "      <td>0.022235</td>\n",
       "      <td>0.006195</td>\n",
       "      <td>0.016669</td>\n",
       "      <td>0.018602</td>\n",
       "      <td>0.037511</td>\n",
       "      <td>0.043376</td>\n",
       "      <td>0.012373</td>\n",
       "      <td>0.002256</td>\n",
       "      <td>0.016128</td>\n",
       "      <td>0.025646</td>\n",
       "      <td>0.002595</td>\n",
       "      <td>0.038658</td>\n",
       "      <td>0.010475</td>\n",
       "      <td>0.031934</td>\n",
       "      <td>0.009788</td>\n",
       "      <td>0.008250</td>\n",
       "      <td>0.013324</td>\n",
       "      <td>0.007888</td>\n",
       "      <td>0.014535</td>\n",
       "      <td>0.015447</td>\n",
       "      <td>0.004836</td>\n",
       "      <td>0.000775</td>\n",
       "      <td>0.019380</td>\n",
       "      <td>0.005252</td>\n",
       "      <td>0.023546</td>\n",
       "      <td>0.003359</td>\n",
       "      <td>0.053904</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.332346</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Diagnosis</th>\n",
       "      <td>0.020975</td>\n",
       "      <td>0.004865</td>\n",
       "      <td>0.032900</td>\n",
       "      <td>0.031490</td>\n",
       "      <td>0.031508</td>\n",
       "      <td>0.005893</td>\n",
       "      <td>0.021411</td>\n",
       "      <td>0.035080</td>\n",
       "      <td>0.306742</td>\n",
       "      <td>0.224350</td>\n",
       "      <td>0.019186</td>\n",
       "      <td>0.024648</td>\n",
       "      <td>0.020627</td>\n",
       "      <td>0.009069</td>\n",
       "      <td>0.000354</td>\n",
       "      <td>0.005488</td>\n",
       "      <td>0.014782</td>\n",
       "      <td>0.043966</td>\n",
       "      <td>0.026343</td>\n",
       "      <td>0.007618</td>\n",
       "      <td>0.005945</td>\n",
       "      <td>0.008506</td>\n",
       "      <td>0.056548</td>\n",
       "      <td>0.015615</td>\n",
       "      <td>0.005293</td>\n",
       "      <td>0.006394</td>\n",
       "      <td>0.031976</td>\n",
       "      <td>0.042584</td>\n",
       "      <td>0.022672</td>\n",
       "      <td>0.237126</td>\n",
       "      <td>0.364898</td>\n",
       "      <td>0.332346</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                            Gender  Smoking  FamilyHistoryAlzheimers  \\\n",
       "Gender                    1.000000 0.016650                 0.018421   \n",
       "Smoking                   0.016650 1.000000                 0.045811   \n",
       "FamilyHistoryAlzheimers   0.018421 0.045811                 1.000000   \n",
       "CardiovascularDisease     0.034577 0.027955                 0.020783   \n",
       "Diabetes                  0.018300 0.035810                 0.023106   \n",
       "Depression                0.018113 0.039363                 0.000796   \n",
       "HeadInjury                0.004013 0.019178                 0.019184   \n",
       "Hypertension              0.002641 0.021124                 0.012920   \n",
       "MemoryComplaints          0.003880 0.020339                 0.028348   \n",
       "BehavioralProblems        0.006099 0.014763                 0.023558   \n",
       "Confusion                 0.030583 0.004498                 0.017976   \n",
       "Disorientation            0.017506 0.028403                 0.035963   \n",
       "PersonalityChanges        0.025919 0.009977                 0.006839   \n",
       "DifficultyCompletingTasks 0.001636 0.001741                 0.008787   \n",
       "Forgetfulness             0.028537 0.018011                 0.022339   \n",
       "Age                       0.028708 0.020060                 0.018784   \n",
       "Ethnicity                 0.003660 0.031485                 0.022526   \n",
       "EducationLevel            0.007070 0.009904                 0.032748   \n",
       "BMI                       0.005928 0.020437                 0.006446   \n",
       "AlcoholConsumption        0.004330 0.008363                 0.003707   \n",
       "PhysicalActivity          0.035795 0.010760                 0.014106   \n",
       "DietQuality               0.010942 0.002048                 0.011261   \n",
       "SleepQuality              0.007310 0.001145                 0.014801   \n",
       "SystolicBP                0.011657 0.024116                 0.006463   \n",
       "DiastolicBP               0.026059 0.014112                 0.006060   \n",
       "CholesterolTotal          0.009568 0.010907                 0.007054   \n",
       "CholesterolLDL            0.016271 0.007393                 0.011682   \n",
       "CholesterolHDL            0.005846 0.025567                 0.013581   \n",
       "CholesterolTriglycerides  0.012427 0.021058                 0.001046   \n",
       "MMSE                      0.025330 0.002139                 0.015575   \n",
       "FunctionalAssessment      0.033324 0.031879                 0.004650   \n",
       "ADL                       0.003865 0.029233                 0.014041   \n",
       "Diagnosis                 0.020975 0.004865                 0.032900   \n",
       "\n",
       "                           CardiovascularDisease  Diabetes  Depression  \\\n",
       "Gender                                  0.034577  0.018300    0.018113   \n",
       "Smoking                                 0.027955  0.035810    0.039363   \n",
       "FamilyHistoryAlzheimers                 0.020783  0.023106    0.000796   \n",
       "CardiovascularDisease                   1.000000  0.010134    0.006043   \n",
       "Diabetes                                0.010134  1.000000    0.003310   \n",
       "Depression                              0.006043  0.003310    1.000000   \n",
       "HeadInjury                              0.001342  0.000013    0.007662   \n",
       "Hypertension                            0.011760  0.000898    0.032061   \n",
       "MemoryComplaints                        0.031061  0.017280    0.019039   \n",
       "BehavioralProblems                      0.016803  0.027927    0.001316   \n",
       "Confusion                               0.017658  0.004793    0.001593   \n",
       "Disorientation                          0.025237  0.004494    0.005764   \n",
       "PersonalityChanges                      0.032343  0.004184    0.026044   \n",
       "DifficultyCompletingTasks               0.024684  0.001466    0.017145   \n",
       "Forgetfulness                           0.010170  0.007644    0.017822   \n",
       "Age                                     0.015284  0.005708    0.008752   \n",
       "Ethnicity                               0.002347  0.019588    0.005411   \n",
       "EducationLevel                          0.007528  0.003059    0.027573   \n",
       "BMI                                     0.005467  0.008980    0.012507   \n",
       "AlcoholConsumption                      0.023632  0.000073    0.008867   \n",
       "PhysicalActivity                        0.003976  0.029880    0.013533   \n",
       "DietQuality                             0.015220  0.009192    0.002516   \n",
       "SleepQuality                            0.002112  0.023987    0.022996   \n",
       "SystolicBP                              0.013575  0.011518    0.018864   \n",
       "DiastolicBP                             0.043662  0.003423    0.023021   \n",
       "CholesterolTotal                        0.007961  0.048767    0.010087   \n",
       "CholesterolLDL                          0.038607  0.014744    0.004796   \n",
       "CholesterolHDL                          0.017681  0.038532    0.008256   \n",
       "CholesterolTriglycerides                0.001264  0.044906    0.043186   \n",
       "MMSE                                    0.025351  0.008905    0.014020   \n",
       "FunctionalAssessment                    0.041270  0.043548    0.019733   \n",
       "ADL                                     0.012918  0.022235    0.006195   \n",
       "Diagnosis                               0.031490  0.031508    0.005893   \n",
       "\n",
       "                           HeadInjury  Hypertension  MemoryComplaints  \\\n",
       "Gender                       0.004013      0.002641          0.003880   \n",
       "Smoking                      0.019178      0.021124          0.020339   \n",
       "FamilyHistoryAlzheimers      0.019184      0.012920          0.028348   \n",
       "CardiovascularDisease        0.001342      0.011760          0.031061   \n",
       "Diabetes                     0.000013      0.000898          0.017280   \n",
       "Depression                   0.007662      0.032061          0.019039   \n",
       "HeadInjury                   1.000000      0.016380          0.021329   \n",
       "Hypertension                 0.016380      1.000000          0.021130   \n",
       "MemoryComplaints             0.021329      0.021130          1.000000   \n",
       "BehavioralProblems           0.047649      0.031700          0.009765   \n",
       "Confusion                    0.031152      0.008634          0.007749   \n",
       "Disorientation               0.033060      0.033567          0.013442   \n",
       "PersonalityChanges           0.031417      0.011857          0.030096   \n",
       "DifficultyCompletingTasks    0.010646      0.002780          0.044151   \n",
       "Forgetfulness                0.000020      0.029931          0.006961   \n",
       "Age                          0.040337      0.003954          0.012343   \n",
       "Ethnicity                    0.009364      0.012848          0.003687   \n",
       "EducationLevel               0.008951      0.016950          0.000165   \n",
       "BMI                          0.016288      0.004928          0.029293   \n",
       "AlcoholConsumption           0.008301      0.006010          0.029418   \n",
       "PhysicalActivity             0.025780      0.022081          0.008709   \n",
       "DietQuality                  0.008163      0.043628          0.012537   \n",
       "SleepQuality                 0.004546      0.038668          0.016807   \n",
       "SystolicBP                   0.000081      0.000843          0.009517   \n",
       "DiastolicBP                  0.010430      0.043424          0.006126   \n",
       "CholesterolTotal             0.021734      0.024493          0.013821   \n",
       "CholesterolLDL               0.026806      0.013892          0.005737   \n",
       "CholesterolHDL               0.000685      0.004205          0.030898   \n",
       "CholesterolTriglycerides     0.016845      0.011504          0.014484   \n",
       "MMSE                         0.006063      0.012079          0.007652   \n",
       "FunctionalAssessment         0.034655      0.028332          0.002320   \n",
       "ADL                          0.016669      0.018602          0.037511   \n",
       "Diagnosis                    0.021411      0.035080          0.306742   \n",
       "\n",
       "                           BehavioralProblems  Confusion  Disorientation  \\\n",
       "Gender                               0.006099   0.030583        0.017506   \n",
       "Smoking                              0.014763   0.004498        0.028403   \n",
       "FamilyHistoryAlzheimers              0.023558   0.017976        0.035963   \n",
       "CardiovascularDisease                0.016803   0.017658        0.025237   \n",
       "Diabetes                             0.027927   0.004793        0.004494   \n",
       "Depression                           0.001316   0.001593        0.005764   \n",
       "HeadInjury                           0.047649   0.031152        0.033060   \n",
       "Hypertension                         0.031700   0.008634        0.033567   \n",
       "MemoryComplaints                     0.009765   0.007749        0.013442   \n",
       "BehavioralProblems                   1.000000   0.022676        0.022154   \n",
       "Confusion                            0.022676   1.000000        0.007034   \n",
       "Disorientation                       0.022154   0.007034        1.000000   \n",
       "PersonalityChanges                   0.002892   0.001573        0.022311   \n",
       "DifficultyCompletingTasks            0.019174   0.022003        0.020767   \n",
       "Forgetfulness                        0.023374   0.010100        0.032013   \n",
       "Age                                  0.038973   0.009002        0.027523   \n",
       "Ethnicity                            0.019363   0.022431        0.018132   \n",
       "EducationLevel                       0.010473   0.008168        0.017568   \n",
       "BMI                                  0.035276   0.015859        0.031840   \n",
       "AlcoholConsumption                   0.013657   0.032798        0.015521   \n",
       "PhysicalActivity                     0.014253   0.009397        0.020407   \n",
       "DietQuality                          0.014033   0.002628        0.026271   \n",
       "SleepQuality                         0.019899   0.013508        0.019467   \n",
       "SystolicBP                           0.012787   0.008404        0.037500   \n",
       "DiastolicBP                          0.016682   0.016567        0.015098   \n",
       "CholesterolTotal                     0.006505   0.037390        0.025313   \n",
       "CholesterolLDL                       0.002926   0.020629        0.027335   \n",
       "CholesterolHDL                       0.027170   0.005254        0.021054   \n",
       "CholesterolTriglycerides             0.010310   0.013631        0.013222   \n",
       "MMSE                                 0.025408   0.003763        0.036715   \n",
       "FunctionalAssessment                 0.021941   0.023118        0.007193   \n",
       "ADL                                  0.043376   0.012373        0.002256   \n",
       "Diagnosis                            0.224350   0.019186        0.024648   \n",
       "\n",
       "                           PersonalityChanges  DifficultyCompletingTasks  \\\n",
       "Gender                               0.025919                   0.001636   \n",
       "Smoking                              0.009977                   0.001741   \n",
       "FamilyHistoryAlzheimers              0.006839                   0.008787   \n",
       "CardiovascularDisease                0.032343                   0.024684   \n",
       "Diabetes                             0.004184                   0.001466   \n",
       "Depression                           0.026044                   0.017145   \n",
       "HeadInjury                           0.031417                   0.010646   \n",
       "Hypertension                         0.011857                   0.002780   \n",
       "MemoryComplaints                     0.030096                   0.044151   \n",
       "BehavioralProblems                   0.002892                   0.019174   \n",
       "Confusion                            0.001573                   0.022003   \n",
       "Disorientation                       0.022311                   0.020767   \n",
       "PersonalityChanges                   1.000000                   0.037686   \n",
       "DifficultyCompletingTasks            0.037686                   1.000000   \n",
       "Forgetfulness                        0.013311                   0.013386   \n",
       "Age                                  0.009470                   0.013900   \n",
       "Ethnicity                            0.030035                   0.019363   \n",
       "EducationLevel                       0.019950                   0.013033   \n",
       "BMI                                  0.015901                   0.039400   \n",
       "AlcoholConsumption                   0.019117                   0.002712   \n",
       "PhysicalActivity                     0.013629                   0.031169   \n",
       "DietQuality                          0.029087                   0.045737   \n",
       "SleepQuality                         0.016892                   0.011237   \n",
       "SystolicBP                           0.012170                   0.003598   \n",
       "DiastolicBP                          0.001501                   0.026220   \n",
       "CholesterolTotal                     0.017469                   0.017936   \n",
       "CholesterolLDL                       0.016120                   0.011552   \n",
       "CholesterolHDL                       0.018553                   0.056947   \n",
       "CholesterolTriglycerides             0.017733                   0.041899   \n",
       "MMSE                                 0.034492                   0.003294   \n",
       "FunctionalAssessment                 0.024260                   0.019805   \n",
       "ADL                                  0.016128                   0.025646   \n",
       "Diagnosis                            0.020627                   0.009069   \n",
       "\n",
       "                           Forgetfulness      Age  Ethnicity  EducationLevel  \\\n",
       "Gender                          0.028537 0.028708   0.003660        0.007070   \n",
       "Smoking                         0.018011 0.020060   0.031485        0.009904   \n",
       "FamilyHistoryAlzheimers         0.022339 0.018784   0.022526        0.032748   \n",
       "CardiovascularDisease           0.010170 0.015284   0.002347        0.007528   \n",
       "Diabetes                        0.007644 0.005708   0.019588        0.003059   \n",
       "Depression                      0.017822 0.008752   0.005411        0.027573   \n",
       "HeadInjury                      0.000020 0.040337   0.009364        0.008951   \n",
       "Hypertension                    0.029931 0.003954   0.012848        0.016950   \n",
       "MemoryComplaints                0.006961 0.012343   0.003687        0.000165   \n",
       "BehavioralProblems              0.023374 0.038973   0.019363        0.010473   \n",
       "Confusion                       0.010100 0.009002   0.022431        0.008168   \n",
       "Disorientation                  0.032013 0.027523   0.018132        0.017568   \n",
       "PersonalityChanges              0.013311 0.009470   0.030035        0.019950   \n",
       "DifficultyCompletingTasks       0.013386 0.013900   0.019363        0.013033   \n",
       "Forgetfulness                   1.000000 0.019279   0.034619        0.008685   \n",
       "Age                             0.019279 1.000000   0.027745        0.060560   \n",
       "Ethnicity                       0.034619 0.027745   1.000000        0.026516   \n",
       "EducationLevel                  0.008685 0.060560   0.026516        1.000000   \n",
       "BMI                             0.071131 0.015677   0.003176        0.023514   \n",
       "AlcoholConsumption              0.024121 0.007323   0.008363        0.012646   \n",
       "PhysicalActivity                0.009837 0.010249   0.020498        0.016703   \n",
       "DietQuality                     0.006175 0.023386   0.018184        0.017412   \n",
       "SleepQuality                    0.002930 0.049139   0.029304        0.020248   \n",
       "SystolicBP                      0.011357 0.005324   0.027086        0.016782   \n",
       "DiastolicBP                     0.005857 0.004462   0.010310        0.002553   \n",
       "CholesterolTotal                0.025326 0.000392   0.011757        0.041598   \n",
       "CholesterolLDL                  0.000588 0.003588   0.007907        0.050504   \n",
       "CholesterolHDL                  0.016662 0.006803   0.021828        0.008125   \n",
       "CholesterolTriglycerides        0.003526 0.003062   0.007173        0.025763   \n",
       "MMSE                            0.011848 0.004235   0.012504        0.026090   \n",
       "FunctionalAssessment            0.019387 0.005508   0.004704        0.020269   \n",
       "ADL                             0.002595 0.038658   0.010475        0.031934   \n",
       "Diagnosis                       0.000354 0.005488   0.014782        0.043966   \n",
       "\n",
       "                               BMI  AlcoholConsumption  PhysicalActivity  \\\n",
       "Gender                    0.005928            0.004330          0.035795   \n",
       "Smoking                   0.020437            0.008363          0.010760   \n",
       "FamilyHistoryAlzheimers   0.006446            0.003707          0.014106   \n",
       "CardiovascularDisease     0.005467            0.023632          0.003976   \n",
       "Diabetes                  0.008980            0.000073          0.029880   \n",
       "Depression                0.012507            0.008867          0.013533   \n",
       "HeadInjury                0.016288            0.008301          0.025780   \n",
       "Hypertension              0.004928            0.006010          0.022081   \n",
       "MemoryComplaints          0.029293            0.029418          0.008709   \n",
       "BehavioralProblems        0.035276            0.013657          0.014253   \n",
       "Confusion                 0.015859            0.032798          0.009397   \n",
       "Disorientation            0.031840            0.015521          0.020407   \n",
       "PersonalityChanges        0.015901            0.019117          0.013629   \n",
       "DifficultyCompletingTasks 0.039400            0.002712          0.031169   \n",
       "Forgetfulness             0.071131            0.024121          0.009837   \n",
       "Age                       0.015677            0.007323          0.010249   \n",
       "Ethnicity                 0.003176            0.008363          0.020498   \n",
       "EducationLevel            0.023514            0.012646          0.016703   \n",
       "BMI                       1.000000            0.008997          0.000742   \n",
       "AlcoholConsumption        0.008997            1.000000          0.021696   \n",
       "PhysicalActivity          0.000742            0.021696          1.000000   \n",
       "DietQuality               0.019922            0.020117          0.011085   \n",
       "SleepQuality              0.005975            0.003873          0.001823   \n",
       "SystolicBP                0.019275            0.030070          0.004811   \n",
       "DiastolicBP               0.002524            0.008909          0.010555   \n",
       "CholesterolTotal          0.001082            0.033944          0.014335   \n",
       "CholesterolLDL            0.023684            0.017042          0.017789   \n",
       "CholesterolHDL            0.038605            0.001925          0.001993   \n",
       "CholesterolTriglycerides  0.018001            0.023362          0.027416   \n",
       "MMSE                      0.003477            0.011424          0.008342   \n",
       "FunctionalAssessment      0.030501            0.016483          0.002419   \n",
       "ADL                       0.009788            0.008250          0.013324   \n",
       "Diagnosis                 0.026343            0.007618          0.005945   \n",
       "\n",
       "                           DietQuality  SleepQuality  SystolicBP  DiastolicBP  \\\n",
       "Gender                        0.010942      0.007310    0.011657     0.026059   \n",
       "Smoking                       0.002048      0.001145    0.024116     0.014112   \n",
       "FamilyHistoryAlzheimers       0.011261      0.014801    0.006463     0.006060   \n",
       "CardiovascularDisease         0.015220      0.002112    0.013575     0.043662   \n",
       "Diabetes                      0.009192      0.023987    0.011518     0.003423   \n",
       "Depression                    0.002516      0.022996    0.018864     0.023021   \n",
       "HeadInjury                    0.008163      0.004546    0.000081     0.010430   \n",
       "Hypertension                  0.043628      0.038668    0.000843     0.043424   \n",
       "MemoryComplaints              0.012537      0.016807    0.009517     0.006126   \n",
       "BehavioralProblems            0.014033      0.019899    0.012787     0.016682   \n",
       "Confusion                     0.002628      0.013508    0.008404     0.016567   \n",
       "Disorientation                0.026271      0.019467    0.037500     0.015098   \n",
       "PersonalityChanges            0.029087      0.016892    0.012170     0.001501   \n",
       "DifficultyCompletingTasks     0.045737      0.011237    0.003598     0.026220   \n",
       "Forgetfulness                 0.006175      0.002930    0.011357     0.005857   \n",
       "Age                           0.023386      0.049139    0.005324     0.004462   \n",
       "Ethnicity                     0.018184      0.029304    0.027086     0.010310   \n",
       "EducationLevel                0.017412      0.020248    0.016782     0.002553   \n",
       "BMI                           0.019922      0.005975    0.019275     0.002524   \n",
       "AlcoholConsumption            0.020117      0.003873    0.030070     0.008909   \n",
       "PhysicalActivity              0.011085      0.001823    0.004811     0.010555   \n",
       "DietQuality                   1.000000      0.051295    0.006031     0.009539   \n",
       "SleepQuality                  0.051295      1.000000    0.027887     0.010797   \n",
       "SystolicBP                    0.006031      0.027887    1.000000     0.002590   \n",
       "DiastolicBP                   0.009539      0.010797    0.002590     1.000000   \n",
       "CholesterolTotal              0.016790      0.006879    0.018537     0.015249   \n",
       "CholesterolLDL                0.023698      0.006751    0.007295     0.015542   \n",
       "CholesterolHDL                0.008659      0.015453    0.002947     0.008180   \n",
       "CholesterolTriglycerides      0.034734      0.024004    0.034824     0.007928   \n",
       "MMSE                          0.021636      0.012506    0.003548     0.028586   \n",
       "FunctionalAssessment          0.009700      0.029589    0.013161     0.031485   \n",
       "ADL                           0.007888      0.014535    0.015447     0.004836   \n",
       "Diagnosis                     0.008506      0.056548    0.015615     0.005293   \n",
       "\n",
       "                           CholesterolTotal  CholesterolLDL  CholesterolHDL  \\\n",
       "Gender                             0.009568        0.016271        0.005846   \n",
       "Smoking                            0.010907        0.007393        0.025567   \n",
       "FamilyHistoryAlzheimers            0.007054        0.011682        0.013581   \n",
       "CardiovascularDisease              0.007961        0.038607        0.017681   \n",
       "Diabetes                           0.048767        0.014744        0.038532   \n",
       "Depression                         0.010087        0.004796        0.008256   \n",
       "HeadInjury                         0.021734        0.026806        0.000685   \n",
       "Hypertension                       0.024493        0.013892        0.004205   \n",
       "MemoryComplaints                   0.013821        0.005737        0.030898   \n",
       "BehavioralProblems                 0.006505        0.002926        0.027170   \n",
       "Confusion                          0.037390        0.020629        0.005254   \n",
       "Disorientation                     0.025313        0.027335        0.021054   \n",
       "PersonalityChanges                 0.017469        0.016120        0.018553   \n",
       "DifficultyCompletingTasks          0.017936        0.011552        0.056947   \n",
       "Forgetfulness                      0.025326        0.000588        0.016662   \n",
       "Age                                0.000392        0.003588        0.006803   \n",
       "Ethnicity                          0.011757        0.007907        0.021828   \n",
       "EducationLevel                     0.041598        0.050504        0.008125   \n",
       "BMI                                0.001082        0.023684        0.038605   \n",
       "AlcoholConsumption                 0.033944        0.017042        0.001925   \n",
       "PhysicalActivity                   0.014335        0.017789        0.001993   \n",
       "DietQuality                        0.016790        0.023698        0.008659   \n",
       "SleepQuality                       0.006879        0.006751        0.015453   \n",
       "SystolicBP                         0.018537        0.007295        0.002947   \n",
       "DiastolicBP                        0.015249        0.015542        0.008180   \n",
       "CholesterolTotal                   1.000000        0.010336        0.010116   \n",
       "CholesterolLDL                     0.010336        1.000000        0.037148   \n",
       "CholesterolHDL                     0.010116        0.037148        1.000000   \n",
       "CholesterolTriglycerides           0.001959        0.005582        0.015235   \n",
       "MMSE                               0.013638        0.025383        0.005218   \n",
       "FunctionalAssessment               0.005345        0.016215        0.003450   \n",
       "ADL                                0.000775        0.019380        0.005252   \n",
       "Diagnosis                          0.006394        0.031976        0.042584   \n",
       "\n",
       "                           CholesterolTriglycerides     MMSE  \\\n",
       "Gender                                     0.012427 0.025330   \n",
       "Smoking                                    0.021058 0.002139   \n",
       "FamilyHistoryAlzheimers                    0.001046 0.015575   \n",
       "CardiovascularDisease                      0.001264 0.025351   \n",
       "Diabetes                                   0.044906 0.008905   \n",
       "Depression                                 0.043186 0.014020   \n",
       "HeadInjury                                 0.016845 0.006063   \n",
       "Hypertension                               0.011504 0.012079   \n",
       "MemoryComplaints                           0.014484 0.007652   \n",
       "BehavioralProblems                         0.010310 0.025408   \n",
       "Confusion                                  0.013631 0.003763   \n",
       "Disorientation                             0.013222 0.036715   \n",
       "PersonalityChanges                         0.017733 0.034492   \n",
       "DifficultyCompletingTasks                  0.041899 0.003294   \n",
       "Forgetfulness                              0.003526 0.011848   \n",
       "Age                                        0.003062 0.004235   \n",
       "Ethnicity                                  0.007173 0.012504   \n",
       "EducationLevel                             0.025763 0.026090   \n",
       "BMI                                        0.018001 0.003477   \n",
       "AlcoholConsumption                         0.023362 0.011424   \n",
       "PhysicalActivity                           0.027416 0.008342   \n",
       "DietQuality                                0.034734 0.021636   \n",
       "SleepQuality                               0.024004 0.012506   \n",
       "SystolicBP                                 0.034824 0.003548   \n",
       "DiastolicBP                                0.007928 0.028586   \n",
       "CholesterolTotal                           0.001959 0.013638   \n",
       "CholesterolLDL                             0.005582 0.025383   \n",
       "CholesterolHDL                             0.015235 0.005218   \n",
       "CholesterolTriglycerides                   1.000000 0.007615   \n",
       "MMSE                                       0.007615 1.000000   \n",
       "FunctionalAssessment                       0.009207 0.024932   \n",
       "ADL                                        0.023546 0.003359   \n",
       "Diagnosis                                  0.022672 0.237126   \n",
       "\n",
       "                           FunctionalAssessment      ADL  Diagnosis  \n",
       "Gender                                 0.033324 0.003865   0.020975  \n",
       "Smoking                                0.031879 0.029233   0.004865  \n",
       "FamilyHistoryAlzheimers                0.004650 0.014041   0.032900  \n",
       "CardiovascularDisease                  0.041270 0.012918   0.031490  \n",
       "Diabetes                               0.043548 0.022235   0.031508  \n",
       "Depression                             0.019733 0.006195   0.005893  \n",
       "HeadInjury                             0.034655 0.016669   0.021411  \n",
       "Hypertension                           0.028332 0.018602   0.035080  \n",
       "MemoryComplaints                       0.002320 0.037511   0.306742  \n",
       "BehavioralProblems                     0.021941 0.043376   0.224350  \n",
       "Confusion                              0.023118 0.012373   0.019186  \n",
       "Disorientation                         0.007193 0.002256   0.024648  \n",
       "PersonalityChanges                     0.024260 0.016128   0.020627  \n",
       "DifficultyCompletingTasks              0.019805 0.025646   0.009069  \n",
       "Forgetfulness                          0.019387 0.002595   0.000354  \n",
       "Age                                    0.005508 0.038658   0.005488  \n",
       "Ethnicity                              0.004704 0.010475   0.014782  \n",
       "EducationLevel                         0.020269 0.031934   0.043966  \n",
       "BMI                                    0.030501 0.009788   0.026343  \n",
       "AlcoholConsumption                     0.016483 0.008250   0.007618  \n",
       "PhysicalActivity                       0.002419 0.013324   0.005945  \n",
       "DietQuality                            0.009700 0.007888   0.008506  \n",
       "SleepQuality                           0.029589 0.014535   0.056548  \n",
       "SystolicBP                             0.013161 0.015447   0.015615  \n",
       "DiastolicBP                            0.031485 0.004836   0.005293  \n",
       "CholesterolTotal                       0.005345 0.000775   0.006394  \n",
       "CholesterolLDL                         0.016215 0.019380   0.031976  \n",
       "CholesterolHDL                         0.003450 0.005252   0.042584  \n",
       "CholesterolTriglycerides               0.009207 0.023546   0.022672  \n",
       "MMSE                                   0.024932 0.003359   0.237126  \n",
       "FunctionalAssessment                   1.000000 0.053904   0.364898  \n",
       "ADL                                    0.053904 1.000000   0.332346  \n",
       "Diagnosis                              0.364898 0.332346   1.000000  "
      ]
     },
     "execution_count": 177,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# View Correlation Table\n",
    "abs(rdf[top_corr_features].corr())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "95f274b7-8640-4597-b218-fa28a0324073",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true
   },
   "source": [
    "## Hyperparameter Tuning with Features that contribute ≥ 0.01"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 210,
   "id": "9e6f325e-0ebe-4c91-950d-ff2669edec43",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Include only features contributing ≥ 0.01\n",
    "ndf = rdf.loc[:, fge001.index]\n",
    "x = ndf.iloc[:, :].values\n",
    "ndf\n",
    "finalres = []     # Initialize to blank final results (later code should error if we forget to calculate them)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 211,
   "id": "034725ec-eaa7-4b22-84f0-6fa8df07e99f",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "17\n"
     ]
    }
   ],
   "source": [
    "# How many feature columns?\n",
    "print(len(ndf.columns))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 212,
   "id": "e39986f9-1c99-4116-a1ff-425ad69fe424",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(2149, 17) (2149,)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 212,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print (x.shape, y.shape)\n",
    "# check if we still have desired features\n",
    "len(ndf.columns) == len(x[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 213,
   "id": "9c232e4e-c9fd-451b-81bb-edc4490e3b37",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[262   5]\n",
      " [  9 154]]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.9674418604651163"
      ]
     },
     "execution_count": 213,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Split = 20% Test\n",
    "x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.20, random_state = 0)\n",
    "model = RandomForestClassifier (n_estimators = 100, criterion = 'entropy', random_state = 0, max_features=None)\n",
    "model.fit(x_train, y_train)\n",
    "y_pred = model.predict(x_test)\n",
    "cm = confusion_matrix (y_test, y_pred)\n",
    "print (cm)\n",
    "accuracy_score(y_test, y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 214,
   "id": "32e185fc-0144-4948-8306-0b9f646be315",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[339   5]\n",
      " [ 14 180]]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.9646840148698885"
      ]
     },
     "execution_count": 214,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Split = 25% Test\n",
    "x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.25, random_state = 0)\n",
    "model = RandomForestClassifier (n_estimators = 100, criterion = 'entropy', random_state = 0, max_features=None)\n",
    "model.fit(x_train, y_train)\n",
    "y_pred = model.predict(x_test)\n",
    "cm = confusion_matrix (y_test, y_pred)\n",
    "print (cm)\n",
    "accuracy_score(y_test, y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 219,
   "id": "341f3af2-165b-4989-a0aa-7e58f7282d52",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 10 folds for each of 64 candidates, totalling 640 fits\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.5s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.5s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.5s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.5s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.5s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.5s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.5s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.5s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.5s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "RandomForestClassifier()\n",
      "Best Parameters: {'criterion': 'entropy', 'max_features': None, 'min_samples_leaf': 2, 'min_samples_split': 10, 'min_weight_fraction_leaf': 0.0, 'n_estimators': 100, 'n_jobs': 8, 'verbose': 0}\n",
      "Accuracy: 0.9460 (0.0178)\n"
     ]
    }
   ],
   "source": [
    "# Grid Search of min_samples_split, min_samples_leaf, min_weight_fraction_leaf (4 x 4 x 4combos)\n",
    "x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.25, random_state = 0)\n",
    "model = RandomForestClassifier()\n",
    "parameters = [{'criterion': ['entropy'], 'n_estimators': [100], 'max_features' : [None],\n",
    "               'min_samples_split' : [2, 10, 20, 50], 'min_samples_leaf' : [2, 10, 20, 50], 'min_weight_fraction_leaf' : [0.0, 0.1, 0.2, 0.5],\n",
    "               'verbose' : [0], 'n_jobs' : [8]}]\n",
    "finalres = gs(model, x_train, y_train, parameters, 10, 2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 240,
   "id": "00b56322-a32f-4cf1-a8bc-47a532646777",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RF Optimal Parameters for Features Contributing ≥ 0.01 {'criterion': 'entropy', 'max_features': None, 'min_samples_leaf': 2, 'min_samples_split': 10, 'min_weight_fraction_leaf': 0.0, 'n_estimators': 100, 'n_jobs': 8, 'verbose': 0}\n",
      "\n",
      "RF Optimal Parameters for All Features {'criterion': 'entropy', 'max_features': None, 'min_samples_leaf': 2, 'min_samples_split': 20, 'min_weight_fraction_leaf': 0.0, 'n_estimators': 100}\n"
     ]
    }
   ],
   "source": [
    "# Compare above parameters against global optimal parameters for Random Forest\n",
    "print ('RF Optimal Parameters for Features Contributing ≥ 0.01', finalres[2])\n",
    "print ()\n",
    "print ('RF Optimal Parameters for All Features', rf_opt_param)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 242,
   "id": "6c752f71-d9b5-42cc-8475-ea76912a2887",
   "metadata": {},
   "outputs": [],
   "source": [
    "acc_rf_ge001 = finalres[0]\n",
    "std_rf_ge001 = finalres[1]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "138d7b52-7946-4cc5-9475-6176e02c3710",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true
   },
   "source": [
    "## Hyperparameter Tuning with Top 10 Features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 244,
   "id": "66d753b6-8153-4588-b0cd-da31af8254cf",
   "metadata": {},
   "outputs": [],
   "source": [
    "ndf = rdf.loc[:, f10.index]\n",
    "x = ndf.iloc[:, :].values\n",
    "ndf\n",
    "finalres = []     # Initialize to blank final results (later code should error if we forget to calculate them)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 246,
   "id": "d0310eb0-6cd5-4e5e-9adb-f21e23d4645f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(2149, 10) (2149,)\n",
      "True\n"
     ]
    }
   ],
   "source": [
    "# check if we still have 10 features\n",
    "print (x.shape, y.shape)\n",
    "print(len(ndf.columns) == len(x[0]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 247,
   "id": "c7086b87-61a9-44e5-9b67-adc1fcf1e40f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[263   4]\n",
      " [  9 154]]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.9697674418604652"
      ]
     },
     "execution_count": 247,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Split = 20% Test and compare accuracy to features ≥ 0.01\n",
    "x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.20, random_state = 0)\n",
    "model = RandomForestClassifier (n_estimators = 100, criterion = 'entropy', random_state = 0, max_features=None)\n",
    "model.fit(x_train, y_train)\n",
    "y_pred = model.predict(x_test)\n",
    "cm = confusion_matrix (y_test, y_pred)\n",
    "print (cm)\n",
    "accuracy_score(y_test, y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 248,
   "id": "cda74a8c-780c-4207-826b-a864185ce5cd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[340   4]\n",
      " [ 12 182]]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.9702602230483272"
      ]
     },
     "execution_count": 248,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Split = 25% Test and compare accuracy to features ≥ 0.01\n",
    "x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.25, random_state = 0)\n",
    "model = RandomForestClassifier (n_estimators = 100, criterion = 'entropy', random_state = 0, max_features=None)\n",
    "model.fit(x_train, y_train)\n",
    "y_pred = model.predict(x_test)\n",
    "cm = confusion_matrix (y_test, y_pred)\n",
    "print (cm)\n",
    "accuracy_score(y_test, y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 249,
   "id": "0f660b55-70dd-4fa1-ab67-ed64cfb33818",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Average Score: 0.9441\n",
      "Standard Deviation: 0.0144\n"
     ]
    }
   ],
   "source": [
    "# Cross validate before tuning hyperparameters\n",
    "from sklearn.model_selection import cross_val_score\n",
    "score = cross_val_score (estimator = model, X = x_train, y = y_train, scoring = 'accuracy', cv = 10, verbose = 0)\n",
    "print('Average Score: {:.4f}'.format(score.mean()))\n",
    "print('Standard Deviation: {:.4f}'.format(score.std()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 250,
   "id": "e9995d1b-1591-485d-9456-7c32b17f891e",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 10 folds for each of 64 candidates, totalling 640 fits\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.5s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.5s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.5s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.6s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.5s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.5s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.5s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.5s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.5s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.5s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.5s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.5s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.5s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.5s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.5s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.5s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.5s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.5s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.5s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.5s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.5s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.4s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "RandomForestClassifier()\n",
      "Best Parameters: {'criterion': 'entropy', 'max_features': None, 'min_samples_leaf': 2, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'n_estimators': 100, 'n_jobs': 8, 'verbose': 0}\n",
      "Accuracy: 0.9460 (0.0157)\n"
     ]
    }
   ],
   "source": [
    "# Grid Search of min_samples_split, min_samples_leaf, min_weight_fraction_leaf (4 x 4 x 4combos)\n",
    "x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.25, random_state = 0)\n",
    "model = RandomForestClassifier()\n",
    "parameters = [{'criterion': ['entropy'], 'n_estimators': [100], 'max_features' : [None],\n",
    "               'min_samples_split' : [2, 10, 20, 50], 'min_samples_leaf' : [2, 10, 20, 50], 'min_weight_fraction_leaf' : [0.0, 0.1, 0.2, 0.5],\n",
    "               'verbose' : [0], 'n_jobs' : [8]}]\n",
    "finalres = gs(model, x_train, y_train, parameters, 10, 2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 262,
   "id": "116fddb6-e0e9-4701-b6ed-e46720a82639",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RF Optimal Parameters for Top 10 Features {'criterion': 'entropy', 'max_features': None, 'min_samples_leaf': 2, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'n_estimators': 100, 'n_jobs': 8, 'verbose': 0}\n",
      "\n",
      "RF Optimal Parameters for All Features {'criterion': 'entropy', 'max_features': None, 'min_samples_leaf': 2, 'min_samples_split': 20, 'min_weight_fraction_leaf': 0.0, 'n_estimators': 100}\n"
     ]
    }
   ],
   "source": [
    "# Compare above parameters against global optimal parameters for Random Forest\n",
    "print ('RF Optimal Parameters for Top 10 Features', finalres[2])\n",
    "print ()\n",
    "print ('RF Optimal Parameters for All Features', rf_opt_param)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 263,
   "id": "36267a9e-336a-4c74-9e0a-bf6a3d3d4f06",
   "metadata": {},
   "outputs": [],
   "source": [
    "acc_rf_t10 = finalres[0]\n",
    "std_rf_t10 = finalres[1]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9fbff4d4-78ad-47dd-b052-f4ab56707d84",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true
   },
   "source": [
    "## Hyperparameter Tuning with Top 5 Features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 266,
   "id": "7c7cc73d-9524-4101-9f88-4f98bd844321",
   "metadata": {},
   "outputs": [],
   "source": [
    "f5 = feat_importances.nlargest(5)\n",
    "ndf = rdf.loc[:, f5.index]\n",
    "x = ndf.iloc[:, :].values\n",
    "ndf\n",
    "finalres = []     # Initialize to blank final results (later code should error if we forget to calculate them)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 267,
   "id": "51939b39-c204-4dfd-b7a9-c4239ff03f1c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(2149, 5) (2149,)\n",
      "True\n"
     ]
    }
   ],
   "source": [
    "# check if we still have 5 features\n",
    "print (x.shape, y.shape)\n",
    "print(len(ndf.columns) == len(x[0]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 268,
   "id": "af242776-5315-48c4-a06b-0b6a66c75c3f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[260   7]\n",
      " [  9 154]]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.9627906976744186"
      ]
     },
     "execution_count": 268,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Split = 20% Test and compare accuracy to features, top 10 above section\n",
    "x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.20, random_state = 0)\n",
    "model = RandomForestClassifier (n_estimators = 100, criterion = 'entropy', random_state = 0, max_features=None)\n",
    "model.fit(x_train, y_train)\n",
    "y_pred = model.predict(x_test)\n",
    "cm = confusion_matrix (y_test, y_pred)\n",
    "print (cm)\n",
    "accuracy_score(y_test, y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 269,
   "id": "25adfcb1-fb01-4ac1-a95d-a15309e7ef7f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[337   7]\n",
      " [ 12 182]]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.9646840148698885"
      ]
     },
     "execution_count": 269,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Split = 25% Test and compare accuracy to features, top 10 above section\n",
    "x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.25, random_state = 0)\n",
    "model = RandomForestClassifier (n_estimators = 100, criterion = 'entropy', random_state = 0, max_features=None)\n",
    "model.fit(x_train, y_train)\n",
    "y_pred = model.predict(x_test)\n",
    "cm = confusion_matrix (y_test, y_pred)\n",
    "print (cm)\n",
    "accuracy_score(y_test, y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 270,
   "id": "a8152dde-f416-41ec-b741-b989f7505011",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 10 folds for each of 64 candidates, totalling 640 fits\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.3s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=2, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=10, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=20, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=2, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=10, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=20, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.1, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.2, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.2s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "[CV] END criterion=entropy, max_features=None, min_samples_leaf=50, min_samples_split=50, min_weight_fraction_leaf=0.5, n_estimators=100, n_jobs=8, verbose=0; total time=   0.1s\n",
      "RandomForestClassifier()\n",
      "Best Parameters: {'criterion': 'entropy', 'max_features': None, 'min_samples_leaf': 2, 'min_samples_split': 10, 'min_weight_fraction_leaf': 0.0, 'n_estimators': 100, 'n_jobs': 8, 'verbose': 0}\n",
      "Accuracy: 0.9460 (0.0121)\n"
     ]
    }
   ],
   "source": [
    "# Grid Search of min_samples_split, min_samples_leaf, min_weight_fraction_leaf (4 x 4 x 4combos)\n",
    "x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.25, random_state = 0)\n",
    "model = RandomForestClassifier()\n",
    "parameters = [{'criterion': ['entropy'], 'n_estimators': [100], 'max_features' : [None],\n",
    "               'min_samples_split' : [2, 10, 20, 50], 'min_samples_leaf' : [2, 10, 20, 50], 'min_weight_fraction_leaf' : [0.0, 0.1, 0.2, 0.5],\n",
    "               'verbose' : [0], 'n_jobs' : [8]}]\n",
    "finalres = gs(model, x_train, y_train, parameters, 10, 2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 271,
   "id": "234dbf3c-4ff1-4e8a-805a-50a70ba5c9fd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RF Optimal Parameters for Top 5 Features {'criterion': 'entropy', 'max_features': None, 'min_samples_leaf': 2, 'min_samples_split': 10, 'min_weight_fraction_leaf': 0.0, 'n_estimators': 100, 'n_jobs': 8, 'verbose': 0}\n",
      "\n",
      "RF Optimal Parameters for All Features {'criterion': 'entropy', 'max_features': None, 'min_samples_leaf': 2, 'min_samples_split': 20, 'min_weight_fraction_leaf': 0.0, 'n_estimators': 100}\n"
     ]
    }
   ],
   "source": [
    "# Compare above parameters against global optimal parameters for Random Forest\n",
    "print ('RF Optimal Parameters for Top 5 Features', finalres[2])\n",
    "print ()\n",
    "print ('RF Optimal Parameters for All Features', rf_opt_param)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 272,
   "id": "55977165-8dde-48b6-998d-ef00c8226871",
   "metadata": {},
   "outputs": [],
   "source": [
    "acc_rf_t5 = finalres[0]\n",
    "std_rf_t5 = finalres[1]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "612d51d6-0e63-48b3-bba5-382550b1489a",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true
   },
   "source": [
    "## Accuracy Table after k-Fold Validation for Best Models after Tuning"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1c3316a4-7611-4359-aa8e-52af0085a362",
   "metadata": {},
   "source": [
    "### Calculations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 280,
   "id": "1d77c6ce-0c14-4e39-a119-7e430ec0cd18",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Function to fit model k times and return average accuracy ± stdev\n",
    "def score_model(model, x, y, x_test, y_test, k, verbose = 3):\n",
    "    from sklearn.metrics import confusion_matrix, accuracy_score\n",
    "    from numpy import mean, std\n",
    "    acc = []\n",
    "    if verbose >= 1:\n",
    "        print ()\n",
    "        print ('Fitting... ', model)\n",
    "    for i in (range(1, k+1)):\n",
    "        if verbose >= 3:\n",
    "            print ('pass', i, '... ', end=\"\")\n",
    "        model.fit(x, y)\n",
    "        y_pred = model.predict(x_test)\n",
    "        scor = accuracy_score(y_test, y_pred)\n",
    "        if verbose >= 3:\n",
    "            print(scor)\n",
    "        acc.append(scor)\n",
    "    m_acc = mean(acc)\n",
    "    s_acc = std(acc)\n",
    "    if verbose >= 2:\n",
    "        print (\"{:.4f}\".format(m_acc), '±', \"{:.4f}\".format(s_acc))\n",
    "    return m_acc, s_acc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 282,
   "id": "29793eef-d13f-4477-a424-416ca8496402",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Fitting...  ExtraTreesClassifier(criterion='log_loss', max_features=None,\n",
      "                     max_leaf_nodes=100, min_samples_leaf=2,\n",
      "                     min_samples_split=10)\n",
      "pass 1 ... 0.9604651162790697\n",
      "pass 2 ... 0.9604651162790697\n",
      "pass 3 ... 0.9627906976744186\n",
      "pass 4 ... 0.9627906976744186\n",
      "pass 5 ... 0.9651162790697675\n",
      "pass 6 ... 0.9627906976744186\n",
      "pass 7 ... 0.9674418604651163\n",
      "pass 8 ... 0.9651162790697675\n",
      "pass 9 ... 0.9674418604651163\n",
      "pass 10 ... 0.9651162790697675\n",
      "0.9640 ± 0.0024\n",
      "\n",
      "Fitting...  LGBMClassifier(learning_rate=0.09, num_leaves=32, verbose=-1)\n",
      "pass 1 ... 0.9604651162790697\n",
      "pass 2 ... 0.9604651162790697\n",
      "pass 3 ... 0.9604651162790697\n",
      "pass 4 ... 0.9604651162790697\n",
      "pass 5 ... 0.9604651162790697\n",
      "pass 6 ... 0.9604651162790697\n",
      "pass 7 ... 0.9604651162790697\n",
      "pass 8 ... 0.9604651162790697\n",
      "pass 9 ... 0.9604651162790697\n",
      "pass 10 ... 0.9604651162790697\n",
      "0.9605 ± 0.0000\n",
      "\n",
      "Fitting...  RandomForestClassifier(criterion='entropy', max_features=None,\n",
      "                       min_samples_leaf=2, min_samples_split=20)\n",
      "pass 1 ... 0.9651162790697675\n",
      "pass 2 ... 0.9674418604651163\n",
      "pass 3 ... 0.9651162790697675\n",
      "pass 4 ... 0.9651162790697675\n",
      "pass 5 ... 0.9674418604651163\n",
      "pass 6 ... 0.9651162790697675\n",
      "pass 7 ... 0.9651162790697675\n",
      "pass 8 ... 0.9651162790697675\n",
      "pass 9 ... 0.9674418604651163\n",
      "pass 10 ... 0.9651162790697675\n",
      "0.9658 ± 0.0011\n",
      "\n",
      "Fitting...  RandomForestClassifier(criterion='entropy', max_features=None,\n",
      "                       min_samples_leaf=2, min_samples_split=20)\n",
      "pass 1 ... 0.9651162790697675\n",
      "pass 2 ... 0.9674418604651163\n",
      "pass 3 ... 0.9674418604651163\n",
      "pass 4 ... 0.9651162790697675\n",
      "pass 5 ... 0.9651162790697675\n",
      "pass 6 ... 0.9651162790697675\n",
      "pass 7 ... 0.9651162790697675\n",
      "pass 8 ... 0.9651162790697675\n",
      "pass 9 ... 0.9651162790697675\n",
      "pass 10 ... 0.9651162790697675\n",
      "0.9656 ± 0.0009\n",
      "\n",
      "Fitting...  RandomForestClassifier(criterion='entropy', max_features=None,\n",
      "                       min_samples_leaf=2, min_samples_split=10)\n",
      "pass 1 ... 0.9651162790697675\n",
      "pass 2 ... 0.9674418604651163\n",
      "pass 3 ... 0.9674418604651163\n",
      "pass 4 ... 0.9674418604651163\n",
      "pass 5 ... 0.9674418604651163\n",
      "pass 6 ... 0.9674418604651163\n",
      "pass 7 ... 0.9674418604651163\n",
      "pass 8 ... 0.9651162790697675\n",
      "pass 9 ... 0.9674418604651163\n",
      "pass 10 ... 0.9651162790697675\n",
      "0.9667 ± 0.0011\n",
      "\n",
      "Fitting...  RandomForestClassifier(criterion='entropy', max_features=None,\n",
      "                       min_samples_leaf=2, min_samples_split=20)\n",
      "pass 1 ... 0.9674418604651163\n",
      "pass 2 ... 0.9674418604651163\n",
      "pass 3 ... 0.9651162790697675\n",
      "pass 4 ... 0.9674418604651163\n",
      "pass 5 ... 0.9651162790697675\n",
      "pass 6 ... 0.9674418604651163\n",
      "pass 7 ... 0.9627906976744186\n",
      "pass 8 ... 0.9651162790697675\n",
      "pass 9 ... 0.9674418604651163\n",
      "pass 10 ... 0.9651162790697675\n",
      "0.9660 ± 0.0015\n"
     ]
    }
   ],
   "source": [
    "# Use Test set to run each model with optimal parameters\n",
    "#   These will be used to compare Training set and Test set results in a table\n",
    "\n",
    "# All Features\n",
    "x = rdf.iloc[:, :-1].values\n",
    "y = rdf.iloc[:, -1].values\n",
    "x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state = 0)\n",
    "\n",
    "model = ExtraTreesClassifier(criterion = 'log_loss', n_estimators = 100, max_features = None, max_leaf_nodes = 100, max_depth = None,\n",
    "               min_samples_split = 10, min_samples_leaf = 2)\n",
    "acc_et_test = score_model (model, x_train, y_train, x_test, y_test, 10, 3)\n",
    "\n",
    "model = lgb.LGBMClassifier(num_leaves = 32, n_estimators = 100, learning_rate = 0.09, verbose=-1)\n",
    "acc_lg_test = score_model (model, x_train, y_train, x_test, y_test, 10, 3)\n",
    "               \n",
    "model = RandomForestClassifier(criterion = 'entropy', n_estimators = 100, max_features = None,\n",
    "               min_samples_split = 20, min_samples_leaf = 2, min_weight_fraction_leaf = 0.0)\n",
    "acc_rf_test = score_model (model, x_train, y_train, x_test, y_test, 10, 3)\n",
    "\n",
    "# Setup for Top Features (based on RandomForestClassifier)\n",
    "model = RandomForestClassifier(criterion = 'entropy', n_estimators = 100, max_features = None,\n",
    "               min_samples_split = 20, min_samples_leaf = 2, min_weight_fraction_leaf = 0.0)\n",
    "model.fit(x_train, y_train)\n",
    "feat_importances = pd.Series(model.feature_importances_, index=rdf.columns[:-1])\n",
    "\n",
    "# Features >= 0.01\n",
    "fge001 = feat_importances[feat_importances.ge(0.01)]\n",
    "ndf = rdf.loc[:, fge001.index]\n",
    "x = ndf.iloc[:, :].values\n",
    "x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state = 0)\n",
    "model = RandomForestClassifier(criterion = 'entropy', n_estimators= 100, max_features = None,\n",
    "               min_samples_split = 20, min_samples_leaf = 2, min_weight_fraction_leaf = 0.0)\n",
    "acc_rf_ge001_test = score_model (model, x_train, y_train, x_test, y_test, 10, 3)\n",
    "\n",
    "# Top 10 Features\n",
    "f10 = feat_importances.nlargest(10)\n",
    "ndf = rdf.loc[:, f10.index]\n",
    "x = ndf.iloc[:, :].values\n",
    "x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state = 0)\n",
    "model = RandomForestClassifier(criterion = 'entropy', n_estimators= 100, max_features = None,\n",
    "               min_samples_split = 10, min_samples_leaf = 2, min_weight_fraction_leaf = 0.0)\n",
    "acc_rf_t10_test = score_model (model, x_train, y_train, x_test, y_test, 10, 3)\n",
    "\n",
    "# Top 5 Features\n",
    "f5 = feat_importances.nlargest(5)\n",
    "ndf = rdf.loc[:, f5.index]\n",
    "x = ndf.iloc[:, :].values\n",
    "x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state = 0)\n",
    "model = RandomForestClassifier(criterion = 'entropy', n_estimators= 100, max_features = None,\n",
    "               min_samples_split = 20, min_samples_leaf = 2, min_weight_fraction_leaf = 0.0)\n",
    "acc_rf_t5_test = score_model (model, x_train, y_train, x_test, y_test, 10, 3)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d5fc2257-83c5-4451-af0b-59ee52646dac",
   "metadata": {},
   "source": [
    "### Table"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 284,
   "id": "49dea697-a823-4a7e-82c8-4e198351d24e",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "row_labels = ['Extra Trees', 'LightGBM', 'RandomForest', 'RFge001', 'RFTop10', 'RFTop5' ]\n",
    "accuracies = [acc_et_test[0], acc_lg_test[0], acc_rf_test[0], acc_rf_ge001_test[0], acc_rf_t10_test[0], acc_rf_t5_test[0]]\n",
    "stdevs =  [acc_et_test[1], acc_lg_test[1], acc_rf_test[1], acc_rf_ge001_test[1], acc_rf_t10_test[1], acc_rf_t5_test[1]]\n",
    "accuracies = pd.DataFrame(accuracies, row_labels, ['Accuracy(test)'])\n",
    "stdevs = pd.DataFrame(stdevs, row_labels, ['StDev'])\n",
    "test_results = pd.concat([accuracies, stdevs], axis = 1)\n",
    "pd.options.display.float_format = \"{:,.2f}\".format\n",
    "#the following attempts to select columns containing only numerical types; this isn't necessary because all are numerical\n",
    "#test_results[test_results.select_dtypes(include=['number']).columns] *= 100\n",
    "test_results *= 100\n",
    "#test_results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 770,
   "id": "f566baa3-fbac-46c9-b96a-f450ccb7ea33",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "row_labels = ['Extra Trees', 'LightGBM', 'RandomForest', 'RFge001', 'RFTop10', 'RFTop5' ]\n",
    "accuracies = [acc_et, acc_lg, acc_rf, acc_rf_ge001, acc_rf_t10, acc_rf_t5]\n",
    "stdevs = [std_et, std_lg, std_rf, std_rf_ge001, std_rf_t10, std_rf_t5]\n",
    "accuracies = pd.DataFrame(accuracies, row_labels, ['Accuracy(train)'])\n",
    "stdevs = pd.DataFrame(stdevs, row_labels, ['StDev'])\n",
    "tuned_train_results = pd.concat([accuracies, stdevs], axis = 1)\n",
    "pd.options.display.float_format = \"{:,.2f}\".format\n",
    "#the following attempts to select columns containing only numerical types; this isn't necessary because all are numerical\n",
    "#tuned_train_results[tuned_train_results.select_dtypes(include=['number']).columns] *= 100\n",
    "tuned_train_results *= 100\n",
    "#tuned_train_results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 772,
   "id": "6ea965b3-9a00-42e1-8281-bf9921018d3e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Accuracy(train)</th>\n",
       "      <th>StDev</th>\n",
       "      <th>Accuracy(test)</th>\n",
       "      <th>StDev</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Extra Trees</th>\n",
       "      <td>94.30</td>\n",
       "      <td>1.92</td>\n",
       "      <td>96.40</td>\n",
       "      <td>0.24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>LightGBM</th>\n",
       "      <td>94.88</td>\n",
       "      <td>1.64</td>\n",
       "      <td>96.05</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>RandomForest</th>\n",
       "      <td>94.66</td>\n",
       "      <td>1.48</td>\n",
       "      <td>96.58</td>\n",
       "      <td>0.11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>RFge001</th>\n",
       "      <td>94.60</td>\n",
       "      <td>1.78</td>\n",
       "      <td>96.56</td>\n",
       "      <td>0.09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>RFTop10</th>\n",
       "      <td>94.60</td>\n",
       "      <td>1.57</td>\n",
       "      <td>96.67</td>\n",
       "      <td>0.11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>RFTop5</th>\n",
       "      <td>94.60</td>\n",
       "      <td>1.21</td>\n",
       "      <td>96.60</td>\n",
       "      <td>0.15</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              Accuracy(train)  StDev  Accuracy(test)  StDev\n",
       "Extra Trees             94.30   1.92           96.40   0.24\n",
       "LightGBM                94.88   1.64           96.05   0.00\n",
       "RandomForest            94.66   1.48           96.58   0.11\n",
       "RFge001                 94.60   1.78           96.56   0.09\n",
       "RFTop10                 94.60   1.57           96.67   0.11\n",
       "RFTop5                  94.60   1.21           96.60   0.15"
      ]
     },
     "execution_count": 772,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results = pd.concat([tuned_train_results, test_results], axis = 1)\n",
    "results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 287,
   "id": "31cc6d26-cebe-49b4-864b-d57de4f2e66a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Running Time 10-fold Validation and fixed parameter list:\n",
    "# RandomForest ~9 seconds\n",
    "# LightGBM < 2 seconds"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "90018c9e-1904-4896-b8ac-2334130acfa1",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true
   },
   "source": [
    "## Feature Selection & Extraction"
   ]
  },
  {
   "cell_type": "raw",
   "id": "a42edea4-f951-4ca7-a13f-deec7a92bda9",
   "metadata": {},
   "source": [
    "Attempt to combine / extract / eliminate features to improve model.\n",
    "Random Forest (all features) and Random Forest (top 10) are currently the best models.\n",
    "In the following code:\n",
    "rdf = original dataset with scaled features\n",
    "ndf = derived dataset used to construct x_train for fitting."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 641,
   "id": "af78c02e-d915-4a22-a44f-8792a02e0857",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Gender</th>\n",
       "      <th>Smoking</th>\n",
       "      <th>FamilyHistoryAlzheimers</th>\n",
       "      <th>CardiovascularDisease</th>\n",
       "      <th>Diabetes</th>\n",
       "      <th>Depression</th>\n",
       "      <th>HeadInjury</th>\n",
       "      <th>Hypertension</th>\n",
       "      <th>MemoryComplaints</th>\n",
       "      <th>BehavioralProblems</th>\n",
       "      <th>Confusion</th>\n",
       "      <th>Disorientation</th>\n",
       "      <th>PersonalityChanges</th>\n",
       "      <th>DifficultyCompletingTasks</th>\n",
       "      <th>Forgetfulness</th>\n",
       "      <th>Age</th>\n",
       "      <th>Ethnicity</th>\n",
       "      <th>EducationLevel</th>\n",
       "      <th>BMI</th>\n",
       "      <th>AlcoholConsumption</th>\n",
       "      <th>PhysicalActivity</th>\n",
       "      <th>DietQuality</th>\n",
       "      <th>SleepQuality</th>\n",
       "      <th>SystolicBP</th>\n",
       "      <th>DiastolicBP</th>\n",
       "      <th>CholesterolTotal</th>\n",
       "      <th>CholesterolLDL</th>\n",
       "      <th>CholesterolHDL</th>\n",
       "      <th>CholesterolTriglycerides</th>\n",
       "      <th>MMSE</th>\n",
       "      <th>FunctionalAssessment</th>\n",
       "      <th>ADL</th>\n",
       "      <th>Diagnosis</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.212368</td>\n",
       "      <td>-0.700408</td>\n",
       "      <td>0.788833</td>\n",
       "      <td>-0.655225</td>\n",
       "      <td>0.565923</td>\n",
       "      <td>0.492525</td>\n",
       "      <td>-1.253593</td>\n",
       "      <td>1.119918</td>\n",
       "      <td>0.298159</td>\n",
       "      <td>-1.014750</td>\n",
       "      <td>0.403677</td>\n",
       "      <td>-1.572661</td>\n",
       "      <td>-1.114429</td>\n",
       "      <td>-0.648199</td>\n",
       "      <td>0.779037</td>\n",
       "      <td>0.497506</td>\n",
       "      <td>-1.104434</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1.567757</td>\n",
       "      <td>-0.700408</td>\n",
       "      <td>-1.422782</td>\n",
       "      <td>-0.114751</td>\n",
       "      <td>-0.954895</td>\n",
       "      <td>0.945093</td>\n",
       "      <td>-1.538442</td>\n",
       "      <td>0.056836</td>\n",
       "      <td>-0.742572</td>\n",
       "      <td>-1.469595</td>\n",
       "      <td>0.140248</td>\n",
       "      <td>1.593119</td>\n",
       "      <td>0.845730</td>\n",
       "      <td>0.650721</td>\n",
       "      <td>0.680297</td>\n",
       "      <td>0.704907</td>\n",
       "      <td>-0.810601</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.212368</td>\n",
       "      <td>2.311955</td>\n",
       "      <td>-0.316974</td>\n",
       "      <td>-1.366428</td>\n",
       "      <td>1.653006</td>\n",
       "      <td>1.023896</td>\n",
       "      <td>-1.088855</td>\n",
       "      <td>1.487380</td>\n",
       "      <td>-1.359301</td>\n",
       "      <td>1.486898</td>\n",
       "      <td>1.386812</td>\n",
       "      <td>0.668569</td>\n",
       "      <td>0.445615</td>\n",
       "      <td>-1.418585</td>\n",
       "      <td>-0.859222</td>\n",
       "      <td>0.281813</td>\n",
       "      <td>0.724491</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.101111</td>\n",
       "      <td>-0.700408</td>\n",
       "      <td>-0.316974</td>\n",
       "      <td>0.851625</td>\n",
       "      <td>0.376930</td>\n",
       "      <td>1.227995</td>\n",
       "      <td>0.839804</td>\n",
       "      <td>0.760833</td>\n",
       "      <td>-0.626935</td>\n",
       "      <td>1.430043</td>\n",
       "      <td>-1.542715</td>\n",
       "      <td>-1.360103</td>\n",
       "      <td>0.388780</td>\n",
       "      <td>0.483468</td>\n",
       "      <td>-0.088723</td>\n",
       "      <td>1.343346</td>\n",
       "      <td>0.508044</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1.567757</td>\n",
       "      <td>-0.700408</td>\n",
       "      <td>-1.422782</td>\n",
       "      <td>-0.961607</td>\n",
       "      <td>1.461793</td>\n",
       "      <td>0.486696</td>\n",
       "      <td>-1.443293</td>\n",
       "      <td>-0.824566</td>\n",
       "      <td>-1.552029</td>\n",
       "      <td>1.543754</td>\n",
       "      <td>0.291653</td>\n",
       "      <td>-0.725756</td>\n",
       "      <td>-0.111924</td>\n",
       "      <td>0.617060</td>\n",
       "      <td>-0.143712</td>\n",
       "      <td>0.333665</td>\n",
       "      <td>-1.684679</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Gender  Smoking  FamilyHistoryAlzheimers  CardiovascularDisease  Diabetes  \\\n",
       "0       0        0                        0                      0         1   \n",
       "1       0        0                        0                      0         0   \n",
       "2       0        0                        1                      0         0   \n",
       "3       1        1                        0                      0         0   \n",
       "4       0        0                        0                      0         0   \n",
       "\n",
       "   Depression  HeadInjury  Hypertension  MemoryComplaints  BehavioralProblems  \\\n",
       "0           1           0             0                 0                   0   \n",
       "1           0           0             0                 0                   0   \n",
       "2           0           0             0                 0                   0   \n",
       "3           0           0             0                 0                   1   \n",
       "4           0           0             0                 0                   0   \n",
       "\n",
       "   Confusion  Disorientation  PersonalityChanges  DifficultyCompletingTasks  \\\n",
       "0          0               0                   0                          1   \n",
       "1          0               0                   0                          0   \n",
       "2          0               1                   0                          1   \n",
       "3          0               0                   0                          0   \n",
       "4          0               0                   1                          1   \n",
       "\n",
       "   Forgetfulness       Age  Ethnicity  EducationLevel       BMI  \\\n",
       "0              0 -0.212368  -0.700408        0.788833 -0.655225   \n",
       "1              1  1.567757  -0.700408       -1.422782 -0.114751   \n",
       "2              0 -0.212368   2.311955       -0.316974 -1.366428   \n",
       "3              0 -0.101111  -0.700408       -0.316974  0.851625   \n",
       "4              0  1.567757  -0.700408       -1.422782 -0.961607   \n",
       "\n",
       "   AlcoholConsumption  PhysicalActivity  DietQuality  SleepQuality  \\\n",
       "0            0.565923          0.492525    -1.253593      1.119918   \n",
       "1           -0.954895          0.945093    -1.538442      0.056836   \n",
       "2            1.653006          1.023896    -1.088855      1.487380   \n",
       "3            0.376930          1.227995     0.839804      0.760833   \n",
       "4            1.461793          0.486696    -1.443293     -0.824566   \n",
       "\n",
       "   SystolicBP  DiastolicBP  CholesterolTotal  CholesterolLDL  CholesterolHDL  \\\n",
       "0    0.298159    -1.014750          0.403677       -1.572661       -1.114429   \n",
       "1   -0.742572    -1.469595          0.140248        1.593119        0.845730   \n",
       "2   -1.359301     1.486898          1.386812        0.668569        0.445615   \n",
       "3   -0.626935     1.430043         -1.542715       -1.360103        0.388780   \n",
       "4   -1.552029     1.543754          0.291653       -0.725756       -0.111924   \n",
       "\n",
       "   CholesterolTriglycerides      MMSE  FunctionalAssessment       ADL  \\\n",
       "0                 -0.648199  0.779037              0.497506 -1.104434   \n",
       "1                  0.650721  0.680297              0.704907 -0.810601   \n",
       "2                 -1.418585 -0.859222              0.281813  0.724491   \n",
       "3                  0.483468 -0.088723              1.343346  0.508044   \n",
       "4                  0.617060 -0.143712              0.333665 -1.684679   \n",
       "\n",
       "   Diagnosis  \n",
       "0          0  \n",
       "1          0  \n",
       "2          0  \n",
       "3          0  \n",
       "4          0  "
      ]
     },
     "execution_count": 641,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Review what dataset looks like\n",
    "rdf.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 642,
   "id": "f2c5654f-2443-443d-a937-d4c52afbdef7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(2149, 32) (2149,)\n"
     ]
    }
   ],
   "source": [
    "x = rdf.iloc[:, :-1].values\n",
    "y = rdf.iloc[:, -1].values\n",
    "print (x.shape, y.shape)\n",
    "x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.25, random_state = 0)\n",
    "\n",
    "model = RandomForestClassifier(criterion = 'entropy', n_estimators = 100, max_features = None,\n",
    "               min_samples_split = 20, min_samples_leaf = 2, min_weight_fraction_leaf = 0.0)\n",
    "model.fit (x_train, y_train)\n",
    "\n",
    "# Create ordered list of features -- greatest contributors on top\n",
    "\n",
    "pd.options.display.float_format = \"{:,.6f}\".format\n",
    "feat_importances = pd.Series(model.feature_importances_, index=rdf.columns[:-1])\n",
    "# reverse the order of the array, placing most important feature names at beginning\n",
    "feat_imp_ord = np.array(feat_importances.sort_values().index)[::-1]\n",
    "feat_imp_ord = feat_imp_ord.tolist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 643,
   "id": "dfeaa47b-f052-4767-9a57-aa22bc923f93",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# rf_opt_param is a dict containing optimal hyperparameters\n",
    "# unfortunately, it cannot be supplied as a parameter list to model.fit()\n",
    "# each value in the dict must be converted to a list []\n",
    "# and, there is no general way to do this for every data type\n",
    "# what a pain\n",
    "\n",
    "# params will be the desired dict supplied to model.fit()\n",
    "params = rf_opt_param.copy()\n",
    "\n",
    "for key, value in params.items():\n",
    "    if isinstance(params[key], str):\n",
    "        params[key] = str.split(str(value))\n",
    "    elif isinstance(params[key], int):\n",
    "        params[key] = [params[key]]\n",
    "    elif isinstance(params[key], float):\n",
    "        params[key] = [params[key]]\n",
    "    elif params[key] is None:\n",
    "        params[key] = [None]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1a9ed46c-fb7b-4c3a-81da-834d96672858",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true
   },
   "source": [
    "### Combine all Booleans into a single feature"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 647,
   "id": "05681ed7-7b0b-4567-b912-f138070fd701",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>BooleanScore</th>\n",
       "      <th>Age</th>\n",
       "      <th>Ethnicity</th>\n",
       "      <th>EducationLevel</th>\n",
       "      <th>BMI</th>\n",
       "      <th>AlcoholConsumption</th>\n",
       "      <th>PhysicalActivity</th>\n",
       "      <th>DietQuality</th>\n",
       "      <th>SleepQuality</th>\n",
       "      <th>SystolicBP</th>\n",
       "      <th>DiastolicBP</th>\n",
       "      <th>CholesterolTotal</th>\n",
       "      <th>CholesterolLDL</th>\n",
       "      <th>CholesterolHDL</th>\n",
       "      <th>CholesterolTriglycerides</th>\n",
       "      <th>MMSE</th>\n",
       "      <th>FunctionalAssessment</th>\n",
       "      <th>ADL</th>\n",
       "      <th>Diagnosis</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.200000</td>\n",
       "      <td>-0.212368</td>\n",
       "      <td>-0.700408</td>\n",
       "      <td>0.788833</td>\n",
       "      <td>-0.655225</td>\n",
       "      <td>0.565923</td>\n",
       "      <td>0.492525</td>\n",
       "      <td>-1.253593</td>\n",
       "      <td>1.119918</td>\n",
       "      <td>0.298159</td>\n",
       "      <td>-1.014750</td>\n",
       "      <td>0.403677</td>\n",
       "      <td>-1.572661</td>\n",
       "      <td>-1.114429</td>\n",
       "      <td>-0.648199</td>\n",
       "      <td>0.779037</td>\n",
       "      <td>0.497506</td>\n",
       "      <td>-1.104434</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.066667</td>\n",
       "      <td>1.567757</td>\n",
       "      <td>-0.700408</td>\n",
       "      <td>-1.422782</td>\n",
       "      <td>-0.114751</td>\n",
       "      <td>-0.954895</td>\n",
       "      <td>0.945093</td>\n",
       "      <td>-1.538442</td>\n",
       "      <td>0.056836</td>\n",
       "      <td>-0.742572</td>\n",
       "      <td>-1.469595</td>\n",
       "      <td>0.140248</td>\n",
       "      <td>1.593119</td>\n",
       "      <td>0.845730</td>\n",
       "      <td>0.650721</td>\n",
       "      <td>0.680297</td>\n",
       "      <td>0.704907</td>\n",
       "      <td>-0.810601</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.200000</td>\n",
       "      <td>-0.212368</td>\n",
       "      <td>2.311955</td>\n",
       "      <td>-0.316974</td>\n",
       "      <td>-1.366428</td>\n",
       "      <td>1.653006</td>\n",
       "      <td>1.023896</td>\n",
       "      <td>-1.088855</td>\n",
       "      <td>1.487380</td>\n",
       "      <td>-1.359301</td>\n",
       "      <td>1.486898</td>\n",
       "      <td>1.386812</td>\n",
       "      <td>0.668569</td>\n",
       "      <td>0.445615</td>\n",
       "      <td>-1.418585</td>\n",
       "      <td>-0.859222</td>\n",
       "      <td>0.281813</td>\n",
       "      <td>0.724491</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.200000</td>\n",
       "      <td>-0.101111</td>\n",
       "      <td>-0.700408</td>\n",
       "      <td>-0.316974</td>\n",
       "      <td>0.851625</td>\n",
       "      <td>0.376930</td>\n",
       "      <td>1.227995</td>\n",
       "      <td>0.839804</td>\n",
       "      <td>0.760833</td>\n",
       "      <td>-0.626935</td>\n",
       "      <td>1.430043</td>\n",
       "      <td>-1.542715</td>\n",
       "      <td>-1.360103</td>\n",
       "      <td>0.388780</td>\n",
       "      <td>0.483468</td>\n",
       "      <td>-0.088723</td>\n",
       "      <td>1.343346</td>\n",
       "      <td>0.508044</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.133333</td>\n",
       "      <td>1.567757</td>\n",
       "      <td>-0.700408</td>\n",
       "      <td>-1.422782</td>\n",
       "      <td>-0.961607</td>\n",
       "      <td>1.461793</td>\n",
       "      <td>0.486696</td>\n",
       "      <td>-1.443293</td>\n",
       "      <td>-0.824566</td>\n",
       "      <td>-1.552029</td>\n",
       "      <td>1.543754</td>\n",
       "      <td>0.291653</td>\n",
       "      <td>-0.725756</td>\n",
       "      <td>-0.111924</td>\n",
       "      <td>0.617060</td>\n",
       "      <td>-0.143712</td>\n",
       "      <td>0.333665</td>\n",
       "      <td>-1.684679</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   BooleanScore       Age  Ethnicity  EducationLevel       BMI  \\\n",
       "0      0.200000 -0.212368  -0.700408        0.788833 -0.655225   \n",
       "1      0.066667  1.567757  -0.700408       -1.422782 -0.114751   \n",
       "2      0.200000 -0.212368   2.311955       -0.316974 -1.366428   \n",
       "3      0.200000 -0.101111  -0.700408       -0.316974  0.851625   \n",
       "4      0.133333  1.567757  -0.700408       -1.422782 -0.961607   \n",
       "\n",
       "   AlcoholConsumption  PhysicalActivity  DietQuality  SleepQuality  \\\n",
       "0            0.565923          0.492525    -1.253593      1.119918   \n",
       "1           -0.954895          0.945093    -1.538442      0.056836   \n",
       "2            1.653006          1.023896    -1.088855      1.487380   \n",
       "3            0.376930          1.227995     0.839804      0.760833   \n",
       "4            1.461793          0.486696    -1.443293     -0.824566   \n",
       "\n",
       "   SystolicBP  DiastolicBP  CholesterolTotal  CholesterolLDL  CholesterolHDL  \\\n",
       "0    0.298159    -1.014750          0.403677       -1.572661       -1.114429   \n",
       "1   -0.742572    -1.469595          0.140248        1.593119        0.845730   \n",
       "2   -1.359301     1.486898          1.386812        0.668569        0.445615   \n",
       "3   -0.626935     1.430043         -1.542715       -1.360103        0.388780   \n",
       "4   -1.552029     1.543754          0.291653       -0.725756       -0.111924   \n",
       "\n",
       "   CholesterolTriglycerides      MMSE  FunctionalAssessment       ADL  \\\n",
       "0                 -0.648199  0.779037              0.497506 -1.104434   \n",
       "1                  0.650721  0.680297              0.704907 -0.810601   \n",
       "2                 -1.418585 -0.859222              0.281813  0.724491   \n",
       "3                  0.483468 -0.088723              1.343346  0.508044   \n",
       "4                  0.617060 -0.143712              0.333665 -1.684679   \n",
       "\n",
       "   Diagnosis  \n",
       "0          0  \n",
       "1          0  \n",
       "2          0  \n",
       "3          0  \n",
       "4          0  "
      ]
     },
     "execution_count": 647,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Replace all Boolean features with a single value, BooleanScore = mean(Boolean features), having range [0,1]\n",
    "meanbool = bool_df.mean(axis=1)\n",
    "ndf = rdf.drop(col_bool, axis=1)\n",
    "ndf.insert(0, 'BooleanScore', meanbool)\n",
    "\n",
    "x = ndf.iloc[:, :-1].values\n",
    "y = ndf.iloc[:, -1].values\n",
    "x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.25, random_state = 0)\n",
    "ndf.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 648,
   "id": "ef8ec7b5-f408-48d5-9a37-cb7ed68ccc2f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2149, 19)"
      ]
     },
     "execution_count": 648,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ndf.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 649,
   "id": "048a4e6e-7e66-466e-826a-c361a5c5a131",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 10 folds for each of 1 candidates, totalling 10 fits\n",
      "RandomForestClassifier()\n",
      "Best Parameters: {'criterion': 'entropy', 'max_features': None, 'min_samples_leaf': 2, 'min_samples_split': 20, 'min_weight_fraction_leaf': 0.0, 'n_estimators': 100}\n",
      "Accuracy: 0.8411 (0.0235)\n"
     ]
    }
   ],
   "source": [
    "# Fit RF model with known optimal parameters\n",
    "model = RandomForestClassifier()\n",
    "finalres = gs(model, x_train, y_train, params, 10, 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 650,
   "id": "309b45ab-7506-4f4b-9776-29cb565512c5",
   "metadata": {},
   "outputs": [],
   "source": [
    "acc_allbool = finalres[0]\n",
    "std_allbool = finalres[1]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cbb9c1b6-abf6-47ba-90f5-f2bd83647f5e",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true
   },
   "source": [
    "### Combine MemoryComplaints + BehavioralProblems"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 653,
   "id": "d62a41d1-b9e7-4b00-b2b2-c3a70bb6df61",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Mem_Beh</th>\n",
       "      <th>Age</th>\n",
       "      <th>Ethnicity</th>\n",
       "      <th>EducationLevel</th>\n",
       "      <th>BMI</th>\n",
       "      <th>AlcoholConsumption</th>\n",
       "      <th>PhysicalActivity</th>\n",
       "      <th>DietQuality</th>\n",
       "      <th>SleepQuality</th>\n",
       "      <th>SystolicBP</th>\n",
       "      <th>DiastolicBP</th>\n",
       "      <th>CholesterolTotal</th>\n",
       "      <th>CholesterolLDL</th>\n",
       "      <th>CholesterolHDL</th>\n",
       "      <th>CholesterolTriglycerides</th>\n",
       "      <th>MMSE</th>\n",
       "      <th>FunctionalAssessment</th>\n",
       "      <th>ADL</th>\n",
       "      <th>Diagnosis</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>-0.212368</td>\n",
       "      <td>-0.700408</td>\n",
       "      <td>0.788833</td>\n",
       "      <td>-0.655225</td>\n",
       "      <td>0.565923</td>\n",
       "      <td>0.492525</td>\n",
       "      <td>-1.253593</td>\n",
       "      <td>1.119918</td>\n",
       "      <td>0.298159</td>\n",
       "      <td>-1.014750</td>\n",
       "      <td>0.403677</td>\n",
       "      <td>-1.572661</td>\n",
       "      <td>-1.114429</td>\n",
       "      <td>-0.648199</td>\n",
       "      <td>0.779037</td>\n",
       "      <td>0.497506</td>\n",
       "      <td>-1.104434</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.567757</td>\n",
       "      <td>-0.700408</td>\n",
       "      <td>-1.422782</td>\n",
       "      <td>-0.114751</td>\n",
       "      <td>-0.954895</td>\n",
       "      <td>0.945093</td>\n",
       "      <td>-1.538442</td>\n",
       "      <td>0.056836</td>\n",
       "      <td>-0.742572</td>\n",
       "      <td>-1.469595</td>\n",
       "      <td>0.140248</td>\n",
       "      <td>1.593119</td>\n",
       "      <td>0.845730</td>\n",
       "      <td>0.650721</td>\n",
       "      <td>0.680297</td>\n",
       "      <td>0.704907</td>\n",
       "      <td>-0.810601</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>-0.212368</td>\n",
       "      <td>2.311955</td>\n",
       "      <td>-0.316974</td>\n",
       "      <td>-1.366428</td>\n",
       "      <td>1.653006</td>\n",
       "      <td>1.023896</td>\n",
       "      <td>-1.088855</td>\n",
       "      <td>1.487380</td>\n",
       "      <td>-1.359301</td>\n",
       "      <td>1.486898</td>\n",
       "      <td>1.386812</td>\n",
       "      <td>0.668569</td>\n",
       "      <td>0.445615</td>\n",
       "      <td>-1.418585</td>\n",
       "      <td>-0.859222</td>\n",
       "      <td>0.281813</td>\n",
       "      <td>0.724491</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.500000</td>\n",
       "      <td>-0.101111</td>\n",
       "      <td>-0.700408</td>\n",
       "      <td>-0.316974</td>\n",
       "      <td>0.851625</td>\n",
       "      <td>0.376930</td>\n",
       "      <td>1.227995</td>\n",
       "      <td>0.839804</td>\n",
       "      <td>0.760833</td>\n",
       "      <td>-0.626935</td>\n",
       "      <td>1.430043</td>\n",
       "      <td>-1.542715</td>\n",
       "      <td>-1.360103</td>\n",
       "      <td>0.388780</td>\n",
       "      <td>0.483468</td>\n",
       "      <td>-0.088723</td>\n",
       "      <td>1.343346</td>\n",
       "      <td>0.508044</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.567757</td>\n",
       "      <td>-0.700408</td>\n",
       "      <td>-1.422782</td>\n",
       "      <td>-0.961607</td>\n",
       "      <td>1.461793</td>\n",
       "      <td>0.486696</td>\n",
       "      <td>-1.443293</td>\n",
       "      <td>-0.824566</td>\n",
       "      <td>-1.552029</td>\n",
       "      <td>1.543754</td>\n",
       "      <td>0.291653</td>\n",
       "      <td>-0.725756</td>\n",
       "      <td>-0.111924</td>\n",
       "      <td>0.617060</td>\n",
       "      <td>-0.143712</td>\n",
       "      <td>0.333665</td>\n",
       "      <td>-1.684679</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Mem_Beh       Age  Ethnicity  EducationLevel       BMI  AlcoholConsumption  \\\n",
       "0 0.000000 -0.212368  -0.700408        0.788833 -0.655225            0.565923   \n",
       "1 0.000000  1.567757  -0.700408       -1.422782 -0.114751           -0.954895   \n",
       "2 0.000000 -0.212368   2.311955       -0.316974 -1.366428            1.653006   \n",
       "3 0.500000 -0.101111  -0.700408       -0.316974  0.851625            0.376930   \n",
       "4 0.000000  1.567757  -0.700408       -1.422782 -0.961607            1.461793   \n",
       "\n",
       "   PhysicalActivity  DietQuality  SleepQuality  SystolicBP  DiastolicBP  \\\n",
       "0          0.492525    -1.253593      1.119918    0.298159    -1.014750   \n",
       "1          0.945093    -1.538442      0.056836   -0.742572    -1.469595   \n",
       "2          1.023896    -1.088855      1.487380   -1.359301     1.486898   \n",
       "3          1.227995     0.839804      0.760833   -0.626935     1.430043   \n",
       "4          0.486696    -1.443293     -0.824566   -1.552029     1.543754   \n",
       "\n",
       "   CholesterolTotal  CholesterolLDL  CholesterolHDL  CholesterolTriglycerides  \\\n",
       "0          0.403677       -1.572661       -1.114429                 -0.648199   \n",
       "1          0.140248        1.593119        0.845730                  0.650721   \n",
       "2          1.386812        0.668569        0.445615                 -1.418585   \n",
       "3         -1.542715       -1.360103        0.388780                  0.483468   \n",
       "4          0.291653       -0.725756       -0.111924                  0.617060   \n",
       "\n",
       "       MMSE  FunctionalAssessment       ADL  Diagnosis  \n",
       "0  0.779037              0.497506 -1.104434          0  \n",
       "1  0.680297              0.704907 -0.810601          0  \n",
       "2 -0.859222              0.281813  0.724491          0  \n",
       "3 -0.088723              1.343346  0.508044          0  \n",
       "4 -0.143712              0.333665 -1.684679          0  "
      ]
     },
     "execution_count": 653,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Replace the top two contributing Boolean features with a single value,\n",
    "#   Mem_Beh = mean(MemoryComplaints, BehavioralProblems), having range [0,1]\n",
    "twobool = rdf[['MemoryComplaints', 'BehavioralProblems']].mean(axis=1)\n",
    "ndf = rdf.drop(col_bool, axis=1)\n",
    "ndf.insert(0, 'Mem_Beh', twobool)\n",
    "\n",
    "x = ndf.iloc[:, :-1].values\n",
    "y = ndf.iloc[:, -1].values\n",
    "x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.25, random_state = 0)\n",
    "ndf.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 654,
   "id": "bdaec101-f514-401e-af6c-0b0977eede55",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2149, 19)"
      ]
     },
     "execution_count": 654,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ndf.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 655,
   "id": "3132fb20-b679-42bf-9267-b4562f7f53f7",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 10 folds for each of 1 candidates, totalling 10 fits\n",
      "RandomForestClassifier()\n",
      "Best Parameters: {'criterion': 'entropy', 'max_features': None, 'min_samples_leaf': 2, 'min_samples_split': 20, 'min_weight_fraction_leaf': 0.0, 'n_estimators': 100}\n",
      "Accuracy: 0.9479 (0.0131)\n"
     ]
    }
   ],
   "source": [
    "# Fit RF model with known optimal parameters\n",
    "model = RandomForestClassifier()\n",
    "finalres = gs(model, x_train, y_train, params, 10, 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 656,
   "id": "ba659ab8-16cb-47d7-bd80-35b0b9171bc6",
   "metadata": {},
   "outputs": [],
   "source": [
    "acc_membeh = finalres[0]\n",
    "std_membeh = finalres[1]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "620659d9-3b9b-454b-9902-51f07b3805df",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true
   },
   "source": [
    "### Combine the four Cholesterol Features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 657,
   "id": "bbf3bd2b-292a-4329-86b3-1dcd3fd9fdb6",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Recall col_nbool contains column names for non-Boolean features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 658,
   "id": "5739e73e-ecc0-4300-bcb4-2af27f3eb6d3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Age', 'Ethnicity', 'EducationLevel', 'BMI', 'AlcoholConsumption',\n",
       "       'PhysicalActivity', 'DietQuality', 'SleepQuality', 'SystolicBP',\n",
       "       'DiastolicBP', 'CholesterolTotal', 'CholesterolLDL', 'CholesterolHDL',\n",
       "       'CholesterolTriglycerides', 'MMSE', 'FunctionalAssessment', 'ADL'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 658,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "col_nbool"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 659,
   "id": "dcd2f467-099c-41db-9311-ada465158036",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Gender</th>\n",
       "      <th>Smoking</th>\n",
       "      <th>FamilyHistoryAlzheimers</th>\n",
       "      <th>CardiovascularDisease</th>\n",
       "      <th>Diabetes</th>\n",
       "      <th>Depression</th>\n",
       "      <th>HeadInjury</th>\n",
       "      <th>Hypertension</th>\n",
       "      <th>MemoryComplaints</th>\n",
       "      <th>BehavioralProblems</th>\n",
       "      <th>Confusion</th>\n",
       "      <th>Disorientation</th>\n",
       "      <th>PersonalityChanges</th>\n",
       "      <th>DifficultyCompletingTasks</th>\n",
       "      <th>Forgetfulness</th>\n",
       "      <th>Age</th>\n",
       "      <th>Ethnicity</th>\n",
       "      <th>EducationLevel</th>\n",
       "      <th>BMI</th>\n",
       "      <th>AlcoholConsumption</th>\n",
       "      <th>PhysicalActivity</th>\n",
       "      <th>DietQuality</th>\n",
       "      <th>SleepQuality</th>\n",
       "      <th>SystolicBP</th>\n",
       "      <th>DiastolicBP</th>\n",
       "      <th>Chol_Score</th>\n",
       "      <th>MMSE</th>\n",
       "      <th>FunctionalAssessment</th>\n",
       "      <th>ADL</th>\n",
       "      <th>Diagnosis</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.212368</td>\n",
       "      <td>-0.700408</td>\n",
       "      <td>0.788833</td>\n",
       "      <td>-0.655225</td>\n",
       "      <td>0.565923</td>\n",
       "      <td>0.492525</td>\n",
       "      <td>-1.253593</td>\n",
       "      <td>1.119918</td>\n",
       "      <td>0.298159</td>\n",
       "      <td>-1.014750</td>\n",
       "      <td>-0.732903</td>\n",
       "      <td>0.779037</td>\n",
       "      <td>0.497506</td>\n",
       "      <td>-1.104434</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1.567757</td>\n",
       "      <td>-0.700408</td>\n",
       "      <td>-1.422782</td>\n",
       "      <td>-0.114751</td>\n",
       "      <td>-0.954895</td>\n",
       "      <td>0.945093</td>\n",
       "      <td>-1.538442</td>\n",
       "      <td>0.056836</td>\n",
       "      <td>-0.742572</td>\n",
       "      <td>-1.469595</td>\n",
       "      <td>0.807454</td>\n",
       "      <td>0.680297</td>\n",
       "      <td>0.704907</td>\n",
       "      <td>-0.810601</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.212368</td>\n",
       "      <td>2.311955</td>\n",
       "      <td>-0.316974</td>\n",
       "      <td>-1.366428</td>\n",
       "      <td>1.653006</td>\n",
       "      <td>1.023896</td>\n",
       "      <td>-1.088855</td>\n",
       "      <td>1.487380</td>\n",
       "      <td>-1.359301</td>\n",
       "      <td>1.486898</td>\n",
       "      <td>0.270603</td>\n",
       "      <td>-0.859222</td>\n",
       "      <td>0.281813</td>\n",
       "      <td>0.724491</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.101111</td>\n",
       "      <td>-0.700408</td>\n",
       "      <td>-0.316974</td>\n",
       "      <td>0.851625</td>\n",
       "      <td>0.376930</td>\n",
       "      <td>1.227995</td>\n",
       "      <td>0.839804</td>\n",
       "      <td>0.760833</td>\n",
       "      <td>-0.626935</td>\n",
       "      <td>1.430043</td>\n",
       "      <td>-0.507643</td>\n",
       "      <td>-0.088723</td>\n",
       "      <td>1.343346</td>\n",
       "      <td>0.508044</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1.567757</td>\n",
       "      <td>-0.700408</td>\n",
       "      <td>-1.422782</td>\n",
       "      <td>-0.961607</td>\n",
       "      <td>1.461793</td>\n",
       "      <td>0.486696</td>\n",
       "      <td>-1.443293</td>\n",
       "      <td>-0.824566</td>\n",
       "      <td>-1.552029</td>\n",
       "      <td>1.543754</td>\n",
       "      <td>0.017758</td>\n",
       "      <td>-0.143712</td>\n",
       "      <td>0.333665</td>\n",
       "      <td>-1.684679</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Gender  Smoking  FamilyHistoryAlzheimers  CardiovascularDisease  Diabetes  \\\n",
       "0       0        0                        0                      0         1   \n",
       "1       0        0                        0                      0         0   \n",
       "2       0        0                        1                      0         0   \n",
       "3       1        1                        0                      0         0   \n",
       "4       0        0                        0                      0         0   \n",
       "\n",
       "   Depression  HeadInjury  Hypertension  MemoryComplaints  BehavioralProblems  \\\n",
       "0           1           0             0                 0                   0   \n",
       "1           0           0             0                 0                   0   \n",
       "2           0           0             0                 0                   0   \n",
       "3           0           0             0                 0                   1   \n",
       "4           0           0             0                 0                   0   \n",
       "\n",
       "   Confusion  Disorientation  PersonalityChanges  DifficultyCompletingTasks  \\\n",
       "0          0               0                   0                          1   \n",
       "1          0               0                   0                          0   \n",
       "2          0               1                   0                          1   \n",
       "3          0               0                   0                          0   \n",
       "4          0               0                   1                          1   \n",
       "\n",
       "   Forgetfulness       Age  Ethnicity  EducationLevel       BMI  \\\n",
       "0              0 -0.212368  -0.700408        0.788833 -0.655225   \n",
       "1              1  1.567757  -0.700408       -1.422782 -0.114751   \n",
       "2              0 -0.212368   2.311955       -0.316974 -1.366428   \n",
       "3              0 -0.101111  -0.700408       -0.316974  0.851625   \n",
       "4              0  1.567757  -0.700408       -1.422782 -0.961607   \n",
       "\n",
       "   AlcoholConsumption  PhysicalActivity  DietQuality  SleepQuality  \\\n",
       "0            0.565923          0.492525    -1.253593      1.119918   \n",
       "1           -0.954895          0.945093    -1.538442      0.056836   \n",
       "2            1.653006          1.023896    -1.088855      1.487380   \n",
       "3            0.376930          1.227995     0.839804      0.760833   \n",
       "4            1.461793          0.486696    -1.443293     -0.824566   \n",
       "\n",
       "   SystolicBP  DiastolicBP  Chol_Score      MMSE  FunctionalAssessment  \\\n",
       "0    0.298159    -1.014750   -0.732903  0.779037              0.497506   \n",
       "1   -0.742572    -1.469595    0.807454  0.680297              0.704907   \n",
       "2   -1.359301     1.486898    0.270603 -0.859222              0.281813   \n",
       "3   -0.626935     1.430043   -0.507643 -0.088723              1.343346   \n",
       "4   -1.552029     1.543754    0.017758 -0.143712              0.333665   \n",
       "\n",
       "        ADL  Diagnosis  \n",
       "0 -1.104434          0  \n",
       "1 -0.810601          0  \n",
       "2  0.724491          0  \n",
       "3  0.508044          0  \n",
       "4 -1.684679          0  "
      ]
     },
     "execution_count": 659,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Replace all Cholesterol features with a single value, Chol_Score = mean(cholesterol features), having range [0,1]\n",
    "col_chol = ['CholesterolTotal', 'CholesterolLDL', 'CholesterolHDL', 'CholesterolTriglycerides']\n",
    "chol = rdf[col_chol].mean(axis=1)\n",
    "ndf = rdf.iloc[:, :]\n",
    "\n",
    "# insert Chol_Score at position occupied by cholesterol features and remove them\n",
    "ndf.insert(ndf.columns.get_loc('CholesterolTotal'), 'Chol_Score', chol)\n",
    "ndf = ndf.drop(col_chol, axis=1)\n",
    "x = ndf.iloc[:, :-1].values\n",
    "y = ndf.iloc[:, -1].values\n",
    "x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.25, random_state = 0)\n",
    "ndf.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 660,
   "id": "65a6f717-6ec8-44b0-b047-c5488b934e2f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2149, 30)"
      ]
     },
     "execution_count": 660,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ndf.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 661,
   "id": "03c07c45-db0f-4071-b65d-dfd1f8d12010",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 10 folds for each of 1 candidates, totalling 10 fits\n",
      "RandomForestClassifier()\n",
      "Best Parameters: {'criterion': 'entropy', 'max_features': None, 'min_samples_leaf': 2, 'min_samples_split': 20, 'min_weight_fraction_leaf': 0.0, 'n_estimators': 100}\n",
      "Accuracy: 0.9472 (0.0142)\n"
     ]
    }
   ],
   "source": [
    "# Fit RF model with known optimal parameters\n",
    "model = RandomForestClassifier()\n",
    "finalres = gs(model, x_train, y_train, params, 10, 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 662,
   "id": "52ba3ce8-ec26-4b4b-9b2b-0335ae0e2a79",
   "metadata": {},
   "outputs": [],
   "source": [
    "acc_chol = finalres[0]\n",
    "std_chol = finalres[1]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ee950c57-b774-486f-8862-5fa4d800a41d",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true
   },
   "source": [
    "### Combine all Booleans and Combine Cholesterol"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 667,
   "id": "d6745b0f-8b01-49ee-a2c7-c1f614155205",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>BooleanScore</th>\n",
       "      <th>Age</th>\n",
       "      <th>Ethnicity</th>\n",
       "      <th>EducationLevel</th>\n",
       "      <th>BMI</th>\n",
       "      <th>AlcoholConsumption</th>\n",
       "      <th>PhysicalActivity</th>\n",
       "      <th>DietQuality</th>\n",
       "      <th>SleepQuality</th>\n",
       "      <th>SystolicBP</th>\n",
       "      <th>DiastolicBP</th>\n",
       "      <th>Chol_Score</th>\n",
       "      <th>MMSE</th>\n",
       "      <th>FunctionalAssessment</th>\n",
       "      <th>ADL</th>\n",
       "      <th>Diagnosis</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.200000</td>\n",
       "      <td>-0.212368</td>\n",
       "      <td>-0.700408</td>\n",
       "      <td>0.788833</td>\n",
       "      <td>-0.655225</td>\n",
       "      <td>0.565923</td>\n",
       "      <td>0.492525</td>\n",
       "      <td>-1.253593</td>\n",
       "      <td>1.119918</td>\n",
       "      <td>0.298159</td>\n",
       "      <td>-1.014750</td>\n",
       "      <td>-0.732903</td>\n",
       "      <td>0.779037</td>\n",
       "      <td>0.497506</td>\n",
       "      <td>-1.104434</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.066667</td>\n",
       "      <td>1.567757</td>\n",
       "      <td>-0.700408</td>\n",
       "      <td>-1.422782</td>\n",
       "      <td>-0.114751</td>\n",
       "      <td>-0.954895</td>\n",
       "      <td>0.945093</td>\n",
       "      <td>-1.538442</td>\n",
       "      <td>0.056836</td>\n",
       "      <td>-0.742572</td>\n",
       "      <td>-1.469595</td>\n",
       "      <td>0.807454</td>\n",
       "      <td>0.680297</td>\n",
       "      <td>0.704907</td>\n",
       "      <td>-0.810601</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.200000</td>\n",
       "      <td>-0.212368</td>\n",
       "      <td>2.311955</td>\n",
       "      <td>-0.316974</td>\n",
       "      <td>-1.366428</td>\n",
       "      <td>1.653006</td>\n",
       "      <td>1.023896</td>\n",
       "      <td>-1.088855</td>\n",
       "      <td>1.487380</td>\n",
       "      <td>-1.359301</td>\n",
       "      <td>1.486898</td>\n",
       "      <td>0.270603</td>\n",
       "      <td>-0.859222</td>\n",
       "      <td>0.281813</td>\n",
       "      <td>0.724491</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.200000</td>\n",
       "      <td>-0.101111</td>\n",
       "      <td>-0.700408</td>\n",
       "      <td>-0.316974</td>\n",
       "      <td>0.851625</td>\n",
       "      <td>0.376930</td>\n",
       "      <td>1.227995</td>\n",
       "      <td>0.839804</td>\n",
       "      <td>0.760833</td>\n",
       "      <td>-0.626935</td>\n",
       "      <td>1.430043</td>\n",
       "      <td>-0.507643</td>\n",
       "      <td>-0.088723</td>\n",
       "      <td>1.343346</td>\n",
       "      <td>0.508044</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.133333</td>\n",
       "      <td>1.567757</td>\n",
       "      <td>-0.700408</td>\n",
       "      <td>-1.422782</td>\n",
       "      <td>-0.961607</td>\n",
       "      <td>1.461793</td>\n",
       "      <td>0.486696</td>\n",
       "      <td>-1.443293</td>\n",
       "      <td>-0.824566</td>\n",
       "      <td>-1.552029</td>\n",
       "      <td>1.543754</td>\n",
       "      <td>0.017758</td>\n",
       "      <td>-0.143712</td>\n",
       "      <td>0.333665</td>\n",
       "      <td>-1.684679</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   BooleanScore       Age  Ethnicity  EducationLevel       BMI  \\\n",
       "0      0.200000 -0.212368  -0.700408        0.788833 -0.655225   \n",
       "1      0.066667  1.567757  -0.700408       -1.422782 -0.114751   \n",
       "2      0.200000 -0.212368   2.311955       -0.316974 -1.366428   \n",
       "3      0.200000 -0.101111  -0.700408       -0.316974  0.851625   \n",
       "4      0.133333  1.567757  -0.700408       -1.422782 -0.961607   \n",
       "\n",
       "   AlcoholConsumption  PhysicalActivity  DietQuality  SleepQuality  \\\n",
       "0            0.565923          0.492525    -1.253593      1.119918   \n",
       "1           -0.954895          0.945093    -1.538442      0.056836   \n",
       "2            1.653006          1.023896    -1.088855      1.487380   \n",
       "3            0.376930          1.227995     0.839804      0.760833   \n",
       "4            1.461793          0.486696    -1.443293     -0.824566   \n",
       "\n",
       "   SystolicBP  DiastolicBP  Chol_Score      MMSE  FunctionalAssessment  \\\n",
       "0    0.298159    -1.014750   -0.732903  0.779037              0.497506   \n",
       "1   -0.742572    -1.469595    0.807454  0.680297              0.704907   \n",
       "2   -1.359301     1.486898    0.270603 -0.859222              0.281813   \n",
       "3   -0.626935     1.430043   -0.507643 -0.088723              1.343346   \n",
       "4   -1.552029     1.543754    0.017758 -0.143712              0.333665   \n",
       "\n",
       "        ADL  Diagnosis  \n",
       "0 -1.104434          0  \n",
       "1 -0.810601          0  \n",
       "2  0.724491          0  \n",
       "3  0.508044          0  \n",
       "4 -1.684679          0  "
      ]
     },
     "execution_count": 667,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Replace all Boolean features by BooleanScore and the four cholesterol features by Chol_Score\n",
    "meanbool = bool_df.mean(axis=1)\n",
    "ndf = rdf.drop(col_bool, axis=1)\n",
    "# Insert BooleanScore into first (0th) columns\n",
    "ndf.insert(0, 'BooleanScore', meanbool)\n",
    "\n",
    "# insert Chol_Score at position occupied by cholesterol features and remove them\n",
    "col_chol = ['CholesterolTotal', 'CholesterolLDL', 'CholesterolHDL', 'CholesterolTriglycerides']\n",
    "chol = ndf[col_chol].mean(axis=1)\n",
    "ndf.insert(ndf.columns.get_loc('CholesterolTotal'), 'Chol_Score', chol)\n",
    "ndf = ndf.drop(col_chol, axis=1)\n",
    "\n",
    "x = ndf.iloc[:, :-1].values\n",
    "y = ndf.iloc[:, -1].values\n",
    "x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.25, random_state = 0)\n",
    "ndf.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 668,
   "id": "c9fd045f-cc7e-4fbe-a060-f0856670ccd1",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2149, 16)"
      ]
     },
     "execution_count": 668,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ndf.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 669,
   "id": "0c69d8a9-4a95-4151-a5b7-94c4f218770c",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 10 folds for each of 1 candidates, totalling 10 fits\n",
      "RandomForestClassifier()\n",
      "Best Parameters: {'criterion': 'entropy', 'max_features': None, 'min_samples_leaf': 2, 'min_samples_split': 20, 'min_weight_fraction_leaf': 0.0, 'n_estimators': 100}\n",
      "Accuracy: 0.8361 (0.0210)\n"
     ]
    }
   ],
   "source": [
    "# Fit RF model with known optimal parameters\n",
    "model = RandomForestClassifier()\n",
    "finalres = gs(model, x_train, y_train, params, 10, 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 670,
   "id": "90309523-d05f-4db6-b374-0f3d7db72b7e",
   "metadata": {},
   "outputs": [],
   "source": [
    "acc_boolchol = finalres[0]\n",
    "std_boolchol = finalres[1]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "237babb3-9582-4362-816a-3267840affe2",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true
   },
   "source": [
    "### Combine MemoryComplaints + BehavioralProblems & Combine Cholesterol"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 672,
   "id": "a882e831-0c31-4e38-9678-cfe7e3d1bfe6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Mem_Beh</th>\n",
       "      <th>Age</th>\n",
       "      <th>Ethnicity</th>\n",
       "      <th>EducationLevel</th>\n",
       "      <th>BMI</th>\n",
       "      <th>AlcoholConsumption</th>\n",
       "      <th>PhysicalActivity</th>\n",
       "      <th>DietQuality</th>\n",
       "      <th>SleepQuality</th>\n",
       "      <th>SystolicBP</th>\n",
       "      <th>DiastolicBP</th>\n",
       "      <th>Chol_Score</th>\n",
       "      <th>MMSE</th>\n",
       "      <th>FunctionalAssessment</th>\n",
       "      <th>ADL</th>\n",
       "      <th>Diagnosis</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>-0.212368</td>\n",
       "      <td>-0.700408</td>\n",
       "      <td>0.788833</td>\n",
       "      <td>-0.655225</td>\n",
       "      <td>0.565923</td>\n",
       "      <td>0.492525</td>\n",
       "      <td>-1.253593</td>\n",
       "      <td>1.119918</td>\n",
       "      <td>0.298159</td>\n",
       "      <td>-1.014750</td>\n",
       "      <td>-0.732903</td>\n",
       "      <td>0.779037</td>\n",
       "      <td>0.497506</td>\n",
       "      <td>-1.104434</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.567757</td>\n",
       "      <td>-0.700408</td>\n",
       "      <td>-1.422782</td>\n",
       "      <td>-0.114751</td>\n",
       "      <td>-0.954895</td>\n",
       "      <td>0.945093</td>\n",
       "      <td>-1.538442</td>\n",
       "      <td>0.056836</td>\n",
       "      <td>-0.742572</td>\n",
       "      <td>-1.469595</td>\n",
       "      <td>0.807454</td>\n",
       "      <td>0.680297</td>\n",
       "      <td>0.704907</td>\n",
       "      <td>-0.810601</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>-0.212368</td>\n",
       "      <td>2.311955</td>\n",
       "      <td>-0.316974</td>\n",
       "      <td>-1.366428</td>\n",
       "      <td>1.653006</td>\n",
       "      <td>1.023896</td>\n",
       "      <td>-1.088855</td>\n",
       "      <td>1.487380</td>\n",
       "      <td>-1.359301</td>\n",
       "      <td>1.486898</td>\n",
       "      <td>0.270603</td>\n",
       "      <td>-0.859222</td>\n",
       "      <td>0.281813</td>\n",
       "      <td>0.724491</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.500000</td>\n",
       "      <td>-0.101111</td>\n",
       "      <td>-0.700408</td>\n",
       "      <td>-0.316974</td>\n",
       "      <td>0.851625</td>\n",
       "      <td>0.376930</td>\n",
       "      <td>1.227995</td>\n",
       "      <td>0.839804</td>\n",
       "      <td>0.760833</td>\n",
       "      <td>-0.626935</td>\n",
       "      <td>1.430043</td>\n",
       "      <td>-0.507643</td>\n",
       "      <td>-0.088723</td>\n",
       "      <td>1.343346</td>\n",
       "      <td>0.508044</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.567757</td>\n",
       "      <td>-0.700408</td>\n",
       "      <td>-1.422782</td>\n",
       "      <td>-0.961607</td>\n",
       "      <td>1.461793</td>\n",
       "      <td>0.486696</td>\n",
       "      <td>-1.443293</td>\n",
       "      <td>-0.824566</td>\n",
       "      <td>-1.552029</td>\n",
       "      <td>1.543754</td>\n",
       "      <td>0.017758</td>\n",
       "      <td>-0.143712</td>\n",
       "      <td>0.333665</td>\n",
       "      <td>-1.684679</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Mem_Beh       Age  Ethnicity  EducationLevel       BMI  AlcoholConsumption  \\\n",
       "0 0.000000 -0.212368  -0.700408        0.788833 -0.655225            0.565923   \n",
       "1 0.000000  1.567757  -0.700408       -1.422782 -0.114751           -0.954895   \n",
       "2 0.000000 -0.212368   2.311955       -0.316974 -1.366428            1.653006   \n",
       "3 0.500000 -0.101111  -0.700408       -0.316974  0.851625            0.376930   \n",
       "4 0.000000  1.567757  -0.700408       -1.422782 -0.961607            1.461793   \n",
       "\n",
       "   PhysicalActivity  DietQuality  SleepQuality  SystolicBP  DiastolicBP  \\\n",
       "0          0.492525    -1.253593      1.119918    0.298159    -1.014750   \n",
       "1          0.945093    -1.538442      0.056836   -0.742572    -1.469595   \n",
       "2          1.023896    -1.088855      1.487380   -1.359301     1.486898   \n",
       "3          1.227995     0.839804      0.760833   -0.626935     1.430043   \n",
       "4          0.486696    -1.443293     -0.824566   -1.552029     1.543754   \n",
       "\n",
       "   Chol_Score      MMSE  FunctionalAssessment       ADL  Diagnosis  \n",
       "0   -0.732903  0.779037              0.497506 -1.104434          0  \n",
       "1    0.807454  0.680297              0.704907 -0.810601          0  \n",
       "2    0.270603 -0.859222              0.281813  0.724491          0  \n",
       "3   -0.507643 -0.088723              1.343346  0.508044          0  \n",
       "4    0.017758 -0.143712              0.333665 -1.684679          0  "
      ]
     },
     "execution_count": 672,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Replace the top two contributing Boolean features with a single value,\n",
    "#   and Replace all Cholesterol features with Chol_Score\n",
    "\n",
    "twobool = rdf[['MemoryComplaints', 'BehavioralProblems']].mean(axis=1)\n",
    "ndf = rdf.drop(col_bool, axis=1)\n",
    "ndf.insert(0, 'Mem_Beh', twobool)\n",
    "\n",
    "col_chol = ['CholesterolTotal', 'CholesterolLDL', 'CholesterolHDL', 'CholesterolTriglycerides']\n",
    "chol = ndf[col_chol].mean(axis=1)\n",
    "\n",
    "ndf.insert(ndf.columns.get_loc('CholesterolTotal'), 'Chol_Score', chol)\n",
    "ndf = ndf.drop(col_chol, axis=1)\n",
    "\n",
    "x = ndf.iloc[:, :-1].values\n",
    "y = ndf.iloc[:, -1].values\n",
    "x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.25, random_state = 0)\n",
    "ndf.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 673,
   "id": "c2633446-bc6d-4268-8c24-a2355dc036f2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2149, 16)"
      ]
     },
     "execution_count": 673,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ndf.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 674,
   "id": "51189879-f762-456e-a55c-7588fa54ec42",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 10 folds for each of 1 candidates, totalling 10 fits\n",
      "RandomForestClassifier()\n",
      "Best Parameters: {'criterion': 'entropy', 'max_features': None, 'min_samples_leaf': 2, 'min_samples_split': 20, 'min_weight_fraction_leaf': 0.0, 'n_estimators': 100}\n",
      "Accuracy: 0.9485 (0.0130)\n"
     ]
    }
   ],
   "source": [
    "# Fit RF model with known optimal parameters\n",
    "model = RandomForestClassifier()\n",
    "finalres = gs(model, x_train, y_train, params, 10, 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 675,
   "id": "08df972a-ec26-4b01-a978-310f3ed7a572",
   "metadata": {},
   "outputs": [],
   "source": [
    "acc_mbchol = finalres[0]\n",
    "std_mbchol = finalres[1]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "82e057d4-8af1-49ac-8ce3-8fe56741fc6b",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true
   },
   "source": [
    "### Combine Top 7 Features + (MemoryComplaints, BehavioralProblems) + Cholesterol"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 682,
   "id": "7a681eb7-2558-4c69-870f-4a91f35cdf9d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['MMSE', 'FunctionalAssessment', 'ADL', 'Age', 'DietQuality', 'PhysicalActivity', 'SystolicBP']\n"
     ]
    }
   ],
   "source": [
    "# Use Top 7 features (excluding the features being replaced)\n",
    "#   add Mem_Beh score and Chol_Score\n",
    "\n",
    "col_chol = ['CholesterolTotal', 'CholesterolLDL', 'CholesterolHDL', 'CholesterolTriglycerides']\n",
    "featlist = feat_imp_ord.copy()\n",
    "rlist = col_chol + ['MemoryComplaints', 'BehavioralProblems']\n",
    "\n",
    "# Remove Boolean and Cholesterol columns, then take the 7 top contributors\n",
    "for item in rlist:\n",
    "    featlist.remove(item)\n",
    "featlist = featlist [:7]\n",
    "print(featlist)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 683,
   "id": "59a418cc-c929-4ad9-af1d-c8a435823e5e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Mem_Beh</th>\n",
       "      <th>MMSE</th>\n",
       "      <th>FunctionalAssessment</th>\n",
       "      <th>ADL</th>\n",
       "      <th>Age</th>\n",
       "      <th>DietQuality</th>\n",
       "      <th>PhysicalActivity</th>\n",
       "      <th>SystolicBP</th>\n",
       "      <th>Chol_Score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.779037</td>\n",
       "      <td>0.497506</td>\n",
       "      <td>-1.104434</td>\n",
       "      <td>-0.212368</td>\n",
       "      <td>-1.253593</td>\n",
       "      <td>0.492525</td>\n",
       "      <td>0.298159</td>\n",
       "      <td>-0.732903</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.680297</td>\n",
       "      <td>0.704907</td>\n",
       "      <td>-0.810601</td>\n",
       "      <td>1.567757</td>\n",
       "      <td>-1.538442</td>\n",
       "      <td>0.945093</td>\n",
       "      <td>-0.742572</td>\n",
       "      <td>0.807454</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>-0.859222</td>\n",
       "      <td>0.281813</td>\n",
       "      <td>0.724491</td>\n",
       "      <td>-0.212368</td>\n",
       "      <td>-1.088855</td>\n",
       "      <td>1.023896</td>\n",
       "      <td>-1.359301</td>\n",
       "      <td>0.270603</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.500000</td>\n",
       "      <td>-0.088723</td>\n",
       "      <td>1.343346</td>\n",
       "      <td>0.508044</td>\n",
       "      <td>-0.101111</td>\n",
       "      <td>0.839804</td>\n",
       "      <td>1.227995</td>\n",
       "      <td>-0.626935</td>\n",
       "      <td>-0.507643</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>-0.143712</td>\n",
       "      <td>0.333665</td>\n",
       "      <td>-1.684679</td>\n",
       "      <td>1.567757</td>\n",
       "      <td>-1.443293</td>\n",
       "      <td>0.486696</td>\n",
       "      <td>-1.552029</td>\n",
       "      <td>0.017758</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Mem_Beh      MMSE  FunctionalAssessment       ADL       Age  DietQuality  \\\n",
       "0 0.000000  0.779037              0.497506 -1.104434 -0.212368    -1.253593   \n",
       "1 0.000000  0.680297              0.704907 -0.810601  1.567757    -1.538442   \n",
       "2 0.000000 -0.859222              0.281813  0.724491 -0.212368    -1.088855   \n",
       "3 0.500000 -0.088723              1.343346  0.508044 -0.101111     0.839804   \n",
       "4 0.000000 -0.143712              0.333665 -1.684679  1.567757    -1.443293   \n",
       "\n",
       "   PhysicalActivity  SystolicBP  Chol_Score  \n",
       "0          0.492525    0.298159   -0.732903  \n",
       "1          0.945093   -0.742572    0.807454  \n",
       "2          1.023896   -1.359301    0.270603  \n",
       "3          1.227995   -0.626935   -0.507643  \n",
       "4          0.486696   -1.552029    0.017758  "
      ]
     },
     "execution_count": 683,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ndf = rdf[featlist]\n",
    "\n",
    "# Add Mem_Beh score\n",
    "twobool = rdf[['MemoryComplaints', 'BehavioralProblems']].mean(axis=1)\n",
    "ndf.insert(0, 'Mem_Beh', twobool)\n",
    "\n",
    "# Add Chol_Score\n",
    "col_chol = ['CholesterolTotal', 'CholesterolLDL', 'CholesterolHDL', 'CholesterolTriglycerides']\n",
    "chol = rdf[col_chol].mean(axis=1)\n",
    "ndf.insert(len(ndf.columns), 'Chol_Score', chol)\n",
    "\n",
    "# Recall that ndf has only features\n",
    "#   must get the label (y-value) from rdf (dataframe which has all original columns, scaled)\n",
    "x = ndf.iloc[:, :].values\n",
    "y = rdf.iloc[:, -1].values\n",
    "x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.25, random_state = 0)\n",
    "ndf.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 684,
   "id": "5ddaec51-f631-4089-904f-f17ff9e53f1f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((2149, 9), (2149, 9), (2149,))"
      ]
     },
     "execution_count": 684,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ndf.shape, x.shape, y.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 685,
   "id": "faff2651-be43-45b5-b55f-b92e7fbad19b",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 10 folds for each of 1 candidates, totalling 10 fits\n",
      "RandomForestClassifier()\n",
      "Best Parameters: {'criterion': 'entropy', 'max_features': None, 'min_samples_leaf': 2, 'min_samples_split': 20, 'min_weight_fraction_leaf': 0.0, 'n_estimators': 100}\n",
      "Accuracy: 0.9472 (0.0134)\n"
     ]
    }
   ],
   "source": [
    "# Fit RF model with known optimal parameters\n",
    "model = RandomForestClassifier()\n",
    "finalres = gs(model, x_train, y_train, params, 10, 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 686,
   "id": "87fae4c8-72cf-4943-a4a7-423834b3595b",
   "metadata": {},
   "outputs": [],
   "source": [
    "acc_top7mbchol = finalres[0]\n",
    "std_top7mbchol = finalres[1]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7cea77e9-93b5-48d1-90cb-b41c96470cdd",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true
   },
   "source": [
    "### Combine Top 5 Features + (MemoryComplaints, BehavioralProblems) + Cholesterol"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 687,
   "id": "b0c93ed3-80d6-41e5-94eb-0379027aece9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['MMSE', 'FunctionalAssessment', 'ADL', 'Age', 'DietQuality']\n"
     ]
    }
   ],
   "source": [
    "# Use Top 7 features (excluding the features being replaced)\n",
    "#   add Mem_Beh score and Chol_Score\n",
    "\n",
    "col_chol = ['CholesterolTotal', 'CholesterolLDL', 'CholesterolHDL', 'CholesterolTriglycerides']\n",
    "featlist = feat_imp_ord.copy()\n",
    "\n",
    "# Remove Boolean and Cholesterol columns, then take the 5 top contributors\n",
    "rlist = col_chol + ['MemoryComplaints', 'BehavioralProblems']\n",
    "for item in rlist:\n",
    "    featlist.remove(item)\n",
    "featlist = featlist [:5]\n",
    "print(featlist)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 688,
   "id": "b6a827d5-bc2e-4509-bb0f-a0b66aedda30",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Mem_Beh</th>\n",
       "      <th>MMSE</th>\n",
       "      <th>FunctionalAssessment</th>\n",
       "      <th>ADL</th>\n",
       "      <th>Age</th>\n",
       "      <th>DietQuality</th>\n",
       "      <th>Chol_Score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.779037</td>\n",
       "      <td>0.497506</td>\n",
       "      <td>-1.104434</td>\n",
       "      <td>-0.212368</td>\n",
       "      <td>-1.253593</td>\n",
       "      <td>-0.732903</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.680297</td>\n",
       "      <td>0.704907</td>\n",
       "      <td>-0.810601</td>\n",
       "      <td>1.567757</td>\n",
       "      <td>-1.538442</td>\n",
       "      <td>0.807454</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>-0.859222</td>\n",
       "      <td>0.281813</td>\n",
       "      <td>0.724491</td>\n",
       "      <td>-0.212368</td>\n",
       "      <td>-1.088855</td>\n",
       "      <td>0.270603</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.500000</td>\n",
       "      <td>-0.088723</td>\n",
       "      <td>1.343346</td>\n",
       "      <td>0.508044</td>\n",
       "      <td>-0.101111</td>\n",
       "      <td>0.839804</td>\n",
       "      <td>-0.507643</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>-0.143712</td>\n",
       "      <td>0.333665</td>\n",
       "      <td>-1.684679</td>\n",
       "      <td>1.567757</td>\n",
       "      <td>-1.443293</td>\n",
       "      <td>0.017758</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Mem_Beh      MMSE  FunctionalAssessment       ADL       Age  DietQuality  \\\n",
       "0 0.000000  0.779037              0.497506 -1.104434 -0.212368    -1.253593   \n",
       "1 0.000000  0.680297              0.704907 -0.810601  1.567757    -1.538442   \n",
       "2 0.000000 -0.859222              0.281813  0.724491 -0.212368    -1.088855   \n",
       "3 0.500000 -0.088723              1.343346  0.508044 -0.101111     0.839804   \n",
       "4 0.000000 -0.143712              0.333665 -1.684679  1.567757    -1.443293   \n",
       "\n",
       "   Chol_Score  \n",
       "0   -0.732903  \n",
       "1    0.807454  \n",
       "2    0.270603  \n",
       "3   -0.507643  \n",
       "4    0.017758  "
      ]
     },
     "execution_count": 688,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ndf = rdf[featlist]\n",
    "\n",
    "# Add Mem_Beh score\n",
    "twobool = rdf[['MemoryComplaints', 'BehavioralProblems']].mean(axis=1)\n",
    "ndf.insert(0, 'Mem_Beh', twobool)\n",
    "\n",
    "# Add Chol_Score\n",
    "col_chol = ['CholesterolTotal', 'CholesterolLDL', 'CholesterolHDL', 'CholesterolTriglycerides']\n",
    "chol = rdf[col_chol].mean(axis=1)\n",
    "ndf.insert(len(ndf.columns), 'Chol_Score', chol)\n",
    "\n",
    "# Recall that ndf has only features\n",
    "#   must get the label from rdf (dataframe which has all original columns, scaled)\n",
    "x = ndf.iloc[:, :].values\n",
    "y = rdf.iloc[:, -1].values\n",
    "x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.25, random_state = 0)\n",
    "ndf.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 689,
   "id": "4a7d8b4d-1577-46e8-a439-dc3b82b04c33",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((2149, 7), (2149, 7), (2149,))"
      ]
     },
     "execution_count": 689,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ndf.shape, x.shape, y.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 690,
   "id": "637342d6-9ba5-44de-b9fc-53eac84124d7",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 10 folds for each of 1 candidates, totalling 10 fits\n",
      "RandomForestClassifier()\n",
      "Best Parameters: {'criterion': 'entropy', 'max_features': None, 'min_samples_leaf': 2, 'min_samples_split': 20, 'min_weight_fraction_leaf': 0.0, 'n_estimators': 100}\n",
      "Accuracy: 0.9460 (0.0142)\n"
     ]
    }
   ],
   "source": [
    "# Fit RF model with known optimal parameters\n",
    "model = RandomForestClassifier()\n",
    "finalres = gs(model, x_train, y_train, params, 10, 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 691,
   "id": "0dc9fb57-8cfd-4c0a-932a-67909739c9c4",
   "metadata": {},
   "outputs": [],
   "source": [
    "acc_top5mbchol = finalres[0]\n",
    "std_top5mbchol = finalres[1]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ccdea8de-6137-4abf-931e-a4161f99fc73",
   "metadata": {},
   "source": [
    "## Table and Plot of Final Results for Feature Extraction with RF and Best Models"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 794,
   "id": "fa481d5e-574f-4f13-afe5-3bdb9963fe4c",
   "metadata": {},
   "outputs": [],
   "source": [
    "acc_allbool, acc_membeh, acc_chol, acc_boolchol, acc_mbchol, acc_top7mbchol, acc_top5mbchol, acc_rf\n",
    "\n",
    "row_labels = ['AllBools (RF)', '(Memory+Behavioral) (RF)', 'CholCombo (RF)', 'AllBools+CholCombo (RF)', '(Memory+Behavioral)+CholCombo (RF)',\n",
    "              'Top7+(Memory+Behavioral)+CholCombo (RF)', 'Top7+(Memory+Behavioral)+CholCombo (RF)', 'RandomForestAllFeatures (RF)' ]\n",
    "accuracies = [acc_allbool, acc_membeh, acc_chol, acc_boolchol, acc_mbchol, acc_top7mbchol, acc_top5mbchol, acc_rf]\n",
    "stdevs = [std_allbool, std_membeh, std_chol, std_boolchol, std_mbchol, std_top7mbchol, std_top5mbchol, std_rf]\n",
    "accuracies = pd.DataFrame(accuracies, row_labels, ['Accuracy(train)'])\n",
    "stdevs = pd.DataFrame(stdevs, row_labels, ['StDev'])\n",
    "fsex_train_results = pd.concat([accuracies, stdevs], axis = 1)\n",
    "pd.options.display.float_format = \"{:,.2f}\".format\n",
    "fsex_train_results *= 100\n",
    "#fsex_train_results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 796,
   "id": "fed32d63-ef4a-4d35-9d4e-ec7d14770cf8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Accuracy(train)</th>\n",
       "      <th>StDev</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Extra Trees</th>\n",
       "      <td>94.30</td>\n",
       "      <td>1.92</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>LightGBM</th>\n",
       "      <td>94.88</td>\n",
       "      <td>1.64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>RandomForest</th>\n",
       "      <td>94.66</td>\n",
       "      <td>1.48</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>RFge001</th>\n",
       "      <td>94.60</td>\n",
       "      <td>1.78</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>RFTop10</th>\n",
       "      <td>94.60</td>\n",
       "      <td>1.57</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>RFTop5</th>\n",
       "      <td>94.60</td>\n",
       "      <td>1.21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AllBools (RF)</th>\n",
       "      <td>84.11</td>\n",
       "      <td>2.35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>(Memory+Behavioral) (RF)</th>\n",
       "      <td>94.79</td>\n",
       "      <td>1.31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CholCombo (RF)</th>\n",
       "      <td>94.72</td>\n",
       "      <td>1.42</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AllBools+CholCombo (RF)</th>\n",
       "      <td>83.61</td>\n",
       "      <td>2.10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>(Memory+Behavioral)+CholCombo (RF)</th>\n",
       "      <td>94.85</td>\n",
       "      <td>1.30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Top7+(Memory+Behavioral)+CholCombo (RF)</th>\n",
       "      <td>94.72</td>\n",
       "      <td>1.34</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Top7+(Memory+Behavioral)+CholCombo (RF)</th>\n",
       "      <td>94.60</td>\n",
       "      <td>1.42</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>RandomForestAllFeatures (RF)</th>\n",
       "      <td>94.66</td>\n",
       "      <td>1.48</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                         Accuracy(train)  StDev\n",
       "Extra Trees                                        94.30   1.92\n",
       "LightGBM                                           94.88   1.64\n",
       "RandomForest                                       94.66   1.48\n",
       "RFge001                                            94.60   1.78\n",
       "RFTop10                                            94.60   1.57\n",
       "RFTop5                                             94.60   1.21\n",
       "AllBools (RF)                                      84.11   2.35\n",
       "(Memory+Behavioral) (RF)                           94.79   1.31\n",
       "CholCombo (RF)                                     94.72   1.42\n",
       "AllBools+CholCombo (RF)                            83.61   2.10\n",
       "(Memory+Behavioral)+CholCombo (RF)                 94.85   1.30\n",
       "Top7+(Memory+Behavioral)+CholCombo (RF)            94.72   1.34\n",
       "Top7+(Memory+Behavioral)+CholCombo (RF)            94.60   1.42\n",
       "RandomForestAllFeatures (RF)                       94.66   1.48"
      ]
     },
     "execution_count": 796,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "all_train_results = pd.concat([tuned_train_results, fsex_train_results], axis = 0)\n",
    "all_train_results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 804,
   "id": "6bb99053-3d91-4458-ba27-f01331afdde4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Accuracy(train)</th>\n",
       "      <th>StDev</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>LightGBM</th>\n",
       "      <td>94.88</td>\n",
       "      <td>1.64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>(Memory+Behavioral)+CholCombo (RF)</th>\n",
       "      <td>94.85</td>\n",
       "      <td>1.30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>(Memory+Behavioral) (RF)</th>\n",
       "      <td>94.79</td>\n",
       "      <td>1.31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CholCombo (RF)</th>\n",
       "      <td>94.72</td>\n",
       "      <td>1.42</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Top7+(Memory+Behavioral)+CholCombo (RF)</th>\n",
       "      <td>94.72</td>\n",
       "      <td>1.34</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>RandomForest</th>\n",
       "      <td>94.66</td>\n",
       "      <td>1.48</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>RandomForestAllFeatures (RF)</th>\n",
       "      <td>94.66</td>\n",
       "      <td>1.48</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>RFTop5</th>\n",
       "      <td>94.60</td>\n",
       "      <td>1.21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Top7+(Memory+Behavioral)+CholCombo (RF)</th>\n",
       "      <td>94.60</td>\n",
       "      <td>1.42</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>RFge001</th>\n",
       "      <td>94.60</td>\n",
       "      <td>1.78</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>RFTop10</th>\n",
       "      <td>94.60</td>\n",
       "      <td>1.57</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Extra Trees</th>\n",
       "      <td>94.30</td>\n",
       "      <td>1.92</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AllBools (RF)</th>\n",
       "      <td>84.11</td>\n",
       "      <td>2.35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AllBools+CholCombo (RF)</th>\n",
       "      <td>83.61</td>\n",
       "      <td>2.10</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                         Accuracy(train)  StDev\n",
       "LightGBM                                           94.88   1.64\n",
       "(Memory+Behavioral)+CholCombo (RF)                 94.85   1.30\n",
       "(Memory+Behavioral) (RF)                           94.79   1.31\n",
       "CholCombo (RF)                                     94.72   1.42\n",
       "Top7+(Memory+Behavioral)+CholCombo (RF)            94.72   1.34\n",
       "RandomForest                                       94.66   1.48\n",
       "RandomForestAllFeatures (RF)                       94.66   1.48\n",
       "RFTop5                                             94.60   1.21\n",
       "Top7+(Memory+Behavioral)+CholCombo (RF)            94.60   1.42\n",
       "RFge001                                            94.60   1.78\n",
       "RFTop10                                            94.60   1.57\n",
       "Extra Trees                                        94.30   1.92\n",
       "AllBools (RF)                                      84.11   2.35\n",
       "AllBools+CholCombo (RF)                            83.61   2.10"
      ]
     },
     "execution_count": 804,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "all_train_results.sort_values(by = 'Accuracy(train)', ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 837,
   "id": "ad309f92-ca22-4472-a362-e917bcf4e63a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "all_train_results.sort_values(by = 'Accuracy(train)')['Accuracy(train)'].plot(kind='barh', color=plt.cm.Set3(np.arange(len(f10))))\n",
    "plt.xlim(80, 100)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e096d2d9-1486-4b02-b6ae-cc2236b2e732",
   "metadata": {},
   "source": [
    "## Conclusion"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5aa7ebf5-d02a-4911-a47d-8138ba17e0cb",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-block alert-success\">\n",
    "A score difference of 0.5% is insignificant.  The best model were obtained with <b>Random Forest</b> (tuned) across extracted features or all features,\n",
    "    and with <b>LightGBM</b> (tuned).  The Extra Trees (tuned) classifer also performed well, within < 0.6% of RF and LightGBM models.  Some feature\n",
    "    combinations were favorable (top two Booleans, cholesterol combo) whereas grouping all Boolean features resulted in suboptimal fits.\n",
    "</div>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8e60bbe9-0579-4611-9964-39c761234e8c",
   "metadata": {
    "jp-MarkdownHeadingCollapsed": true
   },
   "source": [
    "## Dimensionality Reduction Attempts"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "56dce852-7f41-460f-ae90-31c7ac9c06f4",
   "metadata": {},
   "source": [
    "#### Note: none of these attempts yieleded any improvements; their results were not incorporated above"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 699,
   "id": "1075822a-482b-48f0-8f5a-fad3e59106d5",
   "metadata": {},
   "outputs": [],
   "source": [
    "x = rdf.iloc[:, :-1].values\n",
    "y = rdf.iloc[:, -1].values\n",
    "x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state = 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 700,
   "id": "ee73fbac-68c8-4ff2-a7be-f680e6dbc7a8",
   "metadata": {},
   "outputs": [],
   "source": [
    "# In the output below, dimensionality reduction has dismal results.\n",
    "#   The lowest-performing algorithm, so far, has been LinearRegression with accuracy of 0.8442\n",
    "#   The only algorithm that comes close is LDA for LinearRegression, giving accuracy = 0.8406"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "290d9f17-c499-4bc9-b491-cf477e9c6e67",
   "metadata": {},
   "source": [
    "### Isomap Embedding"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 702,
   "id": "ad7cfc4e-2b0f-4847-8276-a2cd19fafc9c",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.\n",
      "[Parallel(n_jobs=-1)]: Done   3 out of  10 | elapsed:   11.6s remaining:   27.2s\n",
      "[Parallel(n_jobs=-1)]: Done   7 out of  10 | elapsed:   11.7s remaining:    4.9s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.7225 (0.0258)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=-1)]: Done  10 out of  10 | elapsed:   14.2s finished\n"
     ]
    }
   ],
   "source": [
    "from sklearn.manifold import Isomap\n",
    "from sklearn.pipeline import Pipeline\n",
    "from numpy import mean, std\n",
    "# define the pipeline\n",
    "steps = [('iso', Isomap(n_components=10)), ('m', LogisticRegression(random_state = 0))]\n",
    "model = Pipeline(steps=steps)\n",
    "# evaluate model\n",
    "cv = 10\n",
    "n_scores = cross_val_score(model, X = x_train, y = y_train, scoring='accuracy', cv=cv, n_jobs=-1, verbose = 3)\n",
    "acc_iso_lg = mean(n_scores)\n",
    "std_iso_lg = std(n_scores)\n",
    "print('Accuracy: %.4f (%.4f)' % (mean(n_scores), std(n_scores)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 703,
   "id": "c3dea64b-ff55-4863-8604-d3c39814dced",
   "metadata": {},
   "outputs": [],
   "source": [
    "# previous value was 0.8441860465116279"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 704,
   "id": "9432af0d-5f5d-482f-87cc-558220ab5dc1",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.\n",
      "[Parallel(n_jobs=-1)]: Done   3 out of  10 | elapsed:    8.6s remaining:   20.1s\n",
      "[Parallel(n_jobs=-1)]: Done   7 out of  10 | elapsed:    8.6s remaining:    3.6s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.7033 (0.0278)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=-1)]: Done  10 out of  10 | elapsed:   11.8s finished\n"
     ]
    }
   ],
   "source": [
    "steps = [('iso', Isomap(n_components=10)), ('m', ExtraTreesClassifier(n_estimators=250))]\n",
    "model = Pipeline(steps=steps)\n",
    "cv = 10\n",
    "n_scores = cross_val_score(model, X = x_train, y = y_train, scoring='accuracy', cv=cv, n_jobs=-1, verbose = 3)\n",
    "acc_iso_et = mean(n_scores)\n",
    "std_iso_et = std(n_scores)\n",
    "print('Accuracy: %.4f (%.4f)' % (mean(n_scores), std(n_scores)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 705,
   "id": "afa9dcf2-5d55-4f31-bb08-2ae51aa7032b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# previous value was 0.8674418604651163"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 706,
   "id": "c36810b5-7591-4816-ae2c-f583c4f0520a",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.\n",
      "[Parallel(n_jobs=-1)]: Done   3 out of  10 | elapsed:   11.4s remaining:   26.7s\n",
      "[Parallel(n_jobs=-1)]: Done   7 out of  10 | elapsed:   11.5s remaining:    4.9s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.7027 (0.0255)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=-1)]: Done  10 out of  10 | elapsed:   16.0s finished\n"
     ]
    }
   ],
   "source": [
    "steps = [('iso', Isomap(n_components=10)), ('m', RandomForestClassifier(criterion = 'entropy', n_estimators = 100, max_features = None,\n",
    "                               min_samples_split = 10, min_samples_leaf = 2, min_weight_fraction_leaf = 0.0))]\n",
    "model = Pipeline(steps=steps)\n",
    "cv = 10\n",
    "n_scores = cross_val_score(model, X = x_train, y = y_train, scoring='accuracy', cv=cv, n_jobs=-1, verbose = 3)\n",
    "acc_iso_rf = mean(n_scores)\n",
    "std_iso_rf = std(n_scores)\n",
    "print('Accuracy: %.4f (%.4f)' % (mean(n_scores), std(n_scores)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 707,
   "id": "f202af95-9296-45fd-a8b1-29cf0ac0d9d7",
   "metadata": {},
   "outputs": [],
   "source": [
    "# previous value was 0.9465116279069767"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bfdc31c9-8d95-4c07-bb5a-0638b60dba87",
   "metadata": {},
   "source": [
    "### Principal Component Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 709,
   "id": "fc1c9bb6-b9b7-421a-98c4-708f5247381c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.6527 (0.0110)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.\n",
      "[Parallel(n_jobs=-1)]: Done   3 out of  10 | elapsed:    0.0s remaining:    0.0s\n",
      "[Parallel(n_jobs=-1)]: Done   7 out of  10 | elapsed:    0.0s remaining:    0.0s\n",
      "[Parallel(n_jobs=-1)]: Done  10 out of  10 | elapsed:    0.0s finished\n"
     ]
    }
   ],
   "source": [
    "from sklearn.decomposition import PCA\n",
    "steps = [('pca', PCA(n_components=1)), ('m', LogisticRegression(random_state = 0))]\n",
    "model = Pipeline(steps=steps)\n",
    "n_scores = cross_val_score(model, X = x_train, y = y_train, scoring='accuracy', cv=cv, n_jobs=-1, verbose = 3)\n",
    "acc_pca_lg = mean(n_scores)\n",
    "std_pca_lg = std(n_scores)\n",
    "print('Accuracy: %.4f (%.4f)' % (mean(n_scores), std(n_scores)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 710,
   "id": "b05e3b40-2480-4c3a-8889-776be0a8e7fb",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.\n",
      "[Parallel(n_jobs=-1)]: Done   3 out of  10 | elapsed:    1.6s remaining:    3.8s\n",
      "[Parallel(n_jobs=-1)]: Done   7 out of  10 | elapsed:    1.6s remaining:    0.6s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.5271 (0.0245)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=-1)]: Done  10 out of  10 | elapsed:    2.4s finished\n"
     ]
    }
   ],
   "source": [
    "from sklearn.decomposition import PCA\n",
    "steps = [('pca', PCA(n_components=1)), ('m', ExtraTreesClassifier(n_estimators=250))]\n",
    "model = Pipeline(steps=steps)\n",
    "n_scores = cross_val_score(model, X = x_train, y = y_train, scoring='accuracy', cv=cv, n_jobs=-1, verbose = 3)\n",
    "acc_pca_et = mean(n_scores)\n",
    "std_pca_et = std(n_scores)\n",
    "print('Accuracy: %.4f (%.4f)' % (mean(n_scores), std(n_scores)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 711,
   "id": "367b4837-68e2-4936-95c4-ce5c9c99b87f",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.\n",
      "[Parallel(n_jobs=-1)]: Done   3 out of  10 | elapsed:    1.3s remaining:    3.2s\n",
      "[Parallel(n_jobs=-1)]: Done   7 out of  10 | elapsed:    1.5s remaining:    0.6s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.5771 (0.0366)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=-1)]: Done  10 out of  10 | elapsed:    2.1s finished\n"
     ]
    }
   ],
   "source": [
    "from sklearn.decomposition import PCA\n",
    "steps = [('pca', PCA(n_components=1)), ('m', RandomForestClassifier(criterion = 'entropy', n_estimators = 100, max_features = None,\n",
    "                               min_samples_split = 10, min_samples_leaf = 2, min_weight_fraction_leaf = 0.0))]\n",
    "model = Pipeline(steps=steps)\n",
    "cv = 10\n",
    "n_scores = cross_val_score(model, X = x_train, y = y_train, scoring='accuracy', cv=cv, n_jobs=-1, verbose = 3)\n",
    "acc_pca_rf = mean(n_scores)\n",
    "std_pca_rf = std(n_scores)\n",
    "print('Accuracy: %.4f (%.4f)' % (mean(n_scores), std(n_scores)))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e8d383b8-d2aa-419a-9c31-9706915ca1a8",
   "metadata": {},
   "source": [
    "### Locally Linear Embedding"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 713,
   "id": "5fbd2a93-82d7-450a-9cf4-e85435049d35",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.\n",
      "[Parallel(n_jobs=-1)]: Done   3 out of  10 | elapsed:    3.4s remaining:    8.0s\n",
      "[Parallel(n_jobs=-1)]: Done   7 out of  10 | elapsed:    3.4s remaining:    1.4s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.6527 (0.0024)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=-1)]: Done  10 out of  10 | elapsed:    4.6s finished\n"
     ]
    }
   ],
   "source": [
    "from sklearn.manifold import LocallyLinearEmbedding\n",
    "steps = [('lle', LocallyLinearEmbedding(n_components=1, eigen_solver='dense')), ('m', LogisticRegression(random_state = 0))]\n",
    "model = Pipeline(steps=steps)\n",
    "cv = 10\n",
    "n_scores = cross_val_score(model, X = x_train, y = y_train, scoring='accuracy', cv=cv, n_jobs=-1, verbose = 3)\n",
    "acc_lle_lg = mean(n_scores)\n",
    "std_lle_lg = std(n_scores)\n",
    "print('Accuracy: %.4f (%.4f)' % (mean(n_scores), std(n_scores)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 714,
   "id": "8d71af9b-dd8e-47e7-8238-04abd7d19bfb",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.\n",
      "[Parallel(n_jobs=-1)]: Done   3 out of  10 | elapsed:    5.0s remaining:   11.9s\n",
      "[Parallel(n_jobs=-1)]: Done   7 out of  10 | elapsed:    5.1s remaining:    2.1s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.5841 (0.0318)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=-1)]: Done  10 out of  10 | elapsed:    6.8s finished\n"
     ]
    }
   ],
   "source": [
    "from sklearn.manifold import LocallyLinearEmbedding\n",
    "steps = [('lle', LocallyLinearEmbedding(n_components=1, eigen_solver='dense')), ('m', ExtraTreesClassifier(n_estimators=250))]\n",
    "model = Pipeline(steps=steps)\n",
    "cv = 10\n",
    "n_scores = cross_val_score(model, X = x_train, y = y_train, scoring='accuracy', cv=cv, n_jobs=-1, verbose = 3)\n",
    "acc_lle_et = mean(n_scores)\n",
    "std_lle_et = std(n_scores)\n",
    "print('Accuracy: %.4f (%.4f)' % (mean(n_scores), std(n_scores)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 715,
   "id": "d5be56e6-9d73-482e-ac52-49e07982563e",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.\n",
      "[Parallel(n_jobs=-1)]: Done   3 out of  10 | elapsed:    4.7s remaining:   11.1s\n",
      "[Parallel(n_jobs=-1)]: Done   7 out of  10 | elapsed:    5.0s remaining:    2.1s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.5957 (0.0242)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=-1)]: Done  10 out of  10 | elapsed:    6.4s finished\n"
     ]
    }
   ],
   "source": [
    "from sklearn.manifold import LocallyLinearEmbedding\n",
    "steps = [('lle', LocallyLinearEmbedding(n_components=1, eigen_solver='dense')), ('m', RandomForestClassifier(criterion = 'entropy', n_estimators = 100, max_features = None,\n",
    "                               min_samples_split = 10, min_samples_leaf = 2, min_weight_fraction_leaf = 0.0))]\n",
    "model = Pipeline(steps=steps)\n",
    "cv = 10\n",
    "n_scores = cross_val_score(model, X = x_train, y = y_train, scoring='accuracy', cv=cv, n_jobs=-1, verbose = 3)\n",
    "acc_lle_rf = mean(n_scores)\n",
    "std_lle_rf = std(n_scores)\n",
    "print('Accuracy: %.4f (%.4f)' % (mean(n_scores), std(n_scores)))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8eddd2d7-00c1-4a43-bd23-bae81236003e",
   "metadata": {},
   "source": [
    "### Modified Locally Linear Embedding"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 717,
   "id": "3b757053-5534-46d2-8809-4230c2f13133",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.\n",
      "[Parallel(n_jobs=-1)]: Done   3 out of  10 | elapsed:    2.9s remaining:    6.9s\n",
      "[Parallel(n_jobs=-1)]: Done   7 out of  10 | elapsed:    3.0s remaining:    1.2s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.6527 (0.0024)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=-1)]: Done  10 out of  10 | elapsed:    4.0s finished\n"
     ]
    }
   ],
   "source": [
    "from sklearn.manifold import LocallyLinearEmbedding\n",
    "steps = [('lle', LocallyLinearEmbedding(n_components=1, method='modified', n_neighbors=10)), ('m', LogisticRegression(random_state = 0))]\n",
    "model = Pipeline(steps=steps)\n",
    "cv = 10\n",
    "n_scores = cross_val_score(model, X = x_train, y = y_train, scoring='accuracy', cv=cv, n_jobs=-1, verbose = 3)\n",
    "acc_mle_lg = mean(n_scores)\n",
    "std_mle_lg = std(n_scores)\n",
    "print('Accuracy: %.4f (%.4f)' % (mean(n_scores), std(n_scores)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 718,
   "id": "06505dd9-4cb6-4e77-be0e-cce982e56ee5",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.\n",
      "[Parallel(n_jobs=-1)]: Done   3 out of  10 | elapsed:    4.3s remaining:   10.2s\n",
      "[Parallel(n_jobs=-1)]: Done   7 out of  10 | elapsed:    4.6s remaining:    1.9s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.5550 (0.0571)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=-1)]: Done  10 out of  10 | elapsed:    5.9s finished\n"
     ]
    }
   ],
   "source": [
    "from sklearn.manifold import LocallyLinearEmbedding\n",
    "steps = [('lle', LocallyLinearEmbedding(n_components=1, method='modified', n_neighbors=10)), ('m', ExtraTreesClassifier(n_estimators=250))]\n",
    "model = Pipeline(steps=steps)\n",
    "cv = 10\n",
    "n_scores = cross_val_score(model, X = x_train, y = y_train, scoring='accuracy', cv=cv, n_jobs=-1, verbose = 3)\n",
    "acc_mle_et = mean(n_scores)\n",
    "std_mle_et = std(n_scores)\n",
    "print('Accuracy: %.4f (%.4f)' % (mean(n_scores), std(n_scores)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 719,
   "id": "0ac834af-9b1d-49f8-96b2-8346453a4e65",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.\n",
      "[Parallel(n_jobs=-1)]: Done   3 out of  10 | elapsed:    4.1s remaining:    9.6s\n",
      "[Parallel(n_jobs=-1)]: Done   7 out of  10 | elapsed:    4.2s remaining:    1.7s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.5823 (0.0407)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=-1)]: Done  10 out of  10 | elapsed:    5.3s finished\n"
     ]
    }
   ],
   "source": [
    "from sklearn.manifold import LocallyLinearEmbedding\n",
    "steps = [('lle', LocallyLinearEmbedding(n_components=1, method='modified', n_neighbors=10)), ('m', RandomForestClassifier(criterion = 'entropy', n_estimators = 100, max_features = None,\n",
    "                               min_samples_split = 10, min_samples_leaf = 2, min_weight_fraction_leaf = 0.0))]\n",
    "model = Pipeline(steps=steps)\n",
    "cv = 10\n",
    "n_scores = cross_val_score(model, X = x_train, y = y_train, scoring='accuracy', cv=cv, n_jobs=-1, verbose = 3)\n",
    "acc_mle_rf = mean(n_scores)\n",
    "std_mle_rf = std(n_scores)\n",
    "print('Accuracy: %.4f (%.4f)' % (mean(n_scores), std(n_scores)))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f157d1dd-2cf6-403c-9eca-a93871c6c40b",
   "metadata": {},
   "source": [
    "### Linear Discriminant Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 721,
   "id": "ec4634cb-a9d0-4d67-8782-62ec07bfb1e5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.8255 (0.0241)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.\n",
      "[Parallel(n_jobs=-1)]: Done   3 out of  10 | elapsed:    0.0s remaining:    0.0s\n",
      "[Parallel(n_jobs=-1)]: Done   7 out of  10 | elapsed:    0.0s remaining:    0.0s\n",
      "[Parallel(n_jobs=-1)]: Done  10 out of  10 | elapsed:    0.0s finished\n"
     ]
    }
   ],
   "source": [
    "# lDA:\n",
    "# n_components cannot be larger than min(n_features, n_classes - 1)\n",
    "#   since there are only 2 classes in the label (0,1), n_components must be 1\n",
    "#\n",
    "# The number of dimensions for the projection is limited to 1 and C-1, where C is the number of classes.\n",
    "# In this case, our dataset is a binary classification problem (two classes), limiting the number of dimensions to 1.\n",
    "\n",
    "from sklearn.discriminant_analysis import LinearDiscriminantAnalysis as LDA\n",
    "steps = [('lda', LDA(n_components=1)), ('m', LogisticRegression(random_state = 0))]\n",
    "model = Pipeline(steps=steps)\n",
    "cv = 10\n",
    "n_scores = cross_val_score(model, X = x_train, y = y_train, scoring='accuracy', cv=cv, n_jobs=-1, verbose = 3)\n",
    "acc_lda_lg = mean(n_scores)\n",
    "std_lda_lg = std(n_scores)\n",
    "print('Accuracy: %.4f (%.4f)' % (mean(n_scores), std(n_scores)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 722,
   "id": "e0b1537c-4089-43ae-abd8-471f76fea6e8",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.\n",
      "[Parallel(n_jobs=-1)]: Done   3 out of  10 | elapsed:    1.3s remaining:    3.1s\n",
      "[Parallel(n_jobs=-1)]: Done   7 out of  10 | elapsed:    1.3s remaining:    0.5s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.7551 (0.0225)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=-1)]: Done  10 out of  10 | elapsed:    1.8s finished\n"
     ]
    }
   ],
   "source": [
    "steps = [('lda', LDA(n_components=1)), ('m', ExtraTreesClassifier(n_estimators=250))]\n",
    "model = Pipeline(steps=steps)\n",
    "cv = 10\n",
    "n_scores = cross_val_score(model, X = x_train, y = y_train, scoring='accuracy', cv=cv, n_jobs=-1, verbose = 3)\n",
    "acc_lda_et = mean(n_scores)\n",
    "std_lda_et = std(n_scores)\n",
    "print('Accuracy: %.4f (%.4f)' % (mean(n_scores), std(n_scores)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 723,
   "id": "67e78632-4711-41f0-a43b-7867296fbf89",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.\n",
      "[Parallel(n_jobs=-1)]: Done   3 out of  10 | elapsed:    0.8s remaining:    1.9s\n",
      "[Parallel(n_jobs=-1)]: Done   7 out of  10 | elapsed:    0.8s remaining:    0.3s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.8167 (0.0268)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=-1)]: Done  10 out of  10 | elapsed:    1.2s finished\n"
     ]
    }
   ],
   "source": [
    "steps = [('lda', LDA(n_components=1)), ('m',  RandomForestClassifier(criterion = 'entropy', n_estimators = 100, max_features = None,\n",
    "                               min_samples_split = 10, min_samples_leaf = 2, min_weight_fraction_leaf = 0.0))]\n",
    "model = Pipeline(steps=steps)\n",
    "cv = 10\n",
    "n_scores = cross_val_score(model, X = x_train, y = y_train, scoring='accuracy', cv=cv, n_jobs=-1, verbose = 3)\n",
    "acc_lda_rf = mean(n_scores)\n",
    "std_lda_rf = std(n_scores)\n",
    "print('Accuracy: %.4f (%.4f)' % (mean(n_scores), std(n_scores)))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "10c16d90-b1b8-45ab-9ed2-69e3d3934bf2",
   "metadata": {},
   "source": [
    "### Quadratic Discriminant Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 725,
   "id": "677a6058-1f2a-41a7-bb7f-d443f53dad96",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.8045 (0.0224)\n"
     ]
    }
   ],
   "source": [
    "x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state = 0)\n",
    "# QDA does not provide fit_transform method.  Therefore apply k-fold validation directly with QDA model objecctd\n",
    "from sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis as QDA\n",
    "model = QDA()\n",
    "n_scores = cross_val_score(model, X = x_train, y = y_train, cv = 10)\n",
    "acc_qda = mean(n_scores)\n",
    "std_qda = std(n_scores)\n",
    "print('Accuracy: %.4f (%.4f)' % (mean(n_scores), std(n_scores)))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "309448bb-056b-465d-8f81-d50135d80e26",
   "metadata": {},
   "source": [
    "### Dimensionality Reduction Summary"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 727,
   "id": "ee5dda3f-357b-4285-8d6c-4e18a370d526",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Accuracy_Dim_Red</th>\n",
       "      <th>StDev</th>\n",
       "      <th>Accuracy_Prev_Calc</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>ISO_lg</th>\n",
       "      <td>72.25</td>\n",
       "      <td>2.58</td>\n",
       "      <td>94.88</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ISO_et</th>\n",
       "      <td>70.33</td>\n",
       "      <td>2.78</td>\n",
       "      <td>94.30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ISO_rf</th>\n",
       "      <td>70.27</td>\n",
       "      <td>2.55</td>\n",
       "      <td>94.66</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PCA_lg</th>\n",
       "      <td>65.27</td>\n",
       "      <td>1.10</td>\n",
       "      <td>94.88</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PCA_et</th>\n",
       "      <td>52.71</td>\n",
       "      <td>2.45</td>\n",
       "      <td>94.30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PCA_rf</th>\n",
       "      <td>57.71</td>\n",
       "      <td>3.66</td>\n",
       "      <td>94.66</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>LDA_lg</th>\n",
       "      <td>82.55</td>\n",
       "      <td>2.41</td>\n",
       "      <td>94.88</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>LDA_et</th>\n",
       "      <td>75.51</td>\n",
       "      <td>2.25</td>\n",
       "      <td>94.30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>LDA_rf</th>\n",
       "      <td>81.67</td>\n",
       "      <td>2.68</td>\n",
       "      <td>94.66</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>LLE_lg</th>\n",
       "      <td>65.27</td>\n",
       "      <td>0.24</td>\n",
       "      <td>94.88</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>LLE_et</th>\n",
       "      <td>58.41</td>\n",
       "      <td>3.18</td>\n",
       "      <td>94.30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>LLE_rf</th>\n",
       "      <td>59.57</td>\n",
       "      <td>2.42</td>\n",
       "      <td>94.66</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MLLE_lg</th>\n",
       "      <td>65.27</td>\n",
       "      <td>0.24</td>\n",
       "      <td>94.88</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MLLE_et</th>\n",
       "      <td>55.50</td>\n",
       "      <td>5.71</td>\n",
       "      <td>94.30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MLLE_rf</th>\n",
       "      <td>58.23</td>\n",
       "      <td>4.07</td>\n",
       "      <td>94.66</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>QDA</th>\n",
       "      <td>80.45</td>\n",
       "      <td>2.24</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Accuracy_Dim_Red  StDev  Accuracy_Prev_Calc\n",
       "ISO_lg              72.25   2.58               94.88\n",
       "ISO_et              70.33   2.78               94.30\n",
       "ISO_rf              70.27   2.55               94.66\n",
       "PCA_lg              65.27   1.10               94.88\n",
       "PCA_et              52.71   2.45               94.30\n",
       "PCA_rf              57.71   3.66               94.66\n",
       "LDA_lg              82.55   2.41               94.88\n",
       "LDA_et              75.51   2.25               94.30\n",
       "LDA_rf              81.67   2.68               94.66\n",
       "LLE_lg              65.27   0.24               94.88\n",
       "LLE_et              58.41   3.18               94.30\n",
       "LLE_rf              59.57   2.42               94.66\n",
       "MLLE_lg             65.27   0.24               94.88\n",
       "MLLE_et             55.50   5.71               94.30\n",
       "MLLE_rf             58.23   4.07               94.66\n",
       "QDA                 80.45   2.24                 NaN"
      ]
     },
     "execution_count": 727,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "row_labels = ['ISO_lg', 'ISO_et', 'ISO_rf', 'PCA_lg', 'PCA_et', 'PCA_rf', 'LDA_lg', 'LDA_et', 'LDA_rf',\n",
    "              'LLE_lg', 'LLE_et', 'LLE_rf', 'MLLE_lg', 'MLLE_et', 'MLLE_rf', 'QDA',]\n",
    "accuracies = [acc_iso_lg, acc_iso_et, acc_iso_rf, acc_pca_lg, acc_pca_et, acc_pca_rf, acc_lda_lg, acc_lda_et, acc_lda_rf,\n",
    "              acc_lle_lg, acc_lle_et, acc_lle_rf, acc_mle_lg, acc_mle_et, acc_mle_rf, acc_qda]\n",
    "#accuracies = np.array(accuracies) * 100\n",
    "stdevs = [std_iso_lg, std_iso_et, std_iso_rf, std_pca_lg, std_pca_et, std_pca_rf, std_lda_lg, std_lda_et, std_lda_rf,\n",
    "          std_lle_lg, std_lle_et, std_lle_rf, std_mle_lg, std_mle_et, std_mle_rf, std_qda]\n",
    "#stdevs = np.array(stdevs) * 100\n",
    "\n",
    "known_accuracies = [acc_lg, acc_et, acc_rf, acc_lg, acc_et, acc_rf, acc_lg, acc_et, acc_rf, acc_lg, acc_et, acc_rf, acc_lg, acc_et, acc_rf, np.nan]\n",
    "\n",
    "# Dataframes\n",
    "accuracies = pd.DataFrame(accuracies, row_labels, ['Accuracy_Dim_Red'])\n",
    "stdevs = pd.DataFrame(stdevs, row_labels, ['StDev'])\n",
    "known_accuracies = pd.DataFrame(known_accuracies, row_labels, ['Accuracy_Prev_Calc'])\n",
    "\n",
    "results = pd.concat([accuracies, stdevs, known_accuracies], axis = 1)\n",
    "pd.options.display.float_format = \"{:,.2f}\".format\n",
    "#the following attempts to select columns containing only numerical types; this isn't necessary because all are numerical\n",
    "#results[results.select_dtypes(include=['number']).columns] *= 100\n",
    "results *= 100\n",
    "results"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
